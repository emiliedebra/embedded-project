
D:\UCT\ESProject\en.stm32cubef4\STM32Cube_FW_F4_V1.16.0\Projects\STM32F4-Discovery\Applications\Audio\Audio_playback_and_record\TrueSTUDIO\STM32F4-DISCO\Debug\STM32F4-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d8  20000000  080082ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
  7 .bss          00002180  200000d8  200000d8  000200d8  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  20002258  20002258  000200d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000feec  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0003f82f  00000000  00000000  0002fff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000074c1  00000000  00000000  0006f81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001678  00000000  00000000  00076ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002050  00000000  00000000  00078358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016a1f  00000000  00000000  0007a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000083ed  00000000  00000000  00090dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000991b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000044ec  00000000  00000000  00099230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d8 	.word	0x200000d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c74 	.word	0x08007c74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	08007c74 	.word	0x08007c74

080001c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
  ldr  r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001f2:	f001 f909 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f007 fc29 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80001fa:	f000 f855 	bl	80002a8 <main>
  bx  lr    
 80001fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000200:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8000204:	080082ac 	.word	0x080082ac
  ldr  r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800020c:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8000210:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8000214:	20002258 	.word	0x20002258

08000218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess (USBH_HandleTypeDef *pHost, uint8_t vId)
{  
  switch (vId)
 800021c:	2902      	cmp	r1, #2
{  
 800021e:	b508      	push	{r3, lr}
  switch (vId)
 8000220:	d00c      	beq.n	800023c <USBH_UserProcess+0x20>
 8000222:	2905      	cmp	r1, #5
 8000224:	d10d      	bne.n	8000242 <USBH_UserProcess+0x26>
  { 
  case HOST_USER_SELECT_CONFIGURATION:
    break;
    
  case HOST_USER_DISCONNECTION:
    WavePlayer_CallBack();
 8000226:	f000 fc2f 	bl	8000a88 <WavePlayer_CallBack>
    AppliState = APPLICATION_IDLE;
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <USBH_UserProcess+0x28>)
    f_mount(NULL, (TCHAR const*)"", 0);          
 800022c:	4906      	ldr	r1, [pc, #24]	; (8000248 <USBH_UserProcess+0x2c>)
    AppliState = APPLICATION_IDLE;
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
    f_mount(NULL, (TCHAR const*)"", 0);          
 8000232:	4610      	mov	r0, r2
    break;
    
  default:
    break; 
  }
}
 8000234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f_mount(NULL, (TCHAR const*)"", 0);          
 8000238:	f005 bda8 	b.w	8005d8c <f_mount>
    AppliState = APPLICATION_START;
 800023c:	4b01      	ldr	r3, [pc, #4]	; (8000244 <USBH_UserProcess+0x28>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
 8000242:	bd08      	pop	{r3, pc}
 8000244:	200000f4 	.word	0x200000f4
 8000248:	080082a3 	.word	0x080082a3

0800024c <playBeat>:
void playBeat() {
 800024c:	b508      	push	{r3, lr}
	WavePlayerStop();
 800024e:	f000 fb28 	bl	80008a2 <WavePlayerStop>
	CmdIndex = CMD_PLAY;
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <playBeat+0x20>)
 8000254:	2200      	movs	r2, #0
	BSP_LED_On(LED5);
 8000256:	2002      	movs	r0, #2
	CmdIndex = CMD_PLAY;
 8000258:	601a      	str	r2, [r3, #0]
	BSP_LED_On(LED5);
 800025a:	f000 fe4f 	bl	8000efc <BSP_LED_On>
	WavePlayerStart();
 800025e:	f000 fbe3 	bl	8000a28 <WavePlayerStart>
	BSP_LED_Off(LED5);
 8000262:	2002      	movs	r0, #2
}
 8000264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BSP_LED_Off(LED5);
 8000268:	f000 be56 	b.w	8000f18 <BSP_LED_Off>
 800026c:	200000f8 	.word	0x200000f8

08000270 <HAL_TIM_PeriodElapsedCallback>:
{
 8000270:	b508      	push	{r3, lr}
	BSP_LED_Toggle(LED6);
 8000272:	2003      	movs	r0, #3
 8000274:	f000 fe5e 	bl	8000f34 <BSP_LED_Toggle>
	beatFlag = 1;
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
 800027e:	bd08      	pop	{r3, pc}
 8000280:	20000107 	.word	0x20000107

08000284 <HAL_UART_TxCpltCallback>:
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <HAL_UART_TxCpltCallback+0x8>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	4770      	bx	lr
 800028c:	20000105 	.word	0x20000105

08000290 <HAL_UART_RxCpltCallback>:
	UartReady = SET;
 8000290:	4b01      	ldr	r3, [pc, #4]	; (8000298 <HAL_UART_RxCpltCallback+0x8>)
 8000292:	2201      	movs	r2, #1
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	4770      	bx	lr
 8000298:	20000105 	.word	0x20000105

0800029c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800029c:	b508      	push	{r3, lr}
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fe2c 	bl	8000efc <BSP_LED_On>
 80002a4:	e7fe      	b.n	80002a4 <Error_Handler+0x8>
	...

080002a8 <main>:
{
 80002a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002ac:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 80002ae:	f001 f8e7 	bl	8001480 <HAL_Init>
  BSP_LED_Init(LED3);
 80002b2:	2001      	movs	r0, #1
 80002b4:	f000 fdc8 	bl	8000e48 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 fdc5 	bl	8000e48 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80002be:	2002      	movs	r0, #2
 80002c0:	f000 fdc2 	bl	8000e48 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 fdbf 	bl	8000e48 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ca:	4b72      	ldr	r3, [pc, #456]	; (8000494 <main+0x1ec>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	9101      	str	r1, [sp, #4]
 80002d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002d6:	641a      	str	r2, [r3, #64]	; 0x40
 80002d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002e2:	4b6d      	ldr	r3, [pc, #436]	; (8000498 <main+0x1f0>)
 80002e4:	9102      	str	r1, [sp, #8]
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000306:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000308:	2308      	movs	r3, #8
 800030a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800030c:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000312:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000316:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800031a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800031c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f003 f82f 	bl	8003380 <HAL_RCC_OscConfig>
 8000322:	b108      	cbz	r0, 8000328 <main+0x80>
    Error_Handler();
 8000324:	f7ff ffba 	bl	800029c <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000328:	230f      	movs	r3, #15
 800032a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800032c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000332:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000334:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800033a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800033e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000340:	f003 f9ec 	bl	800371c <HAL_RCC_ClockConfig>
 8000344:	2800      	cmp	r0, #0
 8000346:	d1ed      	bne.n	8000324 <main+0x7c>
  if (HAL_GetREVID() == 0x1001)
 8000348:	f001 f8ce 	bl	80014e8 <HAL_GetREVID>
 800034c:	f241 0301 	movw	r3, #4097	; 0x1001
 8000350:	4298      	cmp	r0, r3
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000352:	bf08      	it	eq
 8000354:	4a51      	ldreq	r2, [pc, #324]	; (800049c <main+0x1f4>)
  TimHandle.Instance = TIM3;
 8000356:	4c52      	ldr	r4, [pc, #328]	; (80004a0 <main+0x1f8>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000358:	bf02      	ittt	eq
 800035a:	6813      	ldreq	r3, [r2, #0]
 800035c:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8000360:	6013      	streq	r3, [r2, #0]
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000362:	4b50      	ldr	r3, [pc, #320]	; (80004a4 <main+0x1fc>)
 8000364:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	fbb3 f3f2 	udiv	r3, r3, r2
 800036e:	4a4e      	ldr	r2, [pc, #312]	; (80004a8 <main+0x200>)
 8000370:	3b01      	subs	r3, #1
 8000372:	6013      	str	r3, [r2, #0]
  TimHandle.Instance = TIM3;
 8000374:	4a4d      	ldr	r2, [pc, #308]	; (80004ac <main+0x204>)
 8000376:	6022      	str	r2, [r4, #0]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000378:	6063      	str	r3, [r4, #4]
  TimHandle.Init.Period = 10000 - 1;
 800037a:	f242 720f 	movw	r2, #9999	; 0x270f
  TimHandle.Init.ClockDivision = 0;
 800037e:	2300      	movs	r3, #0
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000380:	4620      	mov	r0, r4
  TimHandle.Init.Period = 10000 - 1;
 8000382:	60e2      	str	r2, [r4, #12]
  TimHandle.Init.ClockDivision = 0;
 8000384:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000386:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000388:	f003 fcbc 	bl	8003d04 <HAL_TIM_Base_Init>
 800038c:	2800      	cmp	r0, #0
 800038e:	d1c9      	bne.n	8000324 <main+0x7c>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000390:	4620      	mov	r0, r4
 8000392:	f003 fba1 	bl	8003ad8 <HAL_TIM_Base_Start_IT>
 8000396:	4604      	mov	r4, r0
 8000398:	2800      	cmp	r0, #0
 800039a:	d1c3      	bne.n	8000324 <main+0x7c>
  BSP_LED_On(LED4);
 800039c:	f000 fdae 	bl	8000efc <BSP_LED_On>
  RepeatState = REPEAT_ON;
 80003a0:	4b43      	ldr	r3, [pc, #268]	; (80004b0 <main+0x208>)
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80003a2:	4620      	mov	r0, r4
 80003a4:	2101      	movs	r1, #1
  RepeatState = REPEAT_ON;
 80003a6:	601c      	str	r4, [r3, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80003a8:	f000 fdd0 	bl	8000f4c <BSP_PB_Init>
  UartHandle.Instance = USARTx;
 80003ac:	4841      	ldr	r0, [pc, #260]	; (80004b4 <main+0x20c>)
  UartHandle.Init.BaudRate = 9600;
 80003ae:	4a42      	ldr	r2, [pc, #264]	; (80004b8 <main+0x210>)
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80003b0:	6084      	str	r4, [r0, #8]
  UartHandle.Init.BaudRate = 9600;
 80003b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80003b6:	e880 000c 	stmia.w	r0, {r2, r3}
  UartHandle.Init.Mode = UART_MODE_TX_RX;
 80003ba:	230c      	movs	r3, #12
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 80003bc:	60c4      	str	r4, [r0, #12]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 80003be:	6104      	str	r4, [r0, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c0:	6184      	str	r4, [r0, #24]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c2:	61c4      	str	r4, [r0, #28]
  UartHandle.Init.Mode = UART_MODE_TX_RX;
 80003c4:	6143      	str	r3, [r0, #20]
  if(HAL_UART_Init(&UartHandle) != HAL_OK) {
 80003c6:	f003 fde1 	bl	8003f8c <HAL_UART_Init>
 80003ca:	4604      	mov	r4, r0
 80003cc:	2800      	cmp	r0, #0
 80003ce:	d1a9      	bne.n	8000324 <main+0x7c>
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80003d0:	493a      	ldr	r1, [pc, #232]	; (80004bc <main+0x214>)
 80003d2:	483b      	ldr	r0, [pc, #236]	; (80004c0 <main+0x218>)
 80003d4:	f006 f85e 	bl	8006494 <FATFS_LinkDriver>
 80003d8:	4602      	mov	r2, r0
 80003da:	2800      	cmp	r0, #0
 80003dc:	d156      	bne.n	800048c <main+0x1e4>
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80003de:	4939      	ldr	r1, [pc, #228]	; (80004c4 <main+0x21c>)
 80003e0:	4839      	ldr	r0, [pc, #228]	; (80004c8 <main+0x220>)
    	if (beatFlag == 1){
 80003e2:	4e3a      	ldr	r6, [pc, #232]	; (80004cc <main+0x224>)
			if(HAL_UART_Transmit_IT(&UartHandle, (uint8_t *)beat, 1)!= HAL_OK){
 80003e4:	4c3a      	ldr	r4, [pc, #232]	; (80004d0 <main+0x228>)
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80003e6:	f006 fed8 	bl	800719a <USBH_Init>
    USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 80003ea:	493a      	ldr	r1, [pc, #232]	; (80004d4 <main+0x22c>)
 80003ec:	4836      	ldr	r0, [pc, #216]	; (80004c8 <main+0x220>)
 80003ee:	f006 feeb 	bl	80071c8 <USBH_RegisterClass>
    USBH_Start(&hUSBHost);
 80003f2:	4835      	ldr	r0, [pc, #212]	; (80004c8 <main+0x220>)
 80003f4:	f006 ff1b 	bl	800722e <USBH_Start>
 80003f8:	4637      	mov	r7, r6
    	if (beatFlag == 1){
 80003fa:	7832      	ldrb	r2, [r6, #0]
 80003fc:	2a01      	cmp	r2, #1
 80003fe:	d12a      	bne.n	8000456 <main+0x1ae>
			if(HAL_UART_Transmit_IT(&UartHandle, (uint8_t *)beat, 1)!= HAL_OK){
 8000400:	4621      	mov	r1, r4
 8000402:	482c      	ldr	r0, [pc, #176]	; (80004b4 <main+0x20c>)
 8000404:	f003 fdf0 	bl	8003fe8 <HAL_UART_Transmit_IT>
 8000408:	2800      	cmp	r0, #0
 800040a:	d18b      	bne.n	8000324 <main+0x7c>
			while(UartReady != SET){}
 800040c:	4d32      	ldr	r5, [pc, #200]	; (80004d8 <main+0x230>)
 800040e:	46a8      	mov	r8, r5
 8000410:	782b      	ldrb	r3, [r5, #0]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d1fc      	bne.n	8000410 <main+0x168>
			UartReady = RESET;
 8000416:	2300      	movs	r3, #0
			if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)buttons, 2)!= HAL_OK){
 8000418:	2202      	movs	r2, #2
 800041a:	4930      	ldr	r1, [pc, #192]	; (80004dc <main+0x234>)
 800041c:	4825      	ldr	r0, [pc, #148]	; (80004b4 <main+0x20c>)
			UartReady = RESET;
 800041e:	702b      	strb	r3, [r5, #0]
			if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)buttons, 2)!= HAL_OK){
 8000420:	f003 fe01 	bl	8004026 <HAL_UART_Receive_IT>
 8000424:	2800      	cmp	r0, #0
 8000426:	f47f af7d 	bne.w	8000324 <main+0x7c>
			while(UartReady != SET){}
 800042a:	f898 3000 	ldrb.w	r3, [r8]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d1fb      	bne.n	800042a <main+0x182>
			UartReady = RESET;
 8000432:	2300      	movs	r3, #0
 8000434:	702b      	strb	r3, [r5, #0]
			if(buttons[beat[0]] == 1){
 8000436:	4a29      	ldr	r2, [pc, #164]	; (80004dc <main+0x234>)
 8000438:	7823      	ldrb	r3, [r4, #0]
 800043a:	5cd3      	ldrb	r3, [r2, r3]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d101      	bne.n	8000444 <main+0x19c>
				playBeat();
 8000440:	f7ff ff04 	bl	800024c <playBeat>
			if (beat[0] == 1){
 8000444:	7823      	ldrb	r3, [r4, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	f04f 0200 	mov.w	r2, #0
				beat[0]++;
 800044c:	bf16      	itet	ne
 800044e:	3301      	addne	r3, #1
				beat[0] = 0;
 8000450:	7022      	strbeq	r2, [r4, #0]
				beat[0]++;
 8000452:	7023      	strbne	r3, [r4, #0]
    		beatFlag = 0;
 8000454:	703a      	strb	r2, [r7, #0]
    	switch(AppliState)
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <main+0x238>)
 8000458:	f893 8000 	ldrb.w	r8, [r3]
 800045c:	f1b8 0f01 	cmp.w	r8, #1
 8000460:	d106      	bne.n	8000470 <main+0x1c8>
  switch (USBH_USR_ApplicationState)
 8000462:	4d20      	ldr	r5, [pc, #128]	; (80004e4 <main+0x23c>)
 8000464:	782a      	ldrb	r2, [r5, #0]
 8000466:	b13a      	cbz	r2, 8000478 <main+0x1d0>
 8000468:	2a01      	cmp	r2, #1
 800046a:	d101      	bne.n	8000470 <main+0x1c8>
    USBH_USR_ApplicationState = USBH_USR_FS_INIT;
 800046c:	2300      	movs	r3, #0
 800046e:	702b      	strb	r3, [r5, #0]
    	USBH_Process(&hUSBHost);
 8000470:	4815      	ldr	r0, [pc, #84]	; (80004c8 <main+0x220>)
 8000472:	f006 fee6 	bl	8007242 <USBH_Process>
    	if (beatFlag == 1){
 8000476:	e7c0      	b.n	80003fa <main+0x152>
    if (f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0 ) != FR_OK ) 
 8000478:	4910      	ldr	r1, [pc, #64]	; (80004bc <main+0x214>)
 800047a:	481b      	ldr	r0, [pc, #108]	; (80004e8 <main+0x240>)
 800047c:	f005 fc86 	bl	8005d8c <f_mount>
 8000480:	2800      	cmp	r0, #0
 8000482:	f47f af4f 	bne.w	8000324 <main+0x7c>
    USBH_USR_ApplicationState = USBH_USR_AUDIO;
 8000486:	f885 8000 	strb.w	r8, [r5]
 800048a:	e7f1      	b.n	8000470 <main+0x1c8>
}
 800048c:	4620      	mov	r0, r4
 800048e:	b014      	add	sp, #80	; 0x50
 8000490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000494:	40023800 	.word	0x40023800
 8000498:	40007000 	.word	0x40007000
 800049c:	40023c00 	.word	0x40023c00
 80004a0:	20000a60 	.word	0x20000a60
 80004a4:	20000050 	.word	0x20000050
 80004a8:	2000010c 	.word	0x2000010c
 80004ac:	40000400 	.word	0x40000400
 80004b0:	20000100 	.word	0x20000100
 80004b4:	200007ac 	.word	0x200007ac
 80004b8:	40004400 	.word	0x40004400
 80004bc:	200007ec 	.word	0x200007ec
 80004c0:	08007dcc 	.word	0x08007dcc
 80004c4:	0800021d 	.word	0x0800021d
 80004c8:	20000414 	.word	0x20000414
 80004cc:	20000107 	.word	0x20000107
 80004d0:	20000106 	.word	0x20000106
 80004d4:	20000054 	.word	0x20000054
 80004d8:	20000105 	.word	0x20000105
 80004dc:	20000108 	.word	0x20000108
 80004e0:	200000f4 	.word	0x200000f4
 80004e4:	20000104 	.word	0x20000104
 80004e8:	20000830 	.word	0x20000830

080004ec <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == GPIO_PIN_0) 
 80004ec:	2801      	cmp	r0, #1
{
 80004ee:	b510      	push	{r4, lr}
  if(GPIO_Pin == GPIO_PIN_0) 
 80004f0:	d10c      	bne.n	800050c <HAL_GPIO_EXTI_Callback+0x20>
  {
	  CmdIndex = CMD_PLAY;
 80004f2:	2400      	movs	r4, #0
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_GPIO_EXTI_Callback+0x24>)
	  BSP_LED_On(LED4);
 80004f6:	4620      	mov	r0, r4
	  CmdIndex = CMD_PLAY;
 80004f8:	601c      	str	r4, [r3, #0]
	  BSP_LED_On(LED4);
 80004fa:	f000 fcff 	bl	8000efc <BSP_LED_On>
	  WavePlayerStart();
 80004fe:	f000 fa93 	bl	8000a28 <WavePlayerStart>
	  //HAL_Delay(10);
	  BSP_LED_Off(LED4);
 8000502:	4620      	mov	r0, r4
  }
}
 8000504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  BSP_LED_Off(LED4);
 8000508:	f000 bd06 	b.w	8000f18 <BSP_LED_Off>
 800050c:	bd10      	pop	{r4, pc}
 800050e:	bf00      	nop
 8000510:	200000f8 	.word	0x200000f8

08000514 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
	BSP_LED_On(LED3);
 8000514:	2001      	movs	r0, #1
 8000516:	f000 bcf1 	b.w	8000efc <BSP_LED_On>
	...

0800051c <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{  
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <HAL_UART_MspInit+0x80>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000522:	4d1f      	ldr	r5, [pc, #124]	; (80005a0 <HAL_UART_MspInit+0x84>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8000524:	2400      	movs	r4, #0
 8000526:	9400      	str	r4, [sp, #0]
 8000528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052a:	f042 0201 	orr.w	r2, r2, #1
 800052e:	631a      	str	r2, [r3, #48]	; 0x30
 8000530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000532:	f002 0201 	and.w	r2, r2, #1
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9a00      	ldr	r2, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 800053a:	9401      	str	r4, [sp, #4]
 800053c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
 8000544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000546:	f002 0201 	and.w	r2, r2, #1
 800054a:	9201      	str	r2, [sp, #4]
 800054c:	9a01      	ldr	r2, [sp, #4]
  USARTx_CLK_ENABLE(); 
 800054e:	9402      	str	r4, [sp, #8]
 8000550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000552:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000556:	641a      	str	r2, [r3, #64]	; 0x40
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800055a:	9405      	str	r4, [sp, #20]
  USARTx_CLK_ENABLE(); 
 800055c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000560:	9302      	str	r3, [sp, #8]
 8000562:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000564:	2304      	movs	r3, #4
 8000566:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000568:	2607      	movs	r6, #7
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800056a:	2302      	movs	r3, #2
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800056c:	a903      	add	r1, sp, #12
 800056e:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000570:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000572:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000574:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000576:	f001 fa2f 	bl	80019d8 <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800057a:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800057c:	a903      	add	r1, sp, #12
 800057e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000580:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000582:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000584:	f001 fa28 	bl	80019d8 <HAL_GPIO_Init>
    
  /*##-3- Configure the NVIC for UART ########################################*/
  /* NVIC for USART1 */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	4621      	mov	r1, r4
 800058c:	2026      	movs	r0, #38	; 0x26
 800058e:	f000 ffc3 	bl	8001518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8000592:	2026      	movs	r0, #38	; 0x26
 8000594:	f000 fff4 	bl	8001580 <HAL_NVIC_EnableIRQ>
}
 8000598:	b008      	add	sp, #32
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020000 	.word	0x40020000

080005a4 <HAL_TIM_Base_MspInit>:

/**
  * @}
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80005a4:	b507      	push	{r0, r1, r2, lr}
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_TIM_Base_MspInit+0x30>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005ae:	f041 0102 	orr.w	r1, r1, #2
 80005b2:	6419      	str	r1, [r3, #64]	; 0x40
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	9301      	str	r3, [sp, #4]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80005bc:	2104      	movs	r1, #4
 80005be:	201d      	movs	r0, #29
  __HAL_RCC_TIM3_CLK_ENABLE();
 80005c0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80005c2:	f000 ffa9 	bl	8001518 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005c6:	201d      	movs	r0, #29
 80005c8:	f000 ffda 	bl	8001580 <HAL_NVIC_EnableIRQ>
}
 80005cc:	b003      	add	sp, #12
 80005ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800

080005d8 <NMI_Handler>:
 80005d8:	4770      	bx	lr

080005da <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005da:	e7fe      	b.n	80005da <HardFault_Handler>

080005dc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005dc:	e7fe      	b.n	80005dc <MemManage_Handler>

080005de <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005de:	e7fe      	b.n	80005de <BusFault_Handler>

080005e0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler>

080005e2 <SVC_Handler>:
 80005e2:	4770      	bx	lr

080005e4 <DebugMon_Handler>:
 80005e4:	4770      	bx	lr

080005e6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005e6:	4770      	bx	lr

080005e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80005e8:	b508      	push	{r3, lr}
  HAL_IncTick();
 80005ea:	f000 ff5f 	bl	80014ac <HAL_IncTick>

  /* Test on the command: Recording */
  if (CmdIndex == CMD_RECORD)
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SysTick_Handler+0x18>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
  {
    /* Increments the time recording base variable */
    TimeRecBase ++; 
 80005f4:	bf01      	itttt	eq
 80005f6:	4a03      	ldreq	r2, [pc, #12]	; (8000604 <SysTick_Handler+0x1c>)
 80005f8:	6813      	ldreq	r3, [r2, #0]
 80005fa:	3301      	addeq	r3, #1
 80005fc:	6013      	streq	r3, [r2, #0]
 80005fe:	bd08      	pop	{r3, pc}
 8000600:	200000f8 	.word	0x200000f8
 8000604:	20000110 	.word	0x20000110

08000608 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000608:	2001      	movs	r0, #1
 800060a:	f001 bacf 	b.w	8001bac <HAL_GPIO_EXTI_IRQHandler>

0800060e <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800060e:	2002      	movs	r0, #2
 8000610:	f001 bacc 	b.w	8001bac <HAL_GPIO_EXTI_IRQHandler>

08000614 <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(& UartHandle);
 8000614:	4801      	ldr	r0, [pc, #4]	; (800061c <USART2_IRQHandler+0x8>)
 8000616:	f003 bd63 	b.w	80040e0 <HAL_UART_IRQHandler>
 800061a:	bf00      	nop
 800061c:	200007ac 	.word	0x200007ac

08000620 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8000620:	4b01      	ldr	r3, [pc, #4]	; (8000628 <DMA1_Stream7_IRQHandler+0x8>)
 8000622:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000624:	f001 b91a 	b.w	800185c <HAL_DMA_IRQHandler>
 8000628:	200021c0 	.word	0x200021c0

0800062c <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <DMA1_Stream3_IRQHandler+0x8>)
 800062e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000630:	f001 b914 	b.w	800185c <HAL_DMA_IRQHandler>
 8000634:	20002208 	.word	0x20002208

08000638 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000638:	4801      	ldr	r0, [pc, #4]	; (8000640 <TIM3_IRQHandler+0x8>)
 800063a:	f003 ba5c 	b.w	8003af6 <HAL_TIM_IRQHandler>
 800063e:	bf00      	nop
 8000640:	20000a60 	.word	0x20000a60

08000644 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_HCD_IRQHandler(&hHCD);
 8000644:	4801      	ldr	r0, [pc, #4]	; (800064c <OTG_FS_IRQHandler+0x8>)
 8000646:	f001 bbbd 	b.w	8001dc4 <HAL_HCD_IRQHandler>
 800064a:	bf00      	nop
 800064c:	20000aa0 	.word	0x20000aa0

08000650 <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hHCD)
{
 8000650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Note: On STM32F4-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hHCD->Instance == USB_OTG_FS)
 8000654:	6803      	ldr	r3, [r0, #0]
 8000656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800065a:	b089      	sub	sp, #36	; 0x24
  if(hHCD->Instance == USB_OTG_FS)
 800065c:	d154      	bne.n	8000708 <HAL_HCD_MspInit+0xb8>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4c2c      	ldr	r4, [pc, #176]	; (8000710 <HAL_HCD_MspInit+0xc0>)
    
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL ;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8000660:	482c      	ldr	r0, [pc, #176]	; (8000714 <HAL_HCD_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2500      	movs	r5, #0
 8000664:	9500      	str	r5, [sp, #0]
 8000666:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6323      	str	r3, [r4, #48]	; 0x30
 800066e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	9b00      	ldr	r3, [sp, #0]
    HOST_POWERSW_CLK_ENABLE();
 8000678:	9501      	str	r5, [sp, #4]
 800067a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6323      	str	r3, [r4, #48]	; 0x30
 8000682:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL ;
 8000684:	9505      	str	r5, [sp, #20]
    HOST_POWERSW_CLK_ENABLE();
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800068e:	f04f 0903 	mov.w	r9, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000692:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000698:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 800069c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800069e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80006a0:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006a6:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80006aa:	f001 f995 	bl	80019d8 <HAL_GPIO_Init>
    
    /* This for ID line debug */
    GPIO_InitStruct.Pin =  GPIO_PIN_10;
 80006ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP ;  
 80006b2:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin =  GPIO_PIN_10;
 80006b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80006b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b8:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80006ba:	4816      	ldr	r0, [pc, #88]	; (8000714 <HAL_HCD_MspInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP ;  
 80006be:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80006c0:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006c4:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80006c8:	f001 f986 	bl	80019d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;  
    
    HAL_GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStruct);
 80006cc:	a903      	add	r1, sp, #12
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <HAL_HCD_MspInit+0xc8>)
    GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
 80006d0:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80006d2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;  
 80006d6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStruct);
 80006d8:	f001 f97e 	bl	80019d8 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80006dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80006de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e2:	6363      	str	r3, [r4, #52]	; 0x34
 80006e4:	9502      	str	r5, [sp, #8]
 80006e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ec:	6463      	str	r3, [r4, #68]	; 0x44
 80006ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f4:	9302      	str	r3, [sp, #8]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80006f6:	2043      	movs	r0, #67	; 0x43
 80006f8:	462a      	mov	r2, r5
 80006fa:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80006fc:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80006fe:	f000 ff0b 	bl	8001518 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000702:	2043      	movs	r0, #67	; 0x43
 8000704:	f000 ff3c 	bl	8001580 <HAL_NVIC_EnableIRQ>
  } 
}
 8000708:	b009      	add	sp, #36	; 0x24
 800070a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020800 	.word	0x40020800

0800071c <HAL_HCD_SOF_Callback>:
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hHCD)
{
  USBH_LL_IncTimer (hHCD->pData);
 800071c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8000720:	f006 beac 	b.w	800747c <USBH_LL_IncTimer>

08000724 <HAL_HCD_Connect_Callback>:
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hHCD)
{
  USBH_LL_Connect(hHCD->pData);
 8000724:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8000728:	f006 beb6 	b.w	8007498 <USBH_LL_Connect>

0800072c <HAL_HCD_Disconnect_Callback>:
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hHCD)
{
  USBH_LL_Disconnect(hHCD->pData);
 800072c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8000730:	f006 bec5 	b.w	80074be <USBH_LL_Disconnect>

08000734 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @brief  Notify URB state change callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hHCD, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8000734:	4770      	bx	lr
	...

08000738 <USBH_LL_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
  /* Change Systick prioity */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
{
 800073a:	b570      	push	{r4, r5, r6, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800073c:	4611      	mov	r1, r2
  
  /*Set LL Driver parameters */
  hHCD.Instance = USB_OTG_FS;
 800073e:	4c11      	ldr	r4, [pc, #68]	; (8000784 <USBH_LL_Init+0x4c>)
{
 8000740:	4606      	mov	r6, r0
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	f000 fee7 	bl	8001518 <HAL_NVIC_SetPriority>
  hHCD.Instance = USB_OTG_FS;
 800074a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800074e:	6023      	str	r3, [r4, #0]
  hHCD.Init.Host_channels = 11; 
 8000750:	230b      	movs	r3, #11
 8000752:	60a3      	str	r3, [r4, #8]
  hHCD.Init.dma_enable = 0;
  hHCD.Init.low_power_enable = 0;
  hHCD.Init.phy_itface = HCD_PHY_EMBEDDED; 
 8000754:	2302      	movs	r3, #2
  hHCD.Init.dma_enable = 0;
 8000756:	2500      	movs	r5, #0
  hHCD.Init.phy_itface = HCD_PHY_EMBEDDED; 
 8000758:	61a3      	str	r3, [r4, #24]
  hHCD.Init.Sof_enable = 0;
  hHCD.Init.speed = HCD_SPEED_FULL;
  /* Link The driver to the stack */
  hHCD.pData = phost;
  phost->pData = &hHCD;
 800075a:	f8c6 4390 	str.w	r4, [r6, #912]	; 0x390
  hHCD.Init.speed = HCD_SPEED_FULL;
 800075e:	2303      	movs	r3, #3
  /*Initialize LL Driver */
  HAL_HCD_Init(&hHCD);
 8000760:	4620      	mov	r0, r4
  hHCD.Init.speed = HCD_SPEED_FULL;
 8000762:	60e3      	str	r3, [r4, #12]
  hHCD.Init.dma_enable = 0;
 8000764:	6125      	str	r5, [r4, #16]
  hHCD.Init.low_power_enable = 0;
 8000766:	6225      	str	r5, [r4, #32]
  hHCD.Init.Sof_enable = 0;
 8000768:	61e5      	str	r5, [r4, #28]
  hHCD.pData = phost;
 800076a:	f8c4 6294 	str.w	r6, [r4, #660]	; 0x294
  HAL_HCD_Init(&hHCD);
 800076e:	f001 fa6c 	bl	8001c4a <HAL_HCD_Init>
 
  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hHCD));
 8000772:	4620      	mov	r0, r4
 8000774:	f001 fe6a 	bl	800244c <HAL_HCD_GetCurrentFrame>
 8000778:	4601      	mov	r1, r0
 800077a:	4630      	mov	r0, r6
 800077c:	f006 fe7b 	bl	8007476 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
 8000780:	4628      	mov	r0, r5
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	20000aa0 	.word	0x20000aa0

08000788 <USBH_LL_Start>:
  *         Start the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8000788:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 800078a:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 800078e:	f001 fe27 	bl	80023e0 <HAL_HCD_Start>
  return USBH_OK; 
}
 8000792:	2000      	movs	r0, #0
 8000794:	bd08      	pop	{r3, pc}

08000796 <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 8000796:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 8000798:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 800079c:	f001 fe36 	bl	800240c <HAL_HCD_Stop>
  return USBH_OK; 
}
 80007a0:	2000      	movs	r0, #0
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <USBH_LL_GetSpeed>:
  *         Return the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed  (USBH_HandleTypeDef *phost)
{
 80007a4:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
    
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80007a6:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80007aa:	f001 fe52 	bl	8002452 <HAL_HCD_GetCurrentSpeed>
 80007ae:	2802      	cmp	r0, #2
 80007b0:	bf9a      	itte	ls
 80007b2:	4b02      	ldrls	r3, [pc, #8]	; (80007bc <USBH_LL_GetSpeed+0x18>)
 80007b4:	5c18      	ldrbls	r0, [r3, r0]
 80007b6:	2001      	movhi	r0, #1
  default:  
    speed = USBH_SPEED_FULL;    
    break; 
  }
  return  speed;
}
 80007b8:	bd08      	pop	{r3, pc}
 80007ba:	bf00      	nop
 80007bc:	08007c8c 	.word	0x08007c8c

080007c0 <USBH_LL_ResetPort>:
  *         Reset the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 80007c0:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 80007c2:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80007c6:	f001 fe33 	bl	8002430 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
 80007ca:	2000      	movs	r0, #0
 80007cc:	bd08      	pop	{r3, pc}

080007ce <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize  (USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80007ce:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80007d2:	f001 be36 	b.w	8002442 <HAL_HCD_HC_GetXferCount>

080007d6 <USBH_LL_OpenPipe>:
                                      uint8_t epnum,                                      
                                      uint8_t dev_address,
                                      uint8_t speed,
                                      uint8_t ep_type,
                                      uint16_t mps)
{
 80007d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
 80007d8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80007dc:	9402      	str	r4, [sp, #8]
 80007de:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80007e2:	9401      	str	r4, [sp, #4]
 80007e4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80007e8:	9400      	str	r4, [sp, #0]
 80007ea:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80007ee:	f001 f9e9 	bl	8001bc4 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
 80007f2:	2000      	movs	r0, #0
 80007f4:	b004      	add	sp, #16
 80007f6:	bd10      	pop	{r4, pc}

080007f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe_num: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 80007f8:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe); 
 80007fa:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80007fe:	f001 fa12 	bl	8001c26 <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
 8000802:	2000      	movs	r0, #0
 8000804:	bd08      	pop	{r3, pc}

08000806 <USBH_LL_SubmitURB>:
                                            uint8_t ep_type,  
                                            uint8_t token, 
                                            uint8_t* pbuff, 
                                            uint16_t length,
                                            uint8_t do_ping ) 
{
 8000806:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  HAL_HCD_HC_SubmitRequest (phost->pData,pipe, 
 8000808:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800080c:	9403      	str	r4, [sp, #12]
 800080e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000812:	9402      	str	r4, [sp, #8]
 8000814:	9c07      	ldr	r4, [sp, #28]
 8000816:	9401      	str	r4, [sp, #4]
 8000818:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800081c:	9400      	str	r4, [sp, #0]
 800081e:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 8000822:	f001 fa4f 	bl	8001cc4 <HAL_HCD_HC_SubmitRequest>
                            token, 
                            pbuff, 
                            length,
                            do_ping);
  return USBH_OK;   
}
 8000826:	2000      	movs	r0, #0
 8000828:	b004      	add	sp, #16
 800082a:	bd10      	pop	{r4, pc}

0800082c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef  USBH_LL_GetURBState (USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800082c:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 8000830:	f001 be01 	b.w	8002436 <HAL_HCD_HC_GetURBState>

08000834 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef  USBH_LL_DriverVBUS (USBH_HandleTypeDef *phost, uint8_t state)
{
 8000834:	b508      	push	{r3, lr}

  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8000836:	b949      	cbnz	r1, 800084c <USBH_LL_DriverVBUS+0x18>
  {
    /* DISABLE is needed on output of the Power Switch */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 800083a:	2101      	movs	r1, #1
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <USBH_LL_DriverVBUS+0x1c>)
 800083e:	f001 f9ab 	bl	8001b98 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
 8000842:	20c8      	movs	r0, #200	; 0xc8
 8000844:	f000 fe40 	bl	80014c8 <HAL_Delay>
  return USBH_OK;  
}
 8000848:	2000      	movs	r0, #0
 800084a:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	e7f4      	b.n	800083a <USBH_LL_DriverVBUS+0x6>
 8000850:	40020800 	.word	0x40020800

08000854 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef   USBH_LL_SetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hHCD.hc[pipe].ep_is_in)
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <USBH_LL_SetToggle+0x1c>)
 8000856:	2328      	movs	r3, #40	; 0x28
 8000858:	fb03 0101 	mla	r1, r3, r1, r0
 800085c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8000860:	b11b      	cbz	r3, 800086a <USBH_LL_SetToggle+0x16>
  {
    hHCD.hc[pipe].toggle_in = toggle;
 8000862:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  else
  {
    hHCD.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
 8000866:	2000      	movs	r0, #0
 8000868:	4770      	bx	lr
    hHCD.hc[pipe].toggle_out = toggle;
 800086a:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800086e:	e7fa      	b.n	8000866 <USBH_LL_SetToggle+0x12>
 8000870:	20000aa0 	.word	0x20000aa0

08000874 <USBH_LL_GetToggle>:
  */
uint8_t  USBH_LL_GetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hHCD.hc[pipe].ep_is_in)
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <USBH_LL_GetToggle+0x1c>)
 8000876:	2328      	movs	r3, #40	; 0x28
 8000878:	fb03 2101 	mla	r1, r3, r1, r2
 800087c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8000880:	b113      	cbz	r3, 8000888 <USBH_LL_GetToggle+0x14>
  {
    toggle = hHCD.hc[pipe].toggle_in;
 8000882:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 8000886:	4770      	bx	lr
  }
  else
  {
    toggle = hHCD.hc[pipe].toggle_out;
 8000888:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000aa0 	.word	0x20000aa0

08000894 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay (uint32_t Delay)
{
  HAL_Delay(Delay);  
 8000894:	f000 be18 	b.w	80014c8 <HAL_Delay>

08000898 <WavePlayerPauseResume>:
  * @param  state: Player state: Pause, Resume or Idle
  * @retval None
  */
void WavePlayerPauseResume(uint32_t wState)
{
  if(wState == PAUSE_STATUS)
 8000898:	b908      	cbnz	r0, 800089e <WavePlayerPauseResume+0x6>
  {
    BSP_AUDIO_OUT_Pause();   
 800089a:	f000 bc49 	b.w	8001130 <BSP_AUDIO_OUT_Pause>
  }
  else
  {
    BSP_AUDIO_OUT_Resume();   
 800089e:	f000 bc5b 	b.w	8001158 <BSP_AUDIO_OUT_Resume>

080008a2 <WavePlayerStop>:
  * @param  None
  * @retval None
  */
void WavePlayerStop(void)
{ 
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 bc6c 	b.w	8001180 <BSP_AUDIO_OUT_Stop>

080008a8 <WavePlayerInit>:
* @brief  Initializes the Wave player.
* @param  AudioFreq: Audio sampling frequency
* @retval None
*/
int WavePlayerInit(uint32_t AudioFreq)
{ 
 80008a8:	b508      	push	{r3, lr}
  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  return(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq));  
 80008aa:	4602      	mov	r2, r0
 80008ac:	2146      	movs	r1, #70	; 0x46
 80008ae:	2004      	movs	r0, #4
 80008b0:	f000 fd44 	bl	800133c <BSP_AUDIO_OUT_Init>
}
 80008b4:	bd08      	pop	{r3, pc}
	...

080008b8 <WavePlayBack>:
{ 
 80008b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AudioPlayStart = 1;
 80008bc:	4c43      	ldr	r4, [pc, #268]	; (80009cc <WavePlayBack+0x114>)
  RepeatState = REPEAT_ON;
 80008be:	4f44      	ldr	r7, [pc, #272]	; (80009d0 <WavePlayBack+0x118>)
  UINT bytesread = 0;
 80008c0:	2300      	movs	r3, #0
  AudioPlayStart = 1;
 80008c2:	2201      	movs	r2, #1
 80008c4:	6022      	str	r2, [r4, #0]
  UINT bytesread = 0;
 80008c6:	9301      	str	r3, [sp, #4]
  RepeatState = REPEAT_ON;
 80008c8:	603b      	str	r3, [r7, #0]
  if(WavePlayerInit(AudioFreq) != 0)
 80008ca:	f7ff ffed 	bl	80008a8 <WavePlayerInit>
 80008ce:	46a0      	mov	r8, r4
 80008d0:	b108      	cbz	r0, 80008d6 <WavePlayBack+0x1e>
    Error_Handler();
 80008d2:	f7ff fce3 	bl	800029c <Error_Handler>
  f_lseek(&FileRead, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	483e      	ldr	r0, [pc, #248]	; (80009d4 <WavePlayBack+0x11c>)
  AudioRemSize = WaveDataLength - bytesread;
 80008da:	4c3f      	ldr	r4, [pc, #252]	; (80009d8 <WavePlayBack+0x120>)
  LEDsState = LED6_TOGGLE;
 80008dc:	4e3f      	ldr	r6, [pc, #252]	; (80009dc <WavePlayBack+0x124>)
  PauseResumeStatus = RESUME_STATUS;
 80008de:	4d40      	ldr	r5, [pc, #256]	; (80009e0 <WavePlayBack+0x128>)
  while((AudioRemSize != 0) && (AppliState != APPLICATION_IDLE))
 80008e0:	f8df a114 	ldr.w	sl, [pc, #276]	; 80009f8 <WavePlayBack+0x140>
      if(buffer_offset == BUFFER_OFFSET_HALF)
 80008e4:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80009fc <WavePlayBack+0x144>
  f_lseek(&FileRead, 0);
 80008e8:	f005 fc96 	bl	8006218 <f_lseek>
  f_read (&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE, &bytesread);
 80008ec:	ab01      	add	r3, sp, #4
 80008ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f2:	493c      	ldr	r1, [pc, #240]	; (80009e4 <WavePlayBack+0x12c>)
 80008f4:	4837      	ldr	r0, [pc, #220]	; (80009d4 <WavePlayBack+0x11c>)
 80008f6:	f005 fb61 	bl	8005fbc <f_read>
  AudioRemSize = WaveDataLength - bytesread;
 80008fa:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <WavePlayBack+0x130>)
 80008fc:	9a01      	ldr	r2, [sp, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8000900:	4838      	ldr	r0, [pc, #224]	; (80009e4 <WavePlayBack+0x12c>)
  AudioRemSize = WaveDataLength - bytesread;
 8000902:	1a9b      	subs	r3, r3, r2
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8000904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  AudioRemSize = WaveDataLength - bytesread;
 8000908:	6023      	str	r3, [r4, #0]
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 800090a:	f000 fbeb 	bl	80010e4 <BSP_AUDIO_OUT_Play>
  LEDsState = LED6_TOGGLE;
 800090e:	2306      	movs	r3, #6
 8000910:	6033      	str	r3, [r6, #0]
  PauseResumeStatus = RESUME_STATUS;
 8000912:	2301      	movs	r3, #1
 8000914:	602b      	str	r3, [r5, #0]
  PressCount = 0;
 8000916:	4b35      	ldr	r3, [pc, #212]	; (80009ec <WavePlayBack+0x134>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
  while((AudioRemSize != 0) && (AppliState != APPLICATION_IDLE))
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d046      	beq.n	80009b0 <WavePlayBack+0xf8>
 8000922:	f89a 3000 	ldrb.w	r3, [sl]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d042      	beq.n	80009b0 <WavePlayBack+0xf8>
    if(CmdIndex == CMD_PLAY)
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <WavePlayBack+0x138>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d136      	bne.n	80009a0 <WavePlayBack+0xe8>
      if(PauseResumeStatus == PAUSE_STATUS)
 8000932:	682b      	ldr	r3, [r5, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d12e      	bne.n	8000996 <WavePlayBack+0xde>
        LEDsState = LED6_TOGGLE;
 8000938:	6033      	str	r3, [r6, #0]
        WavePlayerPauseResume(PauseResumeStatus);
 800093a:	6828      	ldr	r0, [r5, #0]
 800093c:	f7ff ffac 	bl	8000898 <WavePlayerPauseResume>
        PauseResumeStatus = IDLE_STATUS;
 8000940:	2302      	movs	r3, #2
 8000942:	602b      	str	r3, [r5, #0]
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8000944:	f899 3000 	ldrb.w	r3, [r9]
      bytesread = 0;
 8000948:	f04f 0b00 	mov.w	fp, #0
      if(buffer_offset == BUFFER_OFFSET_HALF)
 800094c:	2b01      	cmp	r3, #1
      bytesread = 0;
 800094e:	f8cd b004 	str.w	fp, [sp, #4]
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8000952:	d108      	bne.n	8000966 <WavePlayBack+0xae>
        f_read(&FileRead, 
 8000954:	ab01      	add	r3, sp, #4
 8000956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800095a:	4922      	ldr	r1, [pc, #136]	; (80009e4 <WavePlayBack+0x12c>)
 800095c:	481d      	ldr	r0, [pc, #116]	; (80009d4 <WavePlayBack+0x11c>)
 800095e:	f005 fb2d 	bl	8005fbc <f_read>
          buffer_offset = BUFFER_OFFSET_NONE;
 8000962:	f889 b000 	strb.w	fp, [r9]
      if(buffer_offset == BUFFER_OFFSET_FULL)
 8000966:	f899 3000 	ldrb.w	r3, [r9]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d109      	bne.n	8000982 <WavePlayBack+0xca>
        f_read(&FileRead, 
 800096e:	ab01      	add	r3, sp, #4
 8000970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000974:	491f      	ldr	r1, [pc, #124]	; (80009f4 <WavePlayBack+0x13c>)
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <WavePlayBack+0x11c>)
 8000978:	f005 fb20 	bl	8005fbc <f_read>
          buffer_offset = BUFFER_OFFSET_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	f889 3000 	strb.w	r3, [r9]
      if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
        AudioRemSize -= bytesread;
 8000988:	bf85      	ittet	hi
 800098a:	6823      	ldrhi	r3, [r4, #0]
 800098c:	9a01      	ldrhi	r2, [sp, #4]
        AudioRemSize = 0;
 800098e:	2300      	movls	r3, #0
        AudioRemSize -= bytesread;
 8000990:	1a9b      	subhi	r3, r3, r2
        AudioRemSize = 0;
 8000992:	6023      	str	r3, [r4, #0]
 8000994:	e7c2      	b.n	800091c <WavePlayBack+0x64>
      else if(PauseResumeStatus == RESUME_STATUS)
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d1d3      	bne.n	8000944 <WavePlayBack+0x8c>
        LEDsState = LED6_TOGGLE;
 800099c:	2306      	movs	r3, #6
 800099e:	e7cb      	b.n	8000938 <WavePlayBack+0x80>
      WavePlayerStop();
 80009a0:	f7ff ff7f 	bl	80008a2 <WavePlayerStop>
      f_close(&FileRead);
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <WavePlayBack+0x11c>)
 80009a6:	f005 fc26 	bl	80061f6 <f_close>
      AudioRemSize = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	6023      	str	r3, [r4, #0]
      RepeatState = REPEAT_ON;
 80009ae:	603b      	str	r3, [r7, #0]
  LEDsState = LEDS_OFF;
 80009b0:	2307      	movs	r3, #7
 80009b2:	6033      	str	r3, [r6, #0]
  RepeatState = REPEAT_ON;
 80009b4:	2300      	movs	r3, #0
 80009b6:	603b      	str	r3, [r7, #0]
  AudioPlayStart = 0;
 80009b8:	f8c8 3000 	str.w	r3, [r8]
  WavePlayerStop();
 80009bc:	f7ff ff71 	bl	80008a2 <WavePlayerStop>
  f_close(&FileRead);
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <WavePlayBack+0x11c>)
 80009c2:	f005 fc18 	bl	80061f6 <f_close>
}
 80009c6:	b003      	add	sp, #12
 80009c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009cc:	20000114 	.word	0x20000114
 80009d0:	20000100 	.word	0x20000100
 80009d4:	20001f64 	.word	0x20001f64
 80009d8:	20000118 	.word	0x20000118
 80009dc:	20001f60 	.word	0x20001f60
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000d38 	.word	0x20000d38
 80009e8:	2000011c 	.word	0x2000011c
 80009ec:	200000fc 	.word	0x200000fc
 80009f0:	200000f8 	.word	0x200000f8
 80009f4:	20001538 	.word	0x20001538
 80009f8:	200000f4 	.word	0x200000f4
 80009fc:	20000120 	.word	0x20000120

08000a00 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
  buffer_offset = BUFFER_OFFSET_HALF;
 8000a00:	4b01      	ldr	r3, [pc, #4]	; (8000a08 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	4770      	bx	lr
 8000a08:	20000120 	.word	0x20000120

08000a0c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  buffer_offset = BUFFER_OFFSET_FULL;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
  buffer_offset = BUFFER_OFFSET_FULL;
 8000a10:	2202      	movs	r2, #2
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8000a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer_offset = BUFFER_OFFSET_FULL;
 8000a16:	701a      	strb	r2, [r3, #0]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8000a18:	f000 bb82 	b.w	8001120 <BSP_AUDIO_OUT_ChangeBuffer>
 8000a1c:	20000120 	.word	0x20000120
 8000a20:	20000d38 	.word	0x20000d38

08000a24 <BSP_AUDIO_OUT_Error_CallBack>:
* @brief  Manages the DMA FIFO error interrupt.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8000a24:	e7fe      	b.n	8000a24 <BSP_AUDIO_OUT_Error_CallBack>
	...

08000a28 <WavePlayerStart>:
  * @brief  Starts Wave player.
  * @param  None
  * @retval None
  */
void WavePlayerStart(void)
{
 8000a28:	b500      	push	{lr}
 8000a2a:	b08f      	sub	sp, #60	; 0x3c
  UINT bytesread = 0;
 8000a2c:	2300      	movs	r3, #0
  char path[] = "0:/";
 8000a2e:	a90e      	add	r1, sp, #56	; 0x38
  UINT bytesread = 0;
 8000a30:	9301      	str	r3, [sp, #4]
  char path[] = "0:/";
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <WavePlayerStart+0x4c>)
 8000a34:	f841 3d30 	str.w	r3, [r1, #-48]!
  char* wavefilename = NULL;
  WAVE_FormatTypeDef waveformat;
  
  /* Get the read out protection status */
  if(f_opendir(&Directory, path) == FR_OK)
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <WavePlayerStart+0x50>)
 8000a3a:	f005 fcac 	bl	8006396 <f_opendir>
 8000a3e:	b940      	cbnz	r0, 8000a52 <WavePlayerStart+0x2a>
  {
	 // NOTE: if rec available check WaveRecStatus here (I removed it)
     wavefilename = WAVE_NAME;
    /* Open the Wave file to be played */
    if(f_open(&FileRead, wavefilename , FA_READ) != FR_OK)
 8000a40:	2201      	movs	r2, #1
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <WavePlayerStart+0x54>)
 8000a44:	480e      	ldr	r0, [pc, #56]	; (8000a80 <WavePlayerStart+0x58>)
 8000a46:	f005 f9d7 	bl	8005df8 <f_open>
 8000a4a:	b128      	cbz	r0, 8000a58 <WavePlayerStart+0x30>
    {
      BSP_LED_On(LED5);
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f000 fa55 	bl	8000efc <BSP_LED_On>

      /* Play the Wave */
      WavePlayBack(waveformat.SampleRate);
    }    
  }
}
 8000a52:	b00f      	add	sp, #60	; 0x3c
 8000a54:	f85d fb04 	ldr.w	pc, [sp], #4
      f_read (&FileRead, &waveformat, sizeof(waveformat), &bytesread);
 8000a58:	ab01      	add	r3, sp, #4
 8000a5a:	222c      	movs	r2, #44	; 0x2c
 8000a5c:	a903      	add	r1, sp, #12
 8000a5e:	4808      	ldr	r0, [pc, #32]	; (8000a80 <WavePlayerStart+0x58>)
 8000a60:	f005 faac 	bl	8005fbc <f_read>
      WaveDataLength = waveformat.FileSize;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <WavePlayerStart+0x5c>)
 8000a66:	9a04      	ldr	r2, [sp, #16]
      WavePlayBack(waveformat.SampleRate);
 8000a68:	9809      	ldr	r0, [sp, #36]	; 0x24
      WaveDataLength = waveformat.FileSize;
 8000a6a:	601a      	str	r2, [r3, #0]
      WavePlayBack(waveformat.SampleRate);
 8000a6c:	f7ff ff24 	bl	80008b8 <WavePlayBack>
}
 8000a70:	e7ef      	b.n	8000a52 <WavePlayerStart+0x2a>
 8000a72:	bf00      	nop
 8000a74:	002f3a30 	.word	0x002f3a30
 8000a78:	20001d38 	.word	0x20001d38
 8000a7c:	08007c8f 	.word	0x08007c8f
 8000a80:	20001f64 	.word	0x20001f64
 8000a84:	2000011c 	.word	0x2000011c

08000a88 <WavePlayer_CallBack>:
  * @brief Wave player.
  * @param  None
  * @retval None
  */
void WavePlayer_CallBack(void)
{
 8000a88:	b508      	push	{r3, lr}
  if(AppliState != APPLICATION_IDLE)
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <WavePlayer_CallBack+0x48>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b1f3      	cbz	r3, 8000ace <WavePlayer_CallBack+0x46>
  {
    /* Reset the Wave player variables */
    RepeatState = REPEAT_ON;
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <WavePlayer_CallBack+0x4c>)
 8000a92:	2300      	movs	r3, #0
 8000a94:	6013      	str	r3, [r2, #0]
    AudioPlayStart = 0;
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <WavePlayer_CallBack+0x50>)
 8000a98:	6013      	str	r3, [r2, #0]
    LEDsState = LEDS_OFF;
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <WavePlayer_CallBack+0x54>)
 8000a9c:	2107      	movs	r1, #7
 8000a9e:	6011      	str	r1, [r2, #0]
    PauseResumeStatus = RESUME_STATUS;
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <WavePlayer_CallBack+0x58>)
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	6010      	str	r0, [r2, #0]
    WaveDataLength =0;
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <WavePlayer_CallBack+0x5c>)
 8000aa8:	6013      	str	r3, [r2, #0]
    PressCount = 0;
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <WavePlayer_CallBack+0x60>)
 8000aac:	6013      	str	r3, [r2, #0]
    
    /* Stop the Codec */
    if(BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 8000aae:	f000 fb67 	bl	8001180 <BSP_AUDIO_OUT_Stop>
 8000ab2:	b108      	cbz	r0, 8000ab8 <WavePlayer_CallBack+0x30>
    {
      Error_Handler();
 8000ab4:	f7ff fbf2 	bl	800029c <Error_Handler>
    }
    
    /* Turn OFF LED3, LED4 and LED6 */
    BSP_LED_Off(LED3);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 fa2d 	bl	8000f18 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 fa2a 	bl	8000f18 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8000ac4:	2003      	movs	r0, #3
  }
} 
 8000ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BSP_LED_Off(LED6);
 8000aca:	f000 ba25 	b.w	8000f18 <BSP_LED_Off>
 8000ace:	bd08      	pop	{r3, pc}
 8000ad0:	200000f4 	.word	0x200000f4
 8000ad4:	20000100 	.word	0x20000100
 8000ad8:	20000114 	.word	0x20000114
 8000adc:	20001f60 	.word	0x20001f60
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	2000011c 	.word	0x2000011c
 8000ae8:	200000fc 	.word	0x200000fc

08000aec <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 8000aec:	2000      	movs	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 8000af0:	2000      	movs	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000af4:	2964      	cmp	r1, #100	; 0x64
{
 8000af6:	b538      	push	{r3, r4, r5, lr}
 8000af8:	b2c5      	uxtb	r5, r0
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000afa:	d80e      	bhi.n	8000b1a <cs43l22_SetVolume+0x26>
 8000afc:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8000b00:	2464      	movs	r4, #100	; 0x64
 8000b02:	fb91 f4f4 	sdiv	r4, r1, r4
 8000b06:	b2e4      	uxtb	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000b08:	3419      	adds	r4, #25
 8000b0a:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b0c:	4622      	mov	r2, r4
 8000b0e:	2120      	movs	r1, #32
 8000b10:	4628      	mov	r0, r5
 8000b12:	f000 fa8b 	bl	800102c <AUDIO_IO_Write>
 8000b16:	4622      	mov	r2, r4
 8000b18:	e007      	b.n	8000b2a <cs43l22_SetVolume+0x36>
  if(Volume > 0xE6)
 8000b1a:	29e6      	cmp	r1, #230	; 0xe6
 8000b1c:	d90b      	bls.n	8000b36 <cs43l22_SetVolume+0x42>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b1e:	227d      	movs	r2, #125	; 0x7d
 8000b20:	2120      	movs	r1, #32
 8000b22:	4628      	mov	r0, r5
 8000b24:	f000 fa82 	bl	800102c <AUDIO_IO_Write>
 8000b28:	227d      	movs	r2, #125	; 0x7d
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	2121      	movs	r1, #33	; 0x21
 8000b2e:	f000 fa7d 	bl	800102c <AUDIO_IO_Write>
}
 8000b32:	2000      	movs	r0, #0
 8000b34:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000b36:	2464      	movs	r4, #100	; 0x64
 8000b38:	e7e6      	b.n	8000b08 <cs43l22_SetVolume+0x14>
	...

08000b3c <cs43l22_Init>:
{
 8000b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3e:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000b40:	b2f4      	uxtb	r4, r6
{
 8000b42:	460d      	mov	r5, r1
 8000b44:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8000b46:	f000 fa3d 	bl	8000fc4 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f000 fa6c 	bl	800102c <AUDIO_IO_Write>
  switch (OutputDevice)
 8000b54:	1e6a      	subs	r2, r5, #1
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <cs43l22_Init+0xc4>)
 8000b58:	2a03      	cmp	r2, #3
 8000b5a:	d84e      	bhi.n	8000bfa <cs43l22_Init+0xbe>
 8000b5c:	e8df f002 	tbb	[pc, r2]
 8000b60:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8000b64:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 8000b66:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000b68:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f000 fa5d 	bl	800102c <AUDIO_IO_Write>
 8000b72:	2281      	movs	r2, #129	; 0x81
 8000b74:	2105      	movs	r1, #5
 8000b76:	4620      	mov	r0, r4
 8000b78:	f000 fa58 	bl	800102c <AUDIO_IO_Write>
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	2106      	movs	r1, #6
 8000b80:	4620      	mov	r0, r4
 8000b82:	f000 fa53 	bl	800102c <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000b86:	4630      	mov	r0, r6
 8000b88:	4639      	mov	r1, r7
 8000b8a:	f7ff ffb3 	bl	8000af4 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000b8e:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000b90:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000b92:	d00e      	beq.n	8000bb2 <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000b94:	2206      	movs	r2, #6
 8000b96:	210f      	movs	r1, #15
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f000 fa47 	bl	800102c <AUDIO_IO_Write>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2124      	movs	r1, #36	; 0x24
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f000 fa42 	bl	800102c <AUDIO_IO_Write>
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2125      	movs	r1, #37	; 0x25
 8000bac:	4620      	mov	r0, r4
 8000bae:	f000 fa3d 	bl	800102c <AUDIO_IO_Write>
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	f000 fa38 	bl	800102c <AUDIO_IO_Write>
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	210e      	movs	r1, #14
 8000bc2:	f000 fa33 	bl	800102c <AUDIO_IO_Write>
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2127      	movs	r1, #39	; 0x27
 8000bcc:	f000 fa2e 	bl	800102c <AUDIO_IO_Write>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	211f      	movs	r1, #31
 8000bd6:	f000 fa29 	bl	800102c <AUDIO_IO_Write>
 8000bda:	4620      	mov	r0, r4
 8000bdc:	220a      	movs	r2, #10
 8000bde:	211a      	movs	r1, #26
 8000be0:	f000 fa24 	bl	800102c <AUDIO_IO_Write>
 8000be4:	4620      	mov	r0, r4
 8000be6:	220a      	movs	r2, #10
 8000be8:	211b      	movs	r1, #27
 8000bea:	f000 fa1f 	bl	800102c <AUDIO_IO_Write>
}
 8000bee:	4630      	mov	r0, r6
 8000bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 8000bf2:	22af      	movs	r2, #175	; 0xaf
 8000bf4:	e7b7      	b.n	8000b66 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 8000bf6:	22aa      	movs	r2, #170	; 0xaa
 8000bf8:	e7b5      	b.n	8000b66 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	e7b3      	b.n	8000b66 <cs43l22_Init+0x2a>
 8000bfe:	bf00      	nop
 8000c00:	20000121 	.word	0x20000121

08000c04 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 8000c04:	f000 ba10 	b.w	8001028 <AUDIO_IO_DeInit>

08000c08 <cs43l22_ReadID>:
{
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 8000c0c:	f000 f9da 	bl	8000fc4 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000c10:	2101      	movs	r1, #1
 8000c12:	b2e0      	uxtb	r0, r4
 8000c14:	f000 fa26 	bl	8001064 <AUDIO_IO_Read>
}
 8000c18:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8000c1c:	bd10      	pop	{r4, pc}

08000c1e <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 8000c1e:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000c20:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c22:	4620      	mov	r0, r4
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	2104      	movs	r1, #4
 8000c28:	f000 fa00 	bl	800102c <AUDIO_IO_Write>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2122      	movs	r1, #34	; 0x22
 8000c32:	f000 f9fb 	bl	800102c <AUDIO_IO_Write>
 8000c36:	4620      	mov	r0, r4
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2123      	movs	r1, #35	; 0x23
}
 8000c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c40:	f000 b9f4 	b.w	800102c <AUDIO_IO_Write>

08000c44 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8000c44:	2901      	cmp	r1, #1
{
 8000c46:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8000c48:	d103      	bne.n	8000c52 <cs43l22_SetMute+0xe>
 8000c4a:	f7ff ffe8 	bl	8000c1e <cs43l22_SetMute.part.0>
}
 8000c4e:	2000      	movs	r0, #0
 8000c50:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8000c52:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c54:	4620      	mov	r0, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	2122      	movs	r1, #34	; 0x22
 8000c5a:	f000 f9e7 	bl	800102c <AUDIO_IO_Write>
 8000c5e:	4620      	mov	r0, r4
 8000c60:	2200      	movs	r2, #0
 8000c62:	2123      	movs	r1, #35	; 0x23
 8000c64:	f000 f9e2 	bl	800102c <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c6a:	2104      	movs	r1, #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000c6c:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f000 f9dc 	bl	800102c <AUDIO_IO_Write>
 8000c74:	e7eb      	b.n	8000c4e <cs43l22_SetMute+0xa>
 8000c76:	bf00      	nop
 8000c78:	20000121 	.word	0x20000121

08000c7c <cs43l22_Resume>:
{
 8000c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 8000c7e:	2500      	movs	r5, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000c80:	4629      	mov	r1, r5
{
 8000c82:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8000c84:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000c86:	f7ff ffdd 	bl	8000c44 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8000c8a:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000c8c:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	2bfe      	cmp	r3, #254	; 0xfe
 8000c92:	d90e      	bls.n	8000cb2 <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <cs43l22_Resume+0x40>)
 8000c96:	b2e4      	uxtb	r4, r4
 8000c98:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	f000 f9c5 	bl	800102c <AUDIO_IO_Write>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	229e      	movs	r2, #158	; 0x9e
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	f000 f9c0 	bl	800102c <AUDIO_IO_Write>
}
 8000cac:	4630      	mov	r0, r6
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	e7e9      	b.n	8000c8e <cs43l22_Resume+0x12>
 8000cba:	bf00      	nop
 8000cbc:	20000121 	.word	0x20000121

08000cc0 <cs43l22_Pause>:
{  
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff ffab 	bl	8000c1e <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000cc8:	b2e0      	uxtb	r0, r4
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2102      	movs	r1, #2
 8000cce:	f000 f9ad 	bl	800102c <AUDIO_IO_Write>
}
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	bd10      	pop	{r4, pc}
	...

08000cd8 <cs43l22_Stop>:
{
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000cdc:	b2e4      	uxtb	r4, r4
 8000cde:	f7ff ff9e 	bl	8000c1e <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	210e      	movs	r1, #14
 8000ce8:	f000 f9a0 	bl	800102c <AUDIO_IO_Write>
 8000cec:	4620      	mov	r0, r4
 8000cee:	229f      	movs	r2, #159	; 0x9f
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	f000 f99b 	bl	800102c <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 8000cf6:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <cs43l22_Stop+0x28>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
}
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	bd10      	pop	{r4, pc}
 8000d00:	20000004 	.word	0x20000004

08000d04 <cs43l22_Play>:
{
 8000d04:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 8000d06:	4d0d      	ldr	r5, [pc, #52]	; (8000d3c <cs43l22_Play+0x38>)
 8000d08:	782b      	ldrb	r3, [r5, #0]
 8000d0a:	2b01      	cmp	r3, #1
{
 8000d0c:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 8000d0e:	d113      	bne.n	8000d38 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000d10:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d12:	2206      	movs	r2, #6
 8000d14:	210e      	movs	r1, #14
 8000d16:	4630      	mov	r0, r6
 8000d18:	f000 f988 	bl	800102c <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff ff90 	bl	8000c44 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d24:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d26:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	f000 f97e 	bl	800102c <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	702b      	strb	r3, [r5, #0]
}
 8000d34:	4620      	mov	r0, r4
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8000d38:	2400      	movs	r4, #0
  return counter;  
 8000d3a:	e7fb      	b.n	8000d34 <cs43l22_Play+0x30>
 8000d3c:	20000004 	.word	0x20000004

08000d40 <cs43l22_SetOutputMode>:
  switch (Output) 
 8000d40:	3901      	subs	r1, #1
{
 8000d42:	b510      	push	{r4, lr}
 8000d44:	b2c0      	uxtb	r0, r0
 8000d46:	4c10      	ldr	r4, [pc, #64]	; (8000d88 <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 8000d48:	2903      	cmp	r1, #3
 8000d4a:	d817      	bhi.n	8000d7c <cs43l22_SetOutputMode+0x3c>
 8000d4c:	e8df f001 	tbb	[pc, r1]
 8000d50:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d54:	22fa      	movs	r2, #250	; 0xfa
 8000d56:	2104      	movs	r1, #4
 8000d58:	f000 f968 	bl	800102c <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8000d5c:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 8000d5e:	7023      	strb	r3, [r4, #0]
}
 8000d60:	2000      	movs	r0, #0
 8000d62:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d64:	22af      	movs	r2, #175	; 0xaf
 8000d66:	2104      	movs	r1, #4
 8000d68:	f000 f960 	bl	800102c <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8000d6c:	23af      	movs	r3, #175	; 0xaf
 8000d6e:	e7f6      	b.n	8000d5e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d70:	22aa      	movs	r2, #170	; 0xaa
 8000d72:	2104      	movs	r1, #4
 8000d74:	f000 f95a 	bl	800102c <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8000d78:	23aa      	movs	r3, #170	; 0xaa
 8000d7a:	e7f0      	b.n	8000d5e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	2104      	movs	r1, #4
 8000d80:	f000 f954 	bl	800102c <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000d84:	2305      	movs	r3, #5
 8000d86:	e7ea      	b.n	8000d5e <cs43l22_SetOutputMode+0x1e>
 8000d88:	20000121 	.word	0x20000121

08000d8c <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8000d8c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000d8e:	4e29      	ldr	r6, [pc, #164]	; (8000e34 <I2Cx_Init+0xa8>)
{
 8000d90:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000d92:	4630      	mov	r0, r6
 8000d94:	f001 ff58 	bl	8002c48 <HAL_I2C_GetState>
 8000d98:	4605      	mov	r5, r0
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d147      	bne.n	8000e2e <I2Cx_Init+0xa2>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <I2Cx_Init+0xac>)
 8000da0:	6073      	str	r3, [r6, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
    I2cHandle.Init.OwnAddress1 = 0x33;
 8000da2:	2333      	movs	r3, #51	; 0x33
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000da4:	4c25      	ldr	r4, [pc, #148]	; (8000e3c <I2Cx_Init+0xb0>)
    I2cHandle.Init.OwnAddress1 = 0x33;
 8000da6:	60f3      	str	r3, [r6, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dac:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dae:	60b0      	str	r0, [r6, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	6133      	str	r3, [r6, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <I2Cx_Init+0xb4>)
 8000db4:	6033      	str	r3, [r6, #0]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6323      	str	r3, [r4, #48]	; 0x30
 8000dbe:	6b23      	ldr	r3, [r4, #48]	; 0x30

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000dc0:	9005      	str	r0, [sp, #20]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000dca:	481e      	ldr	r0, [pc, #120]	; (8000e44 <I2Cx_Init+0xb8>)
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8000dcc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dd0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000dda:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000de0:	f000 fdfa 	bl	80019d8 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000de4:	9502      	str	r5, [sp, #8]
 8000de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dec:	6423      	str	r3, [r4, #64]	; 0x40
 8000dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000df8:	6a23      	ldr	r3, [r4, #32]
 8000dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfe:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000e00:	6a23      	ldr	r3, [r4, #32]
 8000e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e06:	6223      	str	r3, [r4, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8000e08:	462a      	mov	r2, r5
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	201f      	movs	r0, #31
 8000e0e:	f000 fb83 	bl	8001518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000e12:	201f      	movs	r0, #31
 8000e14:	f000 fbb4 	bl	8001580 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8000e18:	462a      	mov	r2, r5
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	2020      	movs	r0, #32
 8000e1e:	f000 fb7b 	bl	8001518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8000e22:	2020      	movs	r0, #32
 8000e24:	f000 fbac 	bl	8001580 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8000e28:	4630      	mov	r0, r6
 8000e2a:	f001 fcdf 	bl	80027ec <HAL_I2C_Init>
}
 8000e2e:	b008      	add	sp, #32
 8000e30:	bd70      	pop	{r4, r5, r6, pc}
 8000e32:	bf00      	nop
 8000e34:	20000124 	.word	0x20000124
 8000e38:	000186a0 	.word	0x000186a0
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40005400 	.word	0x40005400
 8000e44:	40020400 	.word	0x40020400

08000e48 <BSP_LED_Init>:
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e4a:	4604      	mov	r4, r0
{
 8000e4c:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e4e:	bb08      	cbnz	r0, 8000e94 <BSP_LED_Init+0x4c>
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <BSP_LED_Init+0xa8>)
 8000e52:	9001      	str	r0, [sp, #4]
 8000e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e56:	f042 0208 	orr.w	r2, r2, #8
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e68:	4d23      	ldr	r5, [pc, #140]	; (8000ef8 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e6a:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e6e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e72:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e7a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e80:	f000 fdaa 	bl	80019d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e84:	2200      	movs	r2, #0
 8000e86:	4631      	mov	r1, r6
 8000e88:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000e8c:	f000 fe84 	bl	8001b98 <HAL_GPIO_WritePin>
}
 8000e90:	b00a      	add	sp, #40	; 0x28
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e94:	2801      	cmp	r0, #1
 8000e96:	d10c      	bne.n	8000eb2 <BSP_LED_Init+0x6a>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <BSP_LED_Init+0xa8>)
 8000e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea0:	f042 0208 	orr.w	r2, r2, #8
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	9302      	str	r3, [sp, #8]
 8000eae:	9b02      	ldr	r3, [sp, #8]
 8000eb0:	e7d9      	b.n	8000e66 <BSP_LED_Init+0x1e>
 8000eb2:	2802      	cmp	r0, #2
 8000eb4:	d10c      	bne.n	8000ed0 <BSP_LED_Init+0x88>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <BSP_LED_Init+0xa8>)
 8000ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ebe:	f042 0208 	orr.w	r2, r2, #8
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	9303      	str	r3, [sp, #12]
 8000ecc:	9b03      	ldr	r3, [sp, #12]
 8000ece:	e7ca      	b.n	8000e66 <BSP_LED_Init+0x1e>
 8000ed0:	2803      	cmp	r0, #3
 8000ed2:	d1c8      	bne.n	8000e66 <BSP_LED_Init+0x1e>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9304      	str	r3, [sp, #16]
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <BSP_LED_Init+0xa8>)
 8000eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000edc:	f042 0208 	orr.w	r2, r2, #8
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	9304      	str	r3, [sp, #16]
 8000eea:	9b04      	ldr	r3, [sp, #16]
 8000eec:	e7bb      	b.n	8000e66 <BSP_LED_Init+0x1e>
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	08007ca2 	.word	0x08007ca2
 8000ef8:	2000003c 	.word	0x2000003c

08000efc <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <BSP_LED_On+0x14>)
 8000efe:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <BSP_LED_On+0x18>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000f0a:	f000 be45 	b.w	8001b98 <HAL_GPIO_WritePin>
 8000f0e:	bf00      	nop
 8000f10:	08007ca2 	.word	0x08007ca2
 8000f14:	2000003c 	.word	0x2000003c

08000f18 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <BSP_LED_Off+0x14>)
 8000f1a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <BSP_LED_Off+0x18>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000f26:	f000 be37 	b.w	8001b98 <HAL_GPIO_WritePin>
 8000f2a:	bf00      	nop
 8000f2c:	08007ca2 	.word	0x08007ca2
 8000f30:	2000003c 	.word	0x2000003c

08000f34 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <BSP_LED_Toggle+0x10>)
 8000f36:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000f3a:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <BSP_LED_Toggle+0x14>)
 8000f3c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000f40:	f000 be2f 	b.w	8001ba2 <HAL_GPIO_TogglePin>
 8000f44:	08007ca2 	.word	0x08007ca2
 8000f48:	2000003c 	.word	0x2000003c

08000f4c <BSP_PB_Init>:
{
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000f50:	b950      	cbnz	r0, 8000f68 <BSP_PB_Init+0x1c>
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <BSP_PB_Init+0x6c>)
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f58:	f042 0201 	orr.w	r2, r2, #1
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	9b00      	ldr	r3, [sp, #0]
  if (Mode == BUTTON_MODE_GPIO)
 8000f68:	b969      	cbnz	r1, 8000f86 <BSP_PB_Init+0x3a>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f78:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000f7c:	a901      	add	r1, sp, #4
 8000f7e:	f000 fd2b 	bl	80019d8 <HAL_GPIO_Init>
}
 8000f82:	b006      	add	sp, #24
 8000f84:	bd10      	pop	{r4, pc}
  if (Mode == BUTTON_MODE_EXTI)
 8000f86:	2901      	cmp	r1, #1
 8000f88:	d1fb      	bne.n	8000f82 <BSP_PB_Init+0x36>
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <BSP_PB_Init+0x74>)
 8000f90:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000f94:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f96:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f9c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000fa0:	f000 fd1a 	bl	80019d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8000fa4:	4622      	mov	r2, r4
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	2006      	movs	r0, #6
 8000faa:	f000 fab5 	bl	8001518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000fae:	2006      	movs	r0, #6
 8000fb0:	f000 fae6 	bl	8001580 <HAL_NVIC_EnableIRQ>
}
 8000fb4:	e7e5      	b.n	8000f82 <BSP_PB_Init+0x36>
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	20000038 	.word	0x20000038
 8000fc0:	10110000 	.word	0x10110000

08000fc4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc6:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000fc8:	2600      	movs	r6, #0
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <AUDIO_IO_Init+0x5c>)
 8000fcc:	9600      	str	r6, [sp, #0]
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8000fd0:	4c14      	ldr	r4, [pc, #80]	; (8001024 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000fd2:	f042 0208 	orr.w	r2, r2, #8
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000fda:	9603      	str	r6, [sp, #12]
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8000fe2:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8000fe4:	a901      	add	r1, sp, #4
 8000fe6:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000fe8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8000fea:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000fec:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ff0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	9702      	str	r7, [sp, #8]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8000ff4:	f000 fcf0 	bl	80019d8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000ff8:	f7ff fec8 	bl	8000d8c <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000ffc:	4632      	mov	r2, r6
 8000ffe:	4629      	mov	r1, r5
 8001000:	4620      	mov	r0, r4
 8001002:	f000 fdc9 	bl	8001b98 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001006:	2005      	movs	r0, #5
 8001008:	f000 fa5e 	bl	80014c8 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 800100c:	463a      	mov	r2, r7
 800100e:	4629      	mov	r1, r5
 8001010:	4620      	mov	r0, r4
 8001012:	f000 fdc1 	bl	8001b98 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001016:	2005      	movs	r0, #5
 8001018:	f000 fa56 	bl	80014c8 <HAL_Delay>
}
 800101c:	b007      	add	sp, #28
 800101e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020c00 	.word	0x40020c00

08001028 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8001028:	4770      	bx	lr
	...

0800102c <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800102c:	b510      	push	{r4, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <AUDIO_IO_Write+0x30>)
 8001034:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	460a      	mov	r2, r1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	4601      	mov	r1, r0
 8001044:	9400      	str	r4, [sp, #0]
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <AUDIO_IO_Write+0x34>)
 8001048:	f001 fc58 	bl	80028fc <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800104c:	b120      	cbz	r0, 8001058 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <AUDIO_IO_Write+0x34>)
 8001050:	f001 fc3b 	bl	80028ca <HAL_I2C_DeInit>
  I2Cx_Init();
 8001054:	f7ff fe9a 	bl	8000d8c <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8001058:	b006      	add	sp, #24
 800105a:	bd10      	pop	{r4, pc}
 800105c:	2000004c 	.word	0x2000004c
 8001060:	20000124 	.word	0x20000124

08001064 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001066:	aa06      	add	r2, sp, #24
 8001068:	2300      	movs	r3, #0
 800106a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <AUDIO_IO_Read+0x38>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	e88d 000c 	stmia.w	sp, {r2, r3}
 800107a:	460a      	mov	r2, r1
 800107c:	4601      	mov	r1, r0
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <AUDIO_IO_Read+0x3c>)
 8001080:	f001 fcd2 	bl	8002a28 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001084:	b120      	cbz	r0, 8001090 <AUDIO_IO_Read+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <AUDIO_IO_Read+0x3c>)
 8001088:	f001 fc1f 	bl	80028ca <HAL_I2C_DeInit>
  I2Cx_Init();
 800108c:	f7ff fe7e 	bl	8000d8c <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 8001090:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001094:	b007      	add	sp, #28
 8001096:	f85d fb04 	ldr.w	pc, [sp], #4
 800109a:	bf00      	nop
 800109c:	2000004c 	.word	0x2000004c
 80010a0:	20000124 	.word	0x20000124

080010a4 <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <I2S3_Init+0x38>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80010a6:	69d1      	ldr	r1, [r2, #28]
 80010a8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
{
 80010ac:	b508      	push	{r3, lr}
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80010ae:	0409      	lsls	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <I2S3_Init+0x3c>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80010b2:	0c09      	lsrs	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 80010b4:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80010b6:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80010b8:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80010ba:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80010be:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80010c0:	4618      	mov	r0, r3
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80010c2:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80010c4:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80010c6:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80010c8:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 80010ca:	6059      	str	r1, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80010cc:	609a      	str	r2, [r3, #8]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80010ce:	f001 fefd 	bl	8002ecc <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 80010d2:	3000      	adds	r0, #0
 80010d4:	bf18      	it	ne
 80010d6:	2001      	movne	r0, #1
 80010d8:	bd08      	pop	{r3, pc}
 80010da:	bf00      	nop
 80010dc:	40003c00 	.word	0x40003c00
 80010e0:	200021c0 	.word	0x200021c0

080010e4 <BSP_AUDIO_OUT_Play>:
{
 80010e4:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <BSP_AUDIO_OUT_Play+0x34>)
 80010e8:	681b      	ldr	r3, [r3, #0]
{
 80010ea:	4605      	mov	r5, r0
 80010ec:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80010ee:	b28a      	uxth	r2, r1
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	4601      	mov	r1, r0
 80010f4:	2094      	movs	r0, #148	; 0x94
 80010f6:	4798      	blx	r3
 80010f8:	b960      	cbnz	r0, 8001114 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 80010fa:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 80010fe:	bf34      	ite	cc
 8001100:	0862      	lsrcc	r2, r4, #1
 8001102:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8001106:	b292      	uxth	r2, r2
 8001108:	4629      	mov	r1, r5
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <BSP_AUDIO_OUT_Play+0x38>)
 800110c:	f001 fda0 	bl	8002c50 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8001110:	2000      	movs	r0, #0
 8001112:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001114:	2001      	movs	r0, #1
}
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	200001d8 	.word	0x200001d8
 800111c:	200021c0 	.word	0x200021c0

08001120 <BSP_AUDIO_OUT_ChangeBuffer>:
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8001120:	460a      	mov	r2, r1
 8001122:	4601      	mov	r1, r0
 8001124:	4801      	ldr	r0, [pc, #4]	; (800112c <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8001126:	f001 bd93 	b.w	8002c50 <HAL_I2S_Transmit_DMA>
 800112a:	bf00      	nop
 800112c:	200021c0 	.word	0x200021c0

08001130 <BSP_AUDIO_OUT_Pause>:
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <BSP_AUDIO_OUT_Pause+0x20>)
 8001132:	681b      	ldr	r3, [r3, #0]
{    
 8001134:	b510      	push	{r4, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2094      	movs	r0, #148	; 0x94
 800113a:	4798      	blx	r3
 800113c:	4604      	mov	r4, r0
 800113e:	b920      	cbnz	r0, 800114a <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <BSP_AUDIO_OUT_Pause+0x24>)
 8001142:	f001 fdd7 	bl	8002cf4 <HAL_I2S_DMAPause>
    return AUDIO_OK;
 8001146:	4620      	mov	r0, r4
 8001148:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 800114a:	2001      	movs	r0, #1
}
 800114c:	bd10      	pop	{r4, pc}
 800114e:	bf00      	nop
 8001150:	200001d8 	.word	0x200001d8
 8001154:	200021c0 	.word	0x200021c0

08001158 <BSP_AUDIO_OUT_Resume>:
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <BSP_AUDIO_OUT_Resume+0x20>)
 800115a:	681b      	ldr	r3, [r3, #0]
{    
 800115c:	b510      	push	{r4, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	2094      	movs	r0, #148	; 0x94
 8001162:	4798      	blx	r3
 8001164:	4604      	mov	r4, r0
 8001166:	b920      	cbnz	r0, 8001172 <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <BSP_AUDIO_OUT_Resume+0x24>)
 800116a:	f001 fdfb 	bl	8002d64 <HAL_I2S_DMAResume>
    return AUDIO_OK;
 800116e:	4620      	mov	r0, r4
 8001170:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8001172:	2001      	movs	r0, #1
}
 8001174:	bd10      	pop	{r4, pc}
 8001176:	bf00      	nop
 8001178:	200001d8 	.word	0x200001d8
 800117c:	200021c0 	.word	0x200021c0

08001180 <BSP_AUDIO_OUT_Stop>:
{
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <BSP_AUDIO_OUT_Stop+0x38>)
 8001186:	f001 fe31 	bl	8002dec <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <BSP_AUDIO_OUT_Stop+0x3c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4629      	mov	r1, r5
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	2094      	movs	r0, #148	; 0x94
 8001194:	4798      	blx	r3
 8001196:	4604      	mov	r4, r0
 8001198:	b958      	cbnz	r0, 80011b2 <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 800119a:	2d01      	cmp	r5, #1
 800119c:	d107      	bne.n	80011ae <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 800119e:	4628      	mov	r0, r5
 80011a0:	f000 f992 	bl	80014c8 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80011a4:	4622      	mov	r2, r4
 80011a6:	2110      	movs	r1, #16
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <BSP_AUDIO_OUT_Stop+0x40>)
 80011aa:	f000 fcf5 	bl	8001b98 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 80011ae:	4620      	mov	r0, r4
}
 80011b0:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80011b2:	2001      	movs	r0, #1
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
 80011b6:	bf00      	nop
 80011b8:	200021c0 	.word	0x200021c0
 80011bc:	200001d8 	.word	0x200001d8
 80011c0:	40020c00 	.word	0x40020c00

080011c4 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80011c4:	b530      	push	{r4, r5, lr}
    if(I2SFreq[index] == AudioFreq)
 80011c6:	4d14      	ldr	r5, [pc, #80]	; (8001218 <BSP_AUDIO_OUT_ClockConfig+0x54>)
{ 
 80011c8:	b085      	sub	sp, #20
 80011ca:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 80011cc:	24ff      	movs	r4, #255	; 0xff
    if(I2SFreq[index] == AudioFreq)
 80011ce:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	4288      	cmp	r0, r1
 80011d8:	bf08      	it	eq
 80011da:	4614      	moveq	r4, r2
  for(index = 0; index < 8; index++)
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d1f6      	bne.n	80011ce <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80011e0:	4668      	mov	r0, sp
 80011e2:	f002 fc25 	bl	8003a30 <HAL_RCCEx_GetPeriphCLKConfig>
 80011e6:	2301      	movs	r3, #1
  if ((freqindex & 0x7) == 0)
 80011e8:	f014 0f07 	tst.w	r4, #7
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011ec:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80011ee:	bf01      	itttt	eq
 80011f0:	4b0a      	ldreq	r3, [pc, #40]	; (800121c <BSP_AUDIO_OUT_ClockConfig+0x58>)
 80011f2:	f853 3024 	ldreq.w	r3, [r3, r4, lsl #2]
 80011f6:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80011f8:	4b09      	ldreq	r3, [pc, #36]	; (8001220 <BSP_AUDIO_OUT_ClockConfig+0x5c>)
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80011fa:	bf16      	itet	ne
 80011fc:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001200:	f853 3024 	ldreq.w	r3, [r3, r4, lsl #2]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001204:	9301      	strne	r3, [sp, #4]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001206:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001208:	bf18      	it	ne
 800120a:	2303      	movne	r3, #3
 800120c:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800120e:	f002 fb6b 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
}
 8001212:	b005      	add	sp, #20
 8001214:	bd30      	pop	{r4, r5, pc}
 8001216:	bf00      	nop
 8001218:	08007cac 	.word	0x08007cac
 800121c:	08007ccc 	.word	0x08007ccc
 8001220:	08007cec 	.word	0x08007cec

08001224 <BSP_AUDIO_OUT_MspInit>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8001228:	4c3e      	ldr	r4, [pc, #248]	; (8001324 <BSP_AUDIO_OUT_MspInit+0x100>)
 800122a:	2500      	movs	r5, #0
 800122c:	9500      	str	r5, [sp, #0]
 800122e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001234:	6423      	str	r3, [r4, #64]	; 0x40
 8001236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8001240:	9501      	str	r5, [sp, #4]
 8001242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6323      	str	r3, [r4, #48]	; 0x30
 800124a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8001254:	9502      	str	r5, [sp, #8]
 8001256:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6323      	str	r3, [r4, #48]	; 0x30
 800125e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8001260:	9507      	str	r5, [sp, #28]
  I2S3_WS_CLK_ENABLE();
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800126a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800126e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
{
 8001272:	4606      	mov	r6, r0
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001274:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001276:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001278:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800127a:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <BSP_AUDIO_OUT_MspInit+0x104>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800127e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001280:	f000 fbaa 	bl	80019d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001284:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8001286:	a905      	add	r1, sp, #20
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800128a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800128c:	f000 fba4 	bl	80019d8 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8001290:	9503      	str	r5, [sp, #12]
 8001292:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <BSP_AUDIO_OUT_MspInit+0x104>)
  I2S3_MCK_CLK_ENABLE();
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6323      	str	r3, [r4, #48]	; 0x30
 800129c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	9303      	str	r3, [sp, #12]
 80012a4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80012a6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80012ac:	f000 fb94 	bl	80019d8 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 80012b0:	9504      	str	r5, [sp, #16]
 80012b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 80012b4:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 80012b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ba:	6323      	str	r3, [r4, #48]	; 0x30
 80012bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	9304      	str	r3, [sp, #16]
 80012c4:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <BSP_AUDIO_OUT_MspInit+0x10c>)
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d121      	bne.n	8001310 <BSP_AUDIO_OUT_MspInit+0xec>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80012cc:	4c19      	ldr	r4, [pc, #100]	; (8001334 <BSP_AUDIO_OUT_MspInit+0x110>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80012ce:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	60a3      	str	r3, [r4, #8]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80012d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d8:	6123      	str	r3, [r4, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80012da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012de:	6163      	str	r3, [r4, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80012e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e4:	61a3      	str	r3, [r4, #24]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	6223      	str	r3, [r4, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80012ec:	2304      	movs	r3, #4
 80012ee:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62a3      	str	r3, [r4, #40]	; 0x28
    HAL_DMA_DeInit(&hdma_i2sTx);
 80012f4:	4620      	mov	r0, r4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80012f8:	6065      	str	r5, [r4, #4]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80012fa:	60e5      	str	r5, [r4, #12]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80012fc:	61e5      	str	r5, [r4, #28]
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80012fe:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001300:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8001302:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001304:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 8001306:	f000 f9f1 	bl	80016ec <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 800130a:	4620      	mov	r0, r4
 800130c:	f000 f970 	bl	80015f0 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	210e      	movs	r1, #14
 8001314:	202f      	movs	r0, #47	; 0x2f
 8001316:	f000 f8ff 	bl	8001518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 800131a:	202f      	movs	r0, #47	; 0x2f
 800131c:	f000 f930 	bl	8001580 <HAL_NVIC_EnableIRQ>
}
 8001320:	b00a      	add	sp, #40	; 0x28
 8001322:	bd70      	pop	{r4, r5, r6, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800
 800132c:	40020000 	.word	0x40020000
 8001330:	40003c00 	.word	0x40003c00
 8001334:	20000178 	.word	0x20000178
 8001338:	400260b8 	.word	0x400260b8

0800133c <BSP_AUDIO_OUT_Init>:
{    
 800133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001340:	4c16      	ldr	r4, [pc, #88]	; (800139c <BSP_AUDIO_OUT_Init+0x60>)
{    
 8001342:	4615      	mov	r5, r2
 8001344:	4607      	mov	r7, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001346:	2200      	movs	r2, #0
 8001348:	4620      	mov	r0, r4
{    
 800134a:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800134c:	4629      	mov	r1, r5
 800134e:	f7ff ff39 	bl	80011c4 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <BSP_AUDIO_OUT_Init+0x64>)
 8001354:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8001356:	4620      	mov	r0, r4
 8001358:	f001 fee1 	bl	800311e <HAL_I2S_GetState>
 800135c:	4601      	mov	r1, r0
 800135e:	b910      	cbnz	r0, 8001366 <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff ff5f 	bl	8001224 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8001366:	4628      	mov	r0, r5
 8001368:	f7ff fe9c 	bl	80010a4 <I2S3_Init>
 800136c:	4604      	mov	r4, r0
 800136e:	b118      	cbz	r0, 8001378 <BSP_AUDIO_OUT_Init+0x3c>
{    
 8001370:	2401      	movs	r4, #1
}
 8001372:	4620      	mov	r0, r4
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8001378:	4e0a      	ldr	r6, [pc, #40]	; (80013a4 <BSP_AUDIO_OUT_Init+0x68>)
 800137a:	2094      	movs	r0, #148	; 0x94
 800137c:	68b3      	ldr	r3, [r6, #8]
 800137e:	4798      	blx	r3
 8001380:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8001384:	28e0      	cmp	r0, #224	; 0xe0
 8001386:	d1f3      	bne.n	8001370 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <BSP_AUDIO_OUT_Init+0x6c>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800138a:	4642      	mov	r2, r8
      pAudioDrv = &cs43l22_drv; 
 800138c:	601e      	str	r6, [r3, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800138e:	4639      	mov	r1, r7
 8001390:	6836      	ldr	r6, [r6, #0]
 8001392:	462b      	mov	r3, r5
 8001394:	2094      	movs	r0, #148	; 0x94
 8001396:	47b0      	blx	r6
  return ret;
 8001398:	e7eb      	b.n	8001372 <BSP_AUDIO_OUT_Init+0x36>
 800139a:	bf00      	nop
 800139c:	200021c0 	.word	0x200021c0
 80013a0:	40003c00 	.word	0x40003c00
 80013a4:	20000008 	.word	0x20000008
 80013a8:	200001d8 	.word	0x200001d8

080013ac <HAL_I2S_TxCpltCallback>:
{
 80013ac:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80013ae:	6802      	ldr	r2, [r0, #0]
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_I2S_TxCpltCallback+0x10>)
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d101      	bne.n	80013ba <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80013b6:	f7ff fb29 	bl	8000a0c <BSP_AUDIO_OUT_TransferComplete_CallBack>
 80013ba:	bd08      	pop	{r3, pc}
 80013bc:	40003c00 	.word	0x40003c00

080013c0 <HAL_I2S_TxHalfCpltCallback>:
{
 80013c0:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80013c2:	6802      	ldr	r2, [r0, #0]
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_I2S_TxHalfCpltCallback+0x10>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d101      	bne.n	80013ce <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80013ca:	f7ff fb19 	bl	8000a00 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
 80013ce:	bd08      	pop	{r3, pc}
 80013d0:	40003c00 	.word	0x40003c00

080013d4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
 80013d4:	4770      	bx	lr

080013d6 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013d6:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80013d8:	f7ff fffc 	bl	80013d4 <BSP_AUDIO_IN_TransferComplete_CallBack>
 80013dc:	bd08      	pop	{r3, pc}

080013de <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80013de:	4770      	bx	lr

080013e0 <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80013e0:	6802      	ldr	r2, [r0, #0]
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_I2S_ErrorCallback+0x20>)
 80013e4:	429a      	cmp	r2, r3
{
 80013e6:	b510      	push	{r4, lr}
 80013e8:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 80013ea:	d101      	bne.n	80013f0 <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80013ec:	f7ff fb1a 	bl	8000a24 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80013f0:	6822      	ldr	r2, [r4, #0]
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_I2S_ErrorCallback+0x24>)
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d101      	bne.n	80013fc <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 80013f8:	f7ff fff1 	bl	80013de <BSP_AUDIO_IN_Error_Callback>
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	bf00      	nop
 8001400:	40003c00 	.word	0x40003c00
 8001404:	40003800 	.word	0x40003800

08001408 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	490f      	ldr	r1, [pc, #60]	; (8001448 <SystemInit+0x40>)
 800140a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800140e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <SystemInit+0x44>)
 8001418:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800141a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001422:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800142a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800142e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <SystemInit+0x48>)
 8001432:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800143a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800143c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800143e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	40023800 	.word	0x40023800
 8001450:	24003010 	.word	0x24003010

08001454 <HAL_MspInit>:
 8001454:	4770      	bx	lr
	...

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_InitTick+0x24>)
{
 800145c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001464:	fbb0 f0f3 	udiv	r0, r0, r3
 8001468:	f000 f896 	bl	8001598 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	4621      	mov	r1, r4
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f850 	bl	8001518 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001478:	2000      	movs	r0, #0
 800147a:	bd10      	pop	{r4, pc}
 800147c:	20000050 	.word	0x20000050

08001480 <HAL_Init>:
{
 8001480:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_Init+0x28>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800148a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001492:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 f82d 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	200f      	movs	r0, #15
 800149c:	f7ff ffdc 	bl	8001458 <HAL_InitTick>
  HAL_MspInit();
 80014a0:	f7ff ffd8 	bl	8001454 <HAL_MspInit>
}
 80014a4:	2000      	movs	r0, #0
 80014a6:	bd08      	pop	{r3, pc}
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80014ac:	4a02      	ldr	r2, [pc, #8]	; (80014b8 <HAL_IncTick+0xc>)
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20002250 	.word	0x20002250

080014bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014bc:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <HAL_GetTick+0x8>)
 80014be:	6818      	ldr	r0, [r3, #0]
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20002250 	.word	0x20002250

080014c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80014c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014ca:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fff6 	bl	80014bc <HAL_GetTick>
  uint32_t wait = Delay;
 80014d0:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80014d4:	4605      	mov	r5, r0
  {
     wait++;
 80014d6:	bf18      	it	ne
 80014d8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014da:	f7ff ffef 	bl	80014bc <HAL_GetTick>
 80014de:	1b40      	subs	r0, r0, r5
 80014e0:	42a0      	cmp	r0, r4
 80014e2:	d3fa      	bcc.n	80014da <HAL_Delay+0x12>
  {
  }
}
 80014e4:	b003      	add	sp, #12
 80014e6:	bd30      	pop	{r4, r5, pc}

080014e8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80014e8:	4b01      	ldr	r3, [pc, #4]	; (80014f0 <HAL_GetREVID+0x8>)
 80014ea:	6818      	ldr	r0, [r3, #0]
}
 80014ec:	0c00      	lsrs	r0, r0, #16
 80014ee:	4770      	bx	lr
 80014f0:	e0042000 	.word	0xe0042000

080014f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001504:	0200      	lsls	r0, r0, #8
 8001506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800150e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001510:	60d3      	str	r3, [r2, #12]
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b530      	push	{r4, r5, lr}
 800151c:	68dc      	ldr	r4, [r3, #12]
 800151e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001522:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	2b04      	cmp	r3, #4
 800152a:	bf28      	it	cs
 800152c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 0501 	mov.w	r5, #1
 8001534:	fa05 f303 	lsl.w	r3, r5, r3
 8001538:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153c:	bf8c      	ite	hi
 800153e:	3c03      	subhi	r4, #3
 8001540:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001542:	4019      	ands	r1, r3
 8001544:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001546:	fa05 f404 	lsl.w	r4, r5, r4
 800154a:	3c01      	subs	r4, #1
 800154c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800154e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	ea42 0201 	orr.w	r2, r2, r1
 8001554:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	bfaf      	iteee	ge
 800155a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	f000 000f 	andlt.w	r0, r0, #15
 8001562:	4b06      	ldrlt	r3, [pc, #24]	; (800157c <HAL_NVIC_SetPriority+0x64>)
 8001564:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	bfa5      	ittet	ge
 8001568:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800156c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001574:	bd30      	pop	{r4, r5, pc}
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	e000ed14 	.word	0xe000ed14

08001580 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001580:	0942      	lsrs	r2, r0, #5
 8001582:	2301      	movs	r3, #1
 8001584:	f000 001f 	and.w	r0, r0, #31
 8001588:	fa03 f000 	lsl.w	r0, r3, r0
 800158c:	4b01      	ldr	r3, [pc, #4]	; (8001594 <HAL_NVIC_EnableIRQ+0x14>)
 800158e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100

08001598 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	3801      	subs	r0, #1
 800159a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800159e:	d20a      	bcs.n	80015b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	21f0      	movs	r1, #240	; 0xf0
 80015a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015c4:	6803      	ldr	r3, [r0, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015cc:	f023 0303 	bic.w	r3, r3, #3
 80015d0:	2118      	movs	r1, #24
 80015d2:	3a10      	subs	r2, #16
 80015d4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015d8:	4904      	ldr	r1, [pc, #16]	; (80015ec <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80015da:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015dc:	bf88      	it	hi
 80015de:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015e0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015e2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015e4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80015e6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	08007d24 	.word	0x08007d24

080015f0 <HAL_DMA_Init>:
{
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ff62 	bl	80014bc <HAL_GetTick>
 80015f8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80015fa:	2c00      	cmp	r4, #0
 80015fc:	d071      	beq.n	80016e2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80015fe:	2300      	movs	r3, #0
 8001600:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001604:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001606:	2302      	movs	r3, #2
 8001608:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001614:	6821      	ldr	r1, [r4, #0]
 8001616:	680b      	ldr	r3, [r1, #0]
 8001618:	07d8      	lsls	r0, r3, #31
 800161a:	d43c      	bmi.n	8001696 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800161c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800161e:	4d32      	ldr	r5, [pc, #200]	; (80016e8 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001620:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001622:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001624:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001626:	68a3      	ldr	r3, [r4, #8]
 8001628:	4313      	orrs	r3, r2
 800162a:	68e2      	ldr	r2, [r4, #12]
 800162c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162e:	6922      	ldr	r2, [r4, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	6962      	ldr	r2, [r4, #20]
 8001634:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001636:	69e2      	ldr	r2, [r4, #28]
 8001638:	4303      	orrs	r3, r0
 800163a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800163c:	6a22      	ldr	r2, [r4, #32]
 800163e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001640:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001642:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001644:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001648:	bf01      	itttt	eq
 800164a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800164c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800164e:	4335      	orreq	r5, r6
 8001650:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001652:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001654:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001656:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001658:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800165c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001660:	d10b      	bne.n	800167a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001662:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001664:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001666:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001668:	b13d      	cbz	r5, 800167a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800166a:	b9f8      	cbnz	r0, 80016ac <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800166c:	2a01      	cmp	r2, #1
 800166e:	d02d      	beq.n	80016cc <HAL_DMA_Init+0xdc>
 8001670:	d301      	bcc.n	8001676 <HAL_DMA_Init+0x86>
 8001672:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001674:	d101      	bne.n	800167a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001676:	01ea      	lsls	r2, r5, #7
 8001678:	d42b      	bmi.n	80016d2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800167a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff ffa1 	bl	80015c4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001682:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001684:	233f      	movs	r3, #63	; 0x3f
 8001686:	4093      	lsls	r3, r2
 8001688:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800168c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001690:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001694:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001696:	f7ff ff11 	bl	80014bc <HAL_GetTick>
 800169a:	1b40      	subs	r0, r0, r5
 800169c:	2805      	cmp	r0, #5
 800169e:	d9b9      	bls.n	8001614 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016a0:	2320      	movs	r3, #32
 80016a2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a4:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80016a6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016ac:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80016b0:	d113      	bne.n	80016da <HAL_DMA_Init+0xea>
    switch (tmp)
 80016b2:	2a03      	cmp	r2, #3
 80016b4:	d8e1      	bhi.n	800167a <HAL_DMA_Init+0x8a>
 80016b6:	a001      	add	r0, pc, #4	; (adr r0, 80016bc <HAL_DMA_Init+0xcc>)
 80016b8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80016bc:	080016d3 	.word	0x080016d3
 80016c0:	08001677 	.word	0x08001677
 80016c4:	080016d3 	.word	0x080016d3
 80016c8:	080016cd 	.word	0x080016cd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016cc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80016d0:	d1d3      	bne.n	800167a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d2:	2340      	movs	r3, #64	; 0x40
 80016d4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80016d6:	2001      	movs	r0, #1
 80016d8:	e7e5      	b.n	80016a6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80016da:	2a02      	cmp	r2, #2
 80016dc:	d9f9      	bls.n	80016d2 <HAL_DMA_Init+0xe2>
 80016de:	2a03      	cmp	r2, #3
 80016e0:	e7c8      	b.n	8001674 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
 80016e6:	bf00      	nop
 80016e8:	f010803f 	.word	0xf010803f

080016ec <HAL_DMA_DeInit>:
{
 80016ec:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80016ee:	4605      	mov	r5, r0
 80016f0:	b1f0      	cbz	r0, 8001730 <HAL_DMA_DeInit+0x44>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80016f2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80016f6:	b2e4      	uxtb	r4, r4
 80016f8:	2c02      	cmp	r4, #2
 80016fa:	d017      	beq.n	800172c <HAL_DMA_DeInit+0x40>
  __HAL_DMA_DISABLE(hdma);
 80016fc:	6803      	ldr	r3, [r0, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8001706:	2400      	movs	r4, #0
  hdma->Instance->FCR  = 0x00000021U;
 8001708:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800170a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800170c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800170e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001710:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001712:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001714:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001716:	f7ff ff55 	bl	80015c4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800171c:	233f      	movs	r3, #63	; 0x3f
 800171e:	4093      	lsls	r3, r2
 8001720:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001722:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001724:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001728:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 800172c:	4620      	mov	r0, r4
}
 800172e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001730:	2001      	movs	r0, #1
 8001732:	bd38      	pop	{r3, r4, r5, pc}

08001734 <HAL_DMA_Start_IT>:
{
 8001734:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001736:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800173a:	2c01      	cmp	r4, #1
 800173c:	d036      	beq.n	80017ac <HAL_DMA_Start_IT+0x78>
 800173e:	2401      	movs	r4, #1
 8001740:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001744:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001748:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800174a:	2c01      	cmp	r4, #1
 800174c:	f04f 0500 	mov.w	r5, #0
 8001750:	f04f 0402 	mov.w	r4, #2
 8001754:	d128      	bne.n	80017a8 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001756:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800175a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800175e:	6825      	ldr	r5, [r4, #0]
 8001760:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001764:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001766:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001768:	6883      	ldr	r3, [r0, #8]
 800176a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800176c:	bf0e      	itee	eq
 800176e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001770:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001772:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001774:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001776:	bf08      	it	eq
 8001778:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177a:	233f      	movs	r3, #63	; 0x3f
 800177c:	4093      	lsls	r3, r2
 800177e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	f043 0316 	orr.w	r3, r3, #22
 8001786:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001788:	6963      	ldr	r3, [r4, #20]
 800178a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001790:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001792:	b11b      	cbz	r3, 800179c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2000      	movs	r0, #0
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80017a8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80017ac:	2002      	movs	r0, #2
}
 80017ae:	bd70      	pop	{r4, r5, r6, pc}

080017b0 <HAL_DMA_Abort>:
{
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80017b6:	f7ff fe81 	bl	80014bc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017be:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80017c0:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c2:	d006      	beq.n	80017d2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80017c8:	2300      	movs	r3, #0
 80017ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80017ce:	2001      	movs	r0, #1
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f022 0216 	bic.w	r2, r2, #22
 80017da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e2:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017e6:	b90a      	cbnz	r2, 80017ec <HAL_DMA_Abort+0x3c>
 80017e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80017ea:	b11a      	cbz	r2, 80017f4 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	f022 0208 	bic.w	r2, r2, #8
 80017f2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f010 0001 	ands.w	r0, r0, #1
 8001804:	d109      	bne.n	800181a <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001806:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001808:	233f      	movs	r3, #63	; 0x3f
 800180a:	4093      	lsls	r3, r2
 800180c:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800180e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001810:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001814:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001818:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800181a:	f7ff fe4f 	bl	80014bc <HAL_GetTick>
 800181e:	1b80      	subs	r0, r0, r6
 8001820:	2805      	cmp	r0, #5
 8001822:	d9eb      	bls.n	80017fc <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001824:	2320      	movs	r3, #32
 8001826:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001828:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 800182a:	2300      	movs	r3, #0
 800182c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001830:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001834:	bd70      	pop	{r4, r5, r6, pc}

08001836 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001836:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800183a:	2b02      	cmp	r3, #2
 800183c:	d003      	beq.n	8001846 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001842:	2001      	movs	r0, #1
 8001844:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001846:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001848:	2305      	movs	r3, #5
 800184a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001856:	2000      	movs	r0, #0
}
 8001858:	4770      	bx	lr
	...

0800185c <HAL_DMA_IRQHandler>:
{
 800185c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001862:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001864:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001866:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001868:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800186a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800186c:	2208      	movs	r2, #8
 800186e:	409a      	lsls	r2, r3
 8001870:	4216      	tst	r6, r2
{
 8001872:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001874:	d00c      	beq.n	8001890 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001876:	6801      	ldr	r1, [r0, #0]
 8001878:	6808      	ldr	r0, [r1, #0]
 800187a:	0740      	lsls	r0, r0, #29
 800187c:	d508      	bpl.n	8001890 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800187e:	6808      	ldr	r0, [r1, #0]
 8001880:	f020 0004 	bic.w	r0, r0, #4
 8001884:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001886:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001888:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_DMA_IRQHandler+0x174>)
 8001892:	409a      	lsls	r2, r3
 8001894:	4216      	tst	r6, r2
 8001896:	d008      	beq.n	80018aa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001898:	6821      	ldr	r1, [r4, #0]
 800189a:	6949      	ldr	r1, [r1, #20]
 800189c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800189e:	bf41      	itttt	mi
 80018a0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018a2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80018a4:	f042 0202 	orrmi.w	r2, r2, #2
 80018a8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018aa:	4a4a      	ldr	r2, [pc, #296]	; (80019d4 <HAL_DMA_IRQHandler+0x178>)
 80018ac:	409a      	lsls	r2, r3
 80018ae:	4216      	tst	r6, r2
 80018b0:	d008      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018b2:	6821      	ldr	r1, [r4, #0]
 80018b4:	6809      	ldr	r1, [r1, #0]
 80018b6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b8:	bf41      	itttt	mi
 80018ba:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018bc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80018be:	f042 0204 	orrmi.w	r2, r2, #4
 80018c2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018c4:	2210      	movs	r2, #16
 80018c6:	409a      	lsls	r2, r3
 80018c8:	4216      	tst	r6, r2
 80018ca:	d010      	beq.n	80018ee <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	0709      	lsls	r1, r1, #28
 80018d2:	d50c      	bpl.n	80018ee <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018d4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	0350      	lsls	r0, r2, #13
 80018da:	d535      	bpl.n	8001948 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0319      	lsls	r1, r3, #12
 80018e0:	d401      	bmi.n	80018e6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80018e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018e4:	e000      	b.n	80018e8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80018e8:	b10b      	cbz	r3, 80018ee <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80018ea:	4620      	mov	r0, r4
 80018ec:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80018f0:	2220      	movs	r2, #32
 80018f2:	408a      	lsls	r2, r1
 80018f4:	4216      	tst	r6, r2
 80018f6:	d038      	beq.n	800196a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	06c6      	lsls	r6, r0, #27
 80018fe:	d534      	bpl.n	800196a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001900:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001902:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001906:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001908:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800190a:	d125      	bne.n	8001958 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190c:	f022 0216 	bic.w	r2, r2, #22
 8001910:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001918:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800191a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800191c:	b90a      	cbnz	r2, 8001922 <HAL_DMA_IRQHandler+0xc6>
 800191e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001920:	b11a      	cbz	r2, 800192a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f022 0208 	bic.w	r2, r2, #8
 8001928:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	408b      	lsls	r3, r1
 800192e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001930:	2300      	movs	r3, #0
 8001932:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001936:	2301      	movs	r3, #1
 8001938:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800193c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800193e:	b10b      	cbz	r3, 8001944 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001940:	4620      	mov	r0, r4
 8001942:	4798      	blx	r3
}
 8001944:	b003      	add	sp, #12
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194c:	bf5e      	ittt	pl
 800194e:	681a      	ldrpl	r2, [r3, #0]
 8001950:	f022 0208 	bicpl.w	r2, r2, #8
 8001954:	601a      	strpl	r2, [r3, #0]
 8001956:	e7c4      	b.n	80018e2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001958:	0350      	lsls	r0, r2, #13
 800195a:	d528      	bpl.n	80019ae <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0319      	lsls	r1, r3, #12
 8001960:	d432      	bmi.n	80019c8 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001962:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001964:	b10b      	cbz	r3, 800196a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001966:	4620      	mov	r0, r4
 8001968:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800196a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0e9      	beq.n	8001944 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001970:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001972:	07da      	lsls	r2, r3, #31
 8001974:	d519      	bpl.n	80019aa <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001976:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001978:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800197a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800197e:	6813      	ldr	r3, [r2, #0]
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001986:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800198a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	3301      	adds	r3, #1
 8001992:	429f      	cmp	r7, r3
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	d302      	bcc.n	800199e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001998:	6813      	ldr	r3, [r2, #0]
 800199a:	07db      	lsls	r3, r3, #31
 800199c:	d4f7      	bmi.n	800198e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800199e:	2300      	movs	r3, #0
 80019a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80019aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80019ac:	e7c7      	b.n	800193e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80019b4:	d108      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	f021 0110 	bic.w	r1, r1, #16
 80019bc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80019be:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80019c0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80019c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80019c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019ca:	e7cb      	b.n	8001964 <HAL_DMA_IRQHandler+0x108>
 80019cc:	20000050 	.word	0x20000050
 80019d0:	00800001 	.word	0x00800001
 80019d4:	00800004 	.word	0x00800004

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019dc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001b90 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4a68      	ldr	r2, [pc, #416]	; (8001b88 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001b94 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ec:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80019ee:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80019f4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80019fc:	45b6      	cmp	lr, r6
 80019fe:	f040 80ae 	bne.w	8001b5e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a02:	684c      	ldr	r4, [r1, #4]
 8001a04:	f024 0710 	bic.w	r7, r4, #16
 8001a08:	2f02      	cmp	r7, #2
 8001a0a:	d116      	bne.n	8001a3a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001a10:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a14:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001a18:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001a20:	f04f 0c0f 	mov.w	ip, #15
 8001a24:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001a28:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	690d      	ldr	r5, [r1, #16]
 8001a2e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001a32:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001a36:	f8ca 5020 	str.w	r5, [sl, #32]
 8001a3a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001a40:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a44:	fa05 f50a 	lsl.w	r5, r5, sl
 8001a48:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a4a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a52:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a56:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a58:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001a5e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a62:	d811      	bhi.n	8001a88 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001a64:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a66:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	68cf      	ldr	r7, [r1, #12]
 8001a6c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001a70:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001a74:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a76:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a7c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001a80:	409f      	lsls	r7, r3
 8001a82:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001a86:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a88:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	688f      	ldr	r7, [r1, #8]
 8001a8e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001a92:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001a94:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a96:	00e5      	lsls	r5, r4, #3
 8001a98:	d561      	bpl.n	8001b5e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	f04f 0b00 	mov.w	fp, #0
 8001a9e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001aa2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa6:	4d39      	ldr	r5, [pc, #228]	; (8001b8c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001aac:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001ab0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001ab4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001ab8:	9703      	str	r7, [sp, #12]
 8001aba:	9f03      	ldr	r7, [sp, #12]
 8001abc:	f023 0703 	bic.w	r7, r3, #3
 8001ac0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ac4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001acc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001ad4:	f04f 0e0f 	mov.w	lr, #15
 8001ad8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001adc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ade:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ae2:	d043      	beq.n	8001b6c <HAL_GPIO_Init+0x194>
 8001ae4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ae8:	42a8      	cmp	r0, r5
 8001aea:	d041      	beq.n	8001b70 <HAL_GPIO_Init+0x198>
 8001aec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af0:	42a8      	cmp	r0, r5
 8001af2:	d03f      	beq.n	8001b74 <HAL_GPIO_Init+0x19c>
 8001af4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af8:	42a8      	cmp	r0, r5
 8001afa:	d03d      	beq.n	8001b78 <HAL_GPIO_Init+0x1a0>
 8001afc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b00:	42a8      	cmp	r0, r5
 8001b02:	d03b      	beq.n	8001b7c <HAL_GPIO_Init+0x1a4>
 8001b04:	4548      	cmp	r0, r9
 8001b06:	d03b      	beq.n	8001b80 <HAL_GPIO_Init+0x1a8>
 8001b08:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b0c:	42a8      	cmp	r0, r5
 8001b0e:	d039      	beq.n	8001b84 <HAL_GPIO_Init+0x1ac>
 8001b10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b14:	42a8      	cmp	r0, r5
 8001b16:	bf14      	ite	ne
 8001b18:	2508      	movne	r5, #8
 8001b1a:	2507      	moveq	r5, #7
 8001b1c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001b20:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b24:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001b26:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	bf0c      	ite	eq
 8001b30:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b32:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001b34:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001b36:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b38:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	bf0c      	ite	eq
 8001b3e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b40:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001b42:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b44:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b46:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	bf0c      	ite	eq
 8001b4c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b4e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001b50:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001b52:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b54:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b56:	bf54      	ite	pl
 8001b58:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001b5a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001b5c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	3301      	adds	r3, #1
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	f47f af44 	bne.w	80019ee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001b66:	b005      	add	sp, #20
 8001b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6c:	465d      	mov	r5, fp
 8001b6e:	e7d5      	b.n	8001b1c <HAL_GPIO_Init+0x144>
 8001b70:	2501      	movs	r5, #1
 8001b72:	e7d3      	b.n	8001b1c <HAL_GPIO_Init+0x144>
 8001b74:	2502      	movs	r5, #2
 8001b76:	e7d1      	b.n	8001b1c <HAL_GPIO_Init+0x144>
 8001b78:	2503      	movs	r5, #3
 8001b7a:	e7cf      	b.n	8001b1c <HAL_GPIO_Init+0x144>
 8001b7c:	2504      	movs	r5, #4
 8001b7e:	e7cd      	b.n	8001b1c <HAL_GPIO_Init+0x144>
 8001b80:	2505      	movs	r5, #5
 8001b82:	e7cb      	b.n	8001b1c <HAL_GPIO_Init+0x144>
 8001b84:	2506      	movs	r5, #6
 8001b86:	e7c9      	b.n	8001b1c <HAL_GPIO_Init+0x144>
 8001b88:	40013c00 	.word	0x40013c00
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021400 	.word	0x40021400

08001b98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b98:	b10a      	cbz	r2, 8001b9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9a:	6181      	str	r1, [r0, #24]
 8001b9c:	4770      	bx	lr
 8001b9e:	0409      	lsls	r1, r1, #16
 8001ba0:	e7fb      	b.n	8001b9a <HAL_GPIO_WritePin+0x2>

08001ba2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001ba2:	6943      	ldr	r3, [r0, #20]
 8001ba4:	4059      	eors	r1, r3
 8001ba6:	6141      	str	r1, [r0, #20]
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001bb0:	6959      	ldr	r1, [r3, #20]
 8001bb2:	4201      	tst	r1, r0
 8001bb4:	d002      	beq.n	8001bbc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb8:	f7fe fc98 	bl	80004ec <HAL_GPIO_EXTI_Callback>
 8001bbc:	bd08      	pop	{r3, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40013c00 	.word	0x40013c00

08001bc4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001bc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001bc8:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 8001bca:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8001bce:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8001bd2:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8001bd6:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 8001bda:	2801      	cmp	r0, #1
 8001bdc:	d021      	beq.n	8001c22 <HAL_HCD_HC_Init+0x5e>
 8001bde:	2001      	movs	r0, #1
 8001be0:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001be4:	2028      	movs	r0, #40	; 0x28
 8001be6:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8001bea:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8001bee:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bf0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bf4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bf8:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8001bfc:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8001c00:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8001c04:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001c08:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 8001c0c:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 8001c10:	6820      	ldr	r0, [r4, #0]
 8001c12:	f002 fca3 	bl	800455c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8001c16:	2300      	movs	r3, #0
 8001c18:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 8001c1c:	b004      	add	sp, #16
 8001c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 8001c22:	2002      	movs	r0, #2
 8001c24:	e7fa      	b.n	8001c1c <HAL_HCD_HC_Init+0x58>

08001c26 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 8001c26:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001c2a:	2b01      	cmp	r3, #1
{
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 8001c30:	d009      	beq.n	8001c46 <HAL_HCD_HC_Halt+0x20>
 8001c32:	2301      	movs	r3, #1
 8001c34:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8001c38:	6800      	ldr	r0, [r0, #0]
 8001c3a:	f002 fe48 	bl	80048ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 8001c44:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 8001c46:	2002      	movs	r0, #2
}
 8001c48:	bd10      	pop	{r4, pc}

08001c4a <HAL_HCD_Init>:
{ 
 8001c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 8001c4e:	4607      	mov	r7, r0
{ 
 8001c50:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 8001c52:	b3a0      	cbz	r0, 8001cbe <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c54:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 8001c56:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c58:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 8001c5c:	f7fe fcf8 	bl	8000650 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 8001c60:	f854 0b10 	ldr.w	r0, [r4], #16
 8001c64:	f002 fb24 	bl	80042b0 <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6a:	466d      	mov	r5, sp
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c7a:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8001c7e:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c80:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001c84:	6838      	ldr	r0, [r7, #0]
 8001c86:	f002 fad3 	bl	8004230 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8001c8a:	f856 0b10 	ldr.w	r0, [r6], #16
 8001c8e:	2101      	movs	r1, #1
 8001c90:	f002 fb14 	bl	80042bc <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c96:	466d      	mov	r5, sp
 8001c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ca2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ca6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001caa:	6838      	ldr	r0, [r7, #0]
 8001cac:	f002 fb82 	bl	80043b4 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8001cb6:	2000      	movs	r0, #0
}
 8001cb8:	b00a      	add	sp, #40	; 0x28
 8001cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	e7fa      	b.n	8001cb8 <HAL_HCD_Init+0x6e>
	...

08001cc4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8001cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cc6:	2628      	movs	r6, #40	; 0x28
 8001cc8:	fb06 0601 	mla	r6, r6, r1, r0
{
 8001ccc:	f89d e014 	ldrb.w	lr, [sp, #20]
 8001cd0:	9d06      	ldr	r5, [sp, #24]
 8001cd2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8001cd6:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cda:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8001cde:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 8001ce2:	f1be 0f00 	cmp.w	lr, #0
 8001ce6:	d10e      	bne.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ce8:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8001cec:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001cee:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 8001cf2:	d04a      	beq.n	8001d8a <HAL_HCD_HC_SubmitRequest+0xc6>
 8001cf4:	4573      	cmp	r3, lr
 8001cf6:	d055      	beq.n	8001da4 <HAL_HCD_HC_SubmitRequest+0xe0>
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d12f      	bne.n	8001d5c <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cfc:	2328      	movs	r3, #40	; 0x28
 8001cfe:	fb03 0301 	mla	r3, r3, r1, r0
 8001d02:	2200      	movs	r2, #0
 8001d04:	e055      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d06:	f04f 0c02 	mov.w	ip, #2
 8001d0a:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d824      	bhi.n	8001d5c <HAL_HCD_HC_SubmitRequest+0x98>
 8001d12:	a601      	add	r6, pc, #4	; (adr r6, 8001d18 <HAL_HCD_HC_SubmitRequest+0x54>)
 8001d14:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001cfd 	.word	0x08001cfd
 8001d20:	08001d8b 	.word	0x08001d8b
 8001d24:	08001da5 	.word	0x08001da5
    if((token == 1) && (direction == 0)) /*send data */
 8001d28:	f1be 0f01 	cmp.w	lr, #1
 8001d2c:	d116      	bne.n	8001d5c <HAL_HCD_HC_SubmitRequest+0x98>
 8001d2e:	b9aa      	cbnz	r2, 8001d5c <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 8001d30:	b924      	cbnz	r4, 8001d3c <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 8001d32:	2328      	movs	r3, #40	; 0x28
 8001d34:	fb03 0301 	mla	r3, r3, r1, r0
 8001d38:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 8001d3c:	2328      	movs	r3, #40	; 0x28
 8001d3e:	fb03 0201 	mla	r2, r3, r1, r0
 8001d42:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 8001d46:	b9f6      	cbnz	r6, 8001d86 <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d48:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001d4c:	fb03 0301 	mla	r3, r3, r1, r0
 8001d50:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001d54:	2a02      	cmp	r2, #2
 8001d56:	d001      	beq.n	8001d5c <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8001d58:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d5c:	2628      	movs	r6, #40	; 0x28
 8001d5e:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8001d62:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d64:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001d68:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d6a:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001d6c:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8001d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 8001d72:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001d78:	3138      	adds	r1, #56	; 0x38
 8001d7a:	7c02      	ldrb	r2, [r0, #16]
 8001d7c:	6800      	ldr	r0, [r0, #0]
}
 8001d7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001d82:	f002 bc57 	b.w	8004634 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d86:	2602      	movs	r6, #2
 8001d88:	e7de      	b.n	8001d48 <HAL_HCD_HC_SubmitRequest+0x84>
 8001d8a:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001d8c:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8001d90:	b992      	cbnz	r2, 8001db8 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001d92:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8001d96:	b91e      	cbnz	r6, 8001da0 <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001d9c:	2328      	movs	r3, #40	; 0x28
 8001d9e:	e7d5      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001da0:	2202      	movs	r2, #2
 8001da2:	e7f9      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0xd4>
 8001da4:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001da6:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8001daa:	b92a      	cbnz	r2, 8001db8 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001dac:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8001db0:	b936      	cbnz	r6, 8001dc0 <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8001db6:	e7d1      	b.n	8001d5c <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001db8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	d0f8      	beq.n	8001db2 <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	e7f6      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0xee>

08001dc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dc8:	6806      	ldr	r6, [r0, #0]
{
 8001dca:	b087      	sub	sp, #28
 8001dcc:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dce:	4630      	mov	r0, r6
 8001dd0:	f002 fad4 	bl	800437c <USB_GetMode>
 8001dd4:	2801      	cmp	r0, #1
 8001dd6:	f040 80ec 	bne.w	8001fb2 <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	f002 faca 	bl	8004374 <USB_ReadInterrupts>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	f000 80e6 	beq.w	8001fb2 <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de6:	6820      	ldr	r0, [r4, #0]
 8001de8:	f002 fac4 	bl	8004374 <USB_ReadInterrupts>
 8001dec:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dee:	bf48      	it	mi
 8001df0:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001df4:	bf44      	itt	mi
 8001df6:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001dfa:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dfc:	f002 faba 	bl	8004374 <USB_ReadInterrupts>
 8001e00:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e02:	bf48      	it	mi
 8001e04:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e06:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e08:	bf44      	itt	mi
 8001e0a:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001e0e:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e10:	f002 fab0 	bl	8004374 <USB_ReadInterrupts>
 8001e14:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e16:	bf48      	it	mi
 8001e18:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e1a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e1c:	bf44      	itt	mi
 8001e1e:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8001e22:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e24:	f002 faa6 	bl	8004374 <USB_ReadInterrupts>
 8001e28:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e2a:	bf48      	it	mi
 8001e2c:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e2e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e30:	bf44      	itt	mi
 8001e32:	2202      	movmi	r2, #2
 8001e34:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e36:	f002 fa9d 	bl	8004374 <USB_ReadInterrupts>
 8001e3a:	0085      	lsls	r5, r0, #2
 8001e3c:	d510      	bpl.n	8001e60 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001e3e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001e42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e46:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe fc6e 	bl	800072c <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001e50:	2101      	movs	r1, #1
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	f002 fb20 	bl	8004498 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e5e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	f002 fa87 	bl	8004374 <USB_ReadInterrupts>
 8001e66:	01c0      	lsls	r0, r0, #7
 8001e68:	d540      	bpl.n	8001eec <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd: HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8001e6a:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001e6c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001e70:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001e72:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001e76:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001e78:	9b05      	ldr	r3, [sp, #20]
 8001e7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e7e:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001e80:	9b04      	ldr	r3, [sp, #16]
 8001e82:	0799      	lsls	r1, r3, #30
 8001e84:	d50d      	bpl.n	8001ea2 <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001e86:	9b04      	ldr	r3, [sp, #16]
 8001e88:	07da      	lsls	r2, r3, #31
 8001e8a:	d506      	bpl.n	8001e9a <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001e8c:	69ab      	ldr	r3, [r5, #24]
 8001e8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001e92:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7fe fc45 	bl	8000724 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001e9a:	9b05      	ldr	r3, [sp, #20]
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001ea2:	9b04      	ldr	r3, [sp, #16]
 8001ea4:	071b      	lsls	r3, r3, #28
 8001ea6:	d517      	bpl.n	8001ed8 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001ea8:	9b05      	ldr	r3, [sp, #20]
 8001eaa:	f043 0308 	orr.w	r3, r3, #8
 8001eae:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001eb0:	9b04      	ldr	r3, [sp, #16]
 8001eb2:	075f      	lsls	r7, r3, #29
 8001eb4:	f140 8088 	bpl.w	8001fc8 <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001eb8:	69a1      	ldr	r1, [r4, #24]
 8001eba:	2902      	cmp	r1, #2
 8001ebc:	d17c      	bne.n	8001fb8 <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001ebe:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001ec0:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001ec2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001ec6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001eca:	bf18      	it	ne
 8001ecc:	2101      	movne	r1, #1
 8001ece:	f002 fae3 	bl	8004498 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7fe fc26 	bl	8000724 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001ed8:	9b04      	ldr	r3, [sp, #16]
 8001eda:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001edc:	bf42      	ittt	mi
 8001ede:	9b05      	ldrmi	r3, [sp, #20]
 8001ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8001ee4:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001ee6:	9b05      	ldr	r3, [sp, #20]
 8001ee8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	f002 fa41 	bl	8004374 <USB_ReadInterrupts>
 8001ef2:	0701      	lsls	r1, r0, #28
 8001ef4:	d505      	bpl.n	8001f02 <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7fe fc10 	bl	800071c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	2208      	movs	r2, #8
 8001f00:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f002 fa36 	bl	8004374 <USB_ReadInterrupts>
 8001f08:	0182      	lsls	r2, r0, #6
 8001f0a:	d514      	bpl.n	8001f36 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	f002 fccf 	bl	80048b0 <USB_HC_ReadInterrupt>
 8001f12:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8001f16:	9002      	str	r0, [sp, #8]
 8001f18:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f1a:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 8001f1e:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001f22:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001f24:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f28:	68a3      	ldr	r3, [r4, #8]
 8001f2a:	459b      	cmp	fp, r3
 8001f2c:	d358      	bcc.n	8001fe0 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f34:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8001f36:	6820      	ldr	r0, [r4, #0]
 8001f38:	f002 fa1c 	bl	8004374 <USB_ReadInterrupts>
 8001f3c:	06c3      	lsls	r3, r0, #27
 8001f3e:	d538      	bpl.n	8001fb2 <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f40:	6825      	ldr	r5, [r4, #0]
 8001f42:	69ab      	ldr	r3, [r5, #24]
 8001f44:	f023 0310 	bic.w	r3, r3, #16
 8001f48:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001f4a:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8001f4c:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d129      	bne.n	8001fa8 <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001f54:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8001f58:	f1b8 0f00 	cmp.w	r8, #0
 8001f5c:	d024      	beq.n	8001fa8 <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8001f5e:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8001f62:	2628      	movs	r6, #40	; 0x28
 8001f64:	fb06 4607 	mla	r6, r6, r7, r4
 8001f68:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001f6a:	b1e9      	cbz	r1, 8001fa8 <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8001f6c:	4642      	mov	r2, r8
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f002 f9f2 	bl	8004358 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8001f74:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001f76:	4443      	add	r3, r8
 8001f78:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001f7a:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001f7e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001f80:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001f84:	4443      	add	r3, r8
 8001f86:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001f88:	692a      	ldr	r2, [r5, #16]
 8001f8a:	4bb7      	ldr	r3, [pc, #732]	; (8002268 <HAL_HCD_IRQHandler+0x4a4>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	b15b      	cbz	r3, 8001fa8 <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8001f90:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8001f9a:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8001f9c:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001fa0:	f083 0301 	eor.w	r3, r3, #1
 8001fa4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	6993      	ldr	r3, [r2, #24]
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	6193      	str	r3, [r2, #24]
}
 8001fb2:	b007      	add	sp, #28
 8001fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001fb8:	68e3      	ldr	r3, [r4, #12]
 8001fba:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8001fbc:	bf04      	itt	eq
 8001fbe:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001fc2:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001fc6:	e784      	b.n	8001ed2 <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001fc8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001fcc:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001fce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001fd2:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001fd6:	6993      	ldr	r3, [r2, #24]
 8001fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fdc:	6193      	str	r3, [r2, #24]
 8001fde:	e77b      	b.n	8001ed8 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8001fe0:	9a02      	ldr	r2, [sp, #8]
 8001fe2:	fa0a f30b 	lsl.w	r3, sl, fp
 8001fe6:	4213      	tst	r3, r2
 8001fe8:	f000 8086 	beq.w	80020f8 <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	6820      	ldr	r0, [r4, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001ff6:	fa5f f58b 	uxtb.w	r5, fp
 8001ffa:	f000 810a 	beq.w	8002212 <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001ffe:	016a      	lsls	r2, r5, #5
 8002000:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 8002004:	eb02 0608 	add.w	r6, r2, r8
 8002008:	68b1      	ldr	r1, [r6, #8]
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	d513      	bpl.n	8002036 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800200e:	2104      	movs	r1, #4
 8002010:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8002012:	68f1      	ldr	r1, [r6, #12]
 8002014:	f041 0102 	orr.w	r1, r1, #2
 8002018:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800201a:	68b1      	ldr	r1, [r6, #8]
 800201c:	058b      	lsls	r3, r1, #22
 800201e:	d53d      	bpl.n	800209c <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002020:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8002022:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 800202a:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 800202c:	f002 fc4f 	bl	80048ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002034:	e12b      	b.n	800228e <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8002036:	68b1      	ldr	r1, [r6, #8]
 8002038:	0689      	lsls	r1, r1, #26
 800203a:	d502      	bpl.n	8002042 <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800203c:	2120      	movs	r1, #32
 800203e:	60b1      	str	r1, [r6, #8]
 8002040:	e7eb      	b.n	800201a <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8002042:	68b1      	ldr	r1, [r6, #8]
 8002044:	070b      	lsls	r3, r1, #28
 8002046:	d513      	bpl.n	8002070 <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8002048:	68f1      	ldr	r1, [r6, #12]
 800204a:	9203      	str	r2, [sp, #12]
 800204c:	f041 0102 	orr.w	r1, r1, #2
 8002050:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8002052:	fb07 4105 	mla	r1, r7, r5, r4
 8002056:	f04f 0e05 	mov.w	lr, #5
 800205a:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800205e:	2110      	movs	r1, #16
 8002060:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8002062:	2108      	movs	r1, #8
 8002064:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8002066:	4629      	mov	r1, r5
 8002068:	f002 fc31 	bl	80048ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800206c:	9a03      	ldr	r2, [sp, #12]
 800206e:	e7d4      	b.n	800201a <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8002070:	68b1      	ldr	r1, [r6, #8]
 8002072:	0549      	lsls	r1, r1, #21
 8002074:	d5d1      	bpl.n	800201a <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8002076:	68f1      	ldr	r1, [r6, #12]
 8002078:	9203      	str	r2, [sp, #12]
 800207a:	f041 0102 	orr.w	r1, r1, #2
 800207e:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8002080:	4629      	mov	r1, r5
 8002082:	f002 fc24 	bl	80048ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8002086:	2110      	movs	r1, #16
 8002088:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800208a:	fb07 4105 	mla	r1, r7, r5, r4
 800208e:	2008      	movs	r0, #8
 8002090:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002098:	60b1      	str	r1, [r6, #8]
 800209a:	e7e7      	b.n	800206c <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 800209c:	68b1      	ldr	r1, [r6, #8]
 800209e:	07c8      	lsls	r0, r1, #31
 80020a0:	d540      	bpl.n	8002124 <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 80020a2:	6921      	ldr	r1, [r4, #16]
 80020a4:	b149      	cbz	r1, 80020ba <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 80020a6:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020aa:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 80020ac:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020b0:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 80020b4:	1a09      	subs	r1, r1, r0
 80020b6:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 80020ba:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 80020be:	2000      	movs	r0, #0
 80020c0:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 80020c2:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020c6:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80020ca:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 80020ce:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80020d2:	d117      	bne.n	8002104 <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80020d4:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80020d6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80020de:	4629      	mov	r1, r5
 80020e0:	f002 fbf5 	bl	80048ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020e4:	2310      	movs	r3, #16
 80020e6:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 80020e8:	fb07 4505 	mla	r5, r7, r5, r4
 80020ec:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80020f0:	f083 0301 	eor.w	r3, r3, #1
 80020f4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 80020f8:	9b01      	ldr	r3, [sp, #4]
 80020fa:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020fc:	f10b 0b01 	add.w	fp, fp, #1
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	e711      	b.n	8001f28 <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002104:	2803      	cmp	r0, #3
 8002106:	d1ef      	bne.n	80020e8 <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002108:	f852 0008 	ldr.w	r0, [r2, r8]
 800210c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8002110:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8002114:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002118:	2201      	movs	r2, #1
 800211a:	4629      	mov	r1, r5
 800211c:	4620      	mov	r0, r4
 800211e:	f7fe fb09 	bl	8000734 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002122:	e7e1      	b.n	80020e8 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8002124:	68b1      	ldr	r1, [r6, #8]
 8002126:	0789      	lsls	r1, r1, #30
 8002128:	d535      	bpl.n	8002196 <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 800212a:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800212c:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8002130:	f021 0102 	bic.w	r1, r1, #2
 8002134:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8002136:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800213a:	2901      	cmp	r1, #1
 800213c:	d10c      	bne.n	8002158 <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800213e:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8002142:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002146:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 800214a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800214e:	4629      	mov	r1, r5
 8002150:	4620      	mov	r0, r4
 8002152:	f7fe faef 	bl	8000734 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002156:	e7cf      	b.n	80020f8 <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8002158:	2905      	cmp	r1, #5
 800215a:	d0f0      	beq.n	800213e <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800215c:	2906      	cmp	r1, #6
 800215e:	d001      	beq.n	8002164 <HAL_HCD_IRQHandler+0x3a0>
 8002160:	2908      	cmp	r1, #8
 8002162:	d1ee      	bne.n	8002142 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8002164:	fb07 4105 	mla	r1, r7, r5, r4
 8002168:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800216a:	2803      	cmp	r0, #3
 800216c:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8002170:	bf88      	it	hi
 8002172:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8002174:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 8002176:	bf83      	ittte	hi
 8002178:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800217a:	2004      	movhi	r0, #4
 800217c:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002180:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8002184:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002188:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800218c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8002190:	f842 1008 	str.w	r1, [r2, r8]
 8002194:	e7d5      	b.n	8002142 <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8002196:	68b1      	ldr	r1, [r6, #8]
 8002198:	060b      	lsls	r3, r1, #24
 800219a:	d511      	bpl.n	80021c0 <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800219c:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 800219e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 80021a6:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 80021aa:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 80021ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ae:	3201      	adds	r2, #1
 80021b0:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 80021b2:	2206      	movs	r2, #6
 80021b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 80021b8:	f002 fb89 	bl	80048ce <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	e066      	b.n	800228e <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80021c0:	68b1      	ldr	r1, [r6, #8]
 80021c2:	06c8      	lsls	r0, r1, #27
 80021c4:	d598      	bpl.n	80020f8 <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80021c6:	fb07 4105 	mla	r1, r7, r5, r4
 80021ca:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 80021ce:	2903      	cmp	r1, #3
 80021d0:	d109      	bne.n	80021e6 <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80021d2:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80021d8:	f041 0102 	orr.w	r1, r1, #2
 80021dc:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 80021de:	4629      	mov	r1, r5
 80021e0:	f002 fb75 	bl	80048ce <USB_HC_Halt>
 80021e4:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 80021e6:	fb07 4505 	mla	r5, r7, r5, r4
 80021ea:	2103      	movs	r1, #3
 80021ec:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021f0:	2110      	movs	r1, #16
 80021f2:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80021f4:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 80021f8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80021fc:	f47f af7c 	bne.w	80020f8 <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8002200:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002204:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002208:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 800220c:	f842 1008 	str.w	r1, [r2, r8]
 8002210:	e772      	b.n	80020f8 <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8002212:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8002216:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800221a:	68b3      	ldr	r3, [r6, #8]
 800221c:	0759      	lsls	r1, r3, #29
 800221e:	d506      	bpl.n	800222e <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002220:	2304      	movs	r3, #4
 8002222:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8002224:	68f3      	ldr	r3, [r6, #12]
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	60f3      	str	r3, [r6, #12]
 800222c:	e764      	b.n	80020f8 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800222e:	68b3      	ldr	r3, [r6, #8]
 8002230:	f013 0320 	ands.w	r3, r3, #32
 8002234:	d01a      	beq.n	800226c <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002236:	2320      	movs	r3, #32
 8002238:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 800223a:	fb07 4305 	mla	r3, r7, r5, r4
 800223e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002242:	2a01      	cmp	r2, #1
 8002244:	f47f af58 	bne.w	80020f8 <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 8002248:	2204      	movs	r2, #4
 800224a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800224e:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8002250:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002252:	f042 0202 	orr.w	r2, r2, #2
 8002256:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8002258:	4629      	mov	r1, r5
 800225a:	f002 fb38 	bl	80048ce <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800225e:	9b03      	ldr	r3, [sp, #12]
 8002260:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8002264:	e748      	b.n	80020f8 <HAL_HCD_IRQHandler+0x334>
 8002266:	bf00      	nop
 8002268:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 800226c:	68b2      	ldr	r2, [r6, #8]
 800226e:	0652      	lsls	r2, r2, #25
 8002270:	d50f      	bpl.n	8002292 <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8002272:	fb07 4205 	mla	r2, r7, r5, r4
 8002276:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8002278:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800227a:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 800227c:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002286:	4629      	mov	r1, r5
 8002288:	f002 fb21 	bl	80048ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800228c:	2340      	movs	r3, #64	; 0x40
 800228e:	60b3      	str	r3, [r6, #8]
 8002290:	e732      	b.n	80020f8 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8002292:	68b2      	ldr	r2, [r6, #8]
 8002294:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8002298:	d005      	beq.n	80022a6 <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800229a:	68f3      	ldr	r3, [r6, #12]
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80022a2:	4629      	mov	r1, r5
 80022a4:	e6c2      	b.n	800202c <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80022a6:	68b3      	ldr	r3, [r6, #8]
 80022a8:	07d9      	lsls	r1, r3, #31
 80022aa:	d510      	bpl.n	80022ce <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 80022ac:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 80022b0:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 80022b2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80022b4:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 80022b6:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80022b8:	f042 0202 	orr.w	r2, r2, #2
 80022bc:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80022be:	f002 fb06 	bl	80048ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 80022c2:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022c4:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80022c8:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 80022cc:	e714      	b.n	80020f8 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80022ce:	68b3      	ldr	r3, [r6, #8]
 80022d0:	071a      	lsls	r2, r3, #28
 80022d2:	d50e      	bpl.n	80022f2 <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 80022d4:	2308      	movs	r3, #8
 80022d6:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80022d8:	68f3      	ldr	r3, [r6, #12]
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80022e0:	4629      	mov	r1, r5
 80022e2:	f002 faf4 	bl	80048ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 80022e6:	fb07 4505 	mla	r5, r7, r5, r4
 80022ea:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80022ec:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80022f0:	e702      	b.n	80020f8 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80022f2:	68b3      	ldr	r3, [r6, #8]
 80022f4:	06db      	lsls	r3, r3, #27
 80022f6:	d511      	bpl.n	800231c <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 80022f8:	fb07 4305 	mla	r3, r7, r5, r4
 80022fc:	2200      	movs	r2, #0
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002300:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8002302:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002304:	f042 0202 	orr.w	r2, r2, #2
 8002308:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800230a:	4629      	mov	r1, r5
 800230c:	f002 fadf 	bl	80048ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8002310:	9b03      	ldr	r3, [sp, #12]
 8002312:	2203      	movs	r2, #3
 8002314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002318:	2310      	movs	r3, #16
 800231a:	e7b8      	b.n	800228e <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800231c:	68b3      	ldr	r3, [r6, #8]
 800231e:	0619      	lsls	r1, r3, #24
 8002320:	d50c      	bpl.n	800233c <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002322:	68f3      	ldr	r3, [r6, #12]
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800232a:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 800232c:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002330:	f002 facd 	bl	80048ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8002334:	2306      	movs	r3, #6
 8002336:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800233a:	e73f      	b.n	80021bc <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800233c:	68b1      	ldr	r1, [r6, #8]
 800233e:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8002342:	d00f      	beq.n	8002364 <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002344:	68f3      	ldr	r3, [r6, #12]
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800234c:	4629      	mov	r1, r5
 800234e:	f002 fabe 	bl	80048ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002352:	2310      	movs	r3, #16
 8002354:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8002356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235a:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800235c:	fb07 4505 	mla	r5, r7, r5, r4
 8002360:	2308      	movs	r3, #8
 8002362:	e7c3      	b.n	80022ec <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8002364:	68b3      	ldr	r3, [r6, #8]
 8002366:	079a      	lsls	r2, r3, #30
 8002368:	f57f aec6 	bpl.w	80020f8 <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 800236c:	68f3      	ldr	r3, [r6, #12]
 800236e:	f023 0302 	bic.w	r3, r3, #2
 8002372:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8002374:	fb07 4305 	mla	r3, r7, r5, r4
 8002378:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800237c:	2a01      	cmp	r2, #1
 800237e:	d10d      	bne.n	800239c <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8002380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8002384:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002388:	2a02      	cmp	r2, #2
 800238a:	f47f aeda 	bne.w	8002142 <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 800238e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8002392:	f082 0201 	eor.w	r2, r2, #1
 8002396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800239a:	e6d2      	b.n	8002142 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 800239c:	2a03      	cmp	r2, #3
 800239e:	d102      	bne.n	80023a6 <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023a0:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 80023a4:	e6cd      	b.n	8002142 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 80023a6:	2a04      	cmp	r2, #4
 80023a8:	d104      	bne.n	80023b4 <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80023aa:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 80023ae:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 80023b2:	e6c6      	b.n	8002142 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80023b4:	2a05      	cmp	r2, #5
 80023b6:	d102      	bne.n	80023be <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80023bc:	e6c1      	b.n	8002142 <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023be:	2a06      	cmp	r2, #6
 80023c0:	d002      	beq.n	80023c8 <HAL_HCD_IRQHandler+0x604>
 80023c2:	2a08      	cmp	r2, #8
 80023c4:	f47f aebd 	bne.w	8002142 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80023c8:	fb07 4305 	mla	r3, r7, r5, r4
 80023cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023ce:	1c51      	adds	r1, r2, #1
 80023d0:	2a03      	cmp	r2, #3
 80023d2:	6599      	str	r1, [r3, #88]	; 0x58
 80023d4:	d9e4      	bls.n	80023a0 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 80023d6:	2200      	movs	r2, #0
 80023d8:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023da:	2204      	movs	r2, #4
 80023dc:	e7ec      	b.n	80023b8 <HAL_HCD_IRQHandler+0x5f4>
 80023de:	bf00      	nop

080023e0 <HAL_HCD_Start>:
{ 
 80023e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 80023e2:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80023e6:	2b01      	cmp	r3, #1
{ 
 80023e8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 80023ea:	d00d      	beq.n	8002408 <HAL_HCD_Start+0x28>
 80023ec:	2501      	movs	r5, #1
 80023ee:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 80023f2:	6800      	ldr	r0, [r0, #0]
 80023f4:	f001 ff56 	bl	80042a4 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 80023f8:	4629      	mov	r1, r5
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	f002 f882 	bl	8004504 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8002400:	2000      	movs	r0, #0
 8002402:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8002406:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 8002408:	2002      	movs	r0, #2
}
 800240a:	bd38      	pop	{r3, r4, r5, pc}

0800240c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 800240c:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8002410:	2b01      	cmp	r3, #1
{ 
 8002412:	b510      	push	{r4, lr}
 8002414:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8002416:	d009      	beq.n	800242c <HAL_HCD_Stop+0x20>
 8002418:	2301      	movs	r3, #1
 800241a:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 800241e:	6800      	ldr	r0, [r0, #0]
 8002420:	f002 fb7a 	bl	8004b18 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8002424:	2000      	movs	r0, #0
 8002426:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 800242a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 800242c:	2002      	movs	r0, #2
}
 800242e:	bd10      	pop	{r4, pc}

08002430 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8002430:	6800      	ldr	r0, [r0, #0]
 8002432:	f002 b84e 	b.w	80044d2 <USB_ResetPort>

08002436 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002436:	2328      	movs	r3, #40	; 0x28
 8002438:	fb03 0101 	mla	r1, r3, r1, r0
}
 800243c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002440:	4770      	bx	lr

08002442 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 8002442:	2328      	movs	r3, #40	; 0x28
 8002444:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002448:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800244a:	4770      	bx	lr

0800244c <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 800244c:	6800      	ldr	r0, [r0, #0]
 800244e:	f002 b880 	b.w	8004552 <USB_GetCurrentFrame>

08002452 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8002452:	6800      	ldr	r0, [r0, #0]
 8002454:	f002 b874 	b.w	8004540 <USB_GetHostSpeed>

08002458 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002458:	6802      	ldr	r2, [r0, #0]
 800245a:	6953      	ldr	r3, [r2, #20]
 800245c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002460:	d00d      	beq.n	800247e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002462:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002466:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002468:	2304      	movs	r3, #4
 800246a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800246c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	2300      	movs	r3, #0
 8002470:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002472:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8002476:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800247a:	2001      	movs	r0, #1
 800247c:	4770      	bx	lr
  }
  return HAL_OK;
 800247e:	4618      	mov	r0, r3
}
 8002480:	4770      	bx	lr

08002482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002482:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002486:	4604      	mov	r4, r0
 8002488:	4617      	mov	r7, r2
 800248a:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002490:	b28e      	uxth	r6, r1
 8002492:	6825      	ldr	r5, [r4, #0]
 8002494:	f1b8 0f01 	cmp.w	r8, #1
 8002498:	bf0c      	ite	eq
 800249a:	696b      	ldreq	r3, [r5, #20]
 800249c:	69ab      	ldrne	r3, [r5, #24]
 800249e:	ea36 0303 	bics.w	r3, r6, r3
 80024a2:	bf14      	ite	ne
 80024a4:	2001      	movne	r0, #1
 80024a6:	2000      	moveq	r0, #0
 80024a8:	b908      	cbnz	r0, 80024ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80024aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ae:	696b      	ldr	r3, [r5, #20]
 80024b0:	055a      	lsls	r2, r3, #21
 80024b2:	d512      	bpl.n	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ba:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024bc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80024c0:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024c2:	2304      	movs	r3, #4
 80024c4:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80024c6:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80024cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80024d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80024d4:	2001      	movs	r0, #1
 80024d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80024da:	1c7b      	adds	r3, r7, #1
 80024dc:	d0d9      	beq.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024de:	b94f      	cbnz	r7, 80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80024e0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80024e2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80024e4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80024e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80024ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80024ee:	2003      	movs	r0, #3
 80024f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024f4:	f7fe ffe2 	bl	80014bc <HAL_GetTick>
 80024f8:	eba0 0009 	sub.w	r0, r0, r9
 80024fc:	4287      	cmp	r7, r0
 80024fe:	d2c8      	bcs.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8002500:	e7ee      	b.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08002502 <I2C_WaitOnFlagUntilTimeout>:
{
 8002502:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002506:	9e08      	ldr	r6, [sp, #32]
 8002508:	4604      	mov	r4, r0
 800250a:	4690      	mov	r8, r2
 800250c:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800250e:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8002512:	b28d      	uxth	r5, r1
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	f1b9 0f01 	cmp.w	r9, #1
 800251a:	bf0c      	ite	eq
 800251c:	695b      	ldreq	r3, [r3, #20]
 800251e:	699b      	ldrne	r3, [r3, #24]
 8002520:	ea35 0303 	bics.w	r3, r5, r3
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	4543      	cmp	r3, r8
 800252c:	d002      	beq.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800252e:	2000      	movs	r0, #0
}
 8002530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002534:	1c7b      	adds	r3, r7, #1
 8002536:	d0ed      	beq.n	8002514 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002538:	b95f      	cbnz	r7, 8002552 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800253a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800253c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8002540:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002544:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002548:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800254e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002552:	f7fe ffb3 	bl	80014bc <HAL_GetTick>
 8002556:	1b80      	subs	r0, r0, r6
 8002558:	4287      	cmp	r7, r0
 800255a:	d2db      	bcs.n	8002514 <I2C_WaitOnFlagUntilTimeout+0x12>
 800255c:	e7ed      	b.n	800253a <I2C_WaitOnFlagUntilTimeout+0x38>

0800255e <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800255e:	b570      	push	{r4, r5, r6, lr}
 8002560:	4604      	mov	r4, r0
 8002562:	460d      	mov	r5, r1
 8002564:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	d501      	bpl.n	8002572 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800256e:	2000      	movs	r0, #0
 8002570:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff ff70 	bl	8002458 <I2C_IsAcknowledgeFailed>
 8002578:	b9a8      	cbnz	r0, 80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800257a:	1c6a      	adds	r2, r5, #1
 800257c:	d0f3      	beq.n	8002566 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800257e:	b965      	cbnz	r5, 800259a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002582:	f043 0320 	orr.w	r3, r3, #32
 8002586:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8002588:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	2300      	movs	r3, #0
 800258c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800258e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002592:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002596:	2003      	movs	r0, #3
 8002598:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800259a:	f7fe ff8f 	bl	80014bc <HAL_GetTick>
 800259e:	1b80      	subs	r0, r0, r6
 80025a0:	4285      	cmp	r5, r0
 80025a2:	d2e0      	bcs.n	8002566 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80025a4:	e7ec      	b.n	8002580 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
}
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025ac <I2C_RequestMemoryWrite>:
{
 80025ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80025b0:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80025b2:	6802      	ldr	r2, [r0, #0]
{
 80025b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80025b6:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80025b8:	6813      	ldr	r3, [r2, #0]
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
{
 80025c0:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	9600      	str	r6, [sp, #0]
 80025c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025c6:	2200      	movs	r2, #0
 80025c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80025cc:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ce:	f7ff ff98 	bl	8002502 <I2C_WaitOnFlagUntilTimeout>
 80025d2:	b968      	cbnz	r0, 80025f0 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025d4:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025d8:	491c      	ldr	r1, [pc, #112]	; (800264c <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025da:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80025de:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e0:	4620      	mov	r0, r4
 80025e2:	4633      	mov	r3, r6
 80025e4:	f7ff ff4d 	bl	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e8:	b130      	cbz	r0, 80025f8 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d018      	beq.n	8002622 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80025f0:	2003      	movs	r0, #3
}
 80025f2:	b004      	add	sp, #16
 80025f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	9003      	str	r0, [sp, #12]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	9203      	str	r2, [sp, #12]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002604:	4632      	mov	r2, r6
 8002606:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002608:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	4620      	mov	r0, r4
 800260c:	f7ff ffa7 	bl	800255e <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	b148      	cbz	r0, 8002626 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002614:	2b04      	cmp	r3, #4
 8002616:	d1eb      	bne.n	80025f0 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002618:	6822      	ldr	r2, [r4, #0]
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002620:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
 8002624:	e7e5      	b.n	80025f2 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002626:	f1b8 0f01 	cmp.w	r8, #1
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	d102      	bne.n	8002634 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800262e:	b2ed      	uxtb	r5, r5
 8002630:	611d      	str	r5, [r3, #16]
 8002632:	e7de      	b.n	80025f2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002634:	0a2a      	lsrs	r2, r5, #8
 8002636:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	990a      	ldr	r1, [sp, #40]	; 0x28
 800263a:	4632      	mov	r2, r6
 800263c:	4620      	mov	r0, r4
 800263e:	f7ff ff8e 	bl	800255e <I2C_WaitOnTXEFlagUntilTimeout>
 8002642:	2800      	cmp	r0, #0
 8002644:	d1e5      	bne.n	8002612 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	e7f1      	b.n	800262e <I2C_RequestMemoryWrite+0x82>
 800264a:	bf00      	nop
 800264c:	00010002 	.word	0x00010002

08002650 <I2C_RequestMemoryRead>:
{
 8002650:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002654:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002656:	6803      	ldr	r3, [r0, #0]
{
 8002658:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800265a:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	601a      	str	r2, [r3, #0]
{
 800266c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800266e:	9500      	str	r5, [sp, #0]
 8002670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002672:	2200      	movs	r2, #0
 8002674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002678:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800267a:	f7ff ff42 	bl	8002502 <I2C_WaitOnFlagUntilTimeout>
 800267e:	b980      	cbnz	r0, 80026a2 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002680:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002682:	492f      	ldr	r1, [pc, #188]	; (8002740 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002684:	b2ff      	uxtb	r7, r7
 8002686:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800268a:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800268c:	4620      	mov	r0, r4
 800268e:	462b      	mov	r3, r5
 8002690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002692:	f7ff fef6 	bl	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002696:	b140      	cbz	r0, 80026aa <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800269a:	2b04      	cmp	r3, #4
 800269c:	d101      	bne.n	80026a2 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 800269e:	2001      	movs	r0, #1
 80026a0:	e000      	b.n	80026a4 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80026a2:	2003      	movs	r0, #3
}
 80026a4:	b004      	add	sp, #16
 80026a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	9003      	str	r0, [sp, #12]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	9203      	str	r2, [sp, #12]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b6:	462a      	mov	r2, r5
 80026b8:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff ff4e 	bl	800255e <I2C_WaitOnTXEFlagUntilTimeout>
 80026c2:	b140      	cbz	r0, 80026d6 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d1eb      	bne.n	80026a2 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e7e3      	b.n	800269e <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026d6:	f1b8 0f01 	cmp.w	r8, #1
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	d124      	bne.n	8002728 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026de:	b2f6      	uxtb	r6, r6
 80026e0:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e2:	462a      	mov	r2, r5
 80026e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff ff39 	bl	800255e <I2C_WaitOnTXEFlagUntilTimeout>
 80026ec:	4602      	mov	r2, r0
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d1e8      	bne.n	80026c4 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80026f2:	6821      	ldr	r1, [r4, #0]
 80026f4:	680b      	ldr	r3, [r1, #0]
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fc:	4620      	mov	r0, r4
 80026fe:	9500      	str	r5, [sp, #0]
 8002700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002702:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002706:	f7ff fefc 	bl	8002502 <I2C_WaitOnFlagUntilTimeout>
 800270a:	2800      	cmp	r0, #0
 800270c:	d1c9      	bne.n	80026a2 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800270e:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002712:	490b      	ldr	r1, [pc, #44]	; (8002740 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002714:	f047 0701 	orr.w	r7, r7, #1
 8002718:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800271a:	4620      	mov	r0, r4
 800271c:	462b      	mov	r3, r5
 800271e:	f7ff feb0 	bl	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002722:	2800      	cmp	r0, #0
 8002724:	d1b8      	bne.n	8002698 <I2C_RequestMemoryRead+0x48>
 8002726:	e7bd      	b.n	80026a4 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002728:	0a32      	lsrs	r2, r6, #8
 800272a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800272e:	462a      	mov	r2, r5
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ff14 	bl	800255e <I2C_WaitOnTXEFlagUntilTimeout>
 8002736:	2800      	cmp	r0, #0
 8002738:	d1c4      	bne.n	80026c4 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	e7cf      	b.n	80026de <I2C_RequestMemoryRead+0x8e>
 800273e:	bf00      	nop
 8002740:	00010002 	.word	0x00010002

08002744 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	4604      	mov	r4, r0
 8002748:	460d      	mov	r5, r1
 800274a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800274c:	6820      	ldr	r0, [r4, #0]
 800274e:	6943      	ldr	r3, [r0, #20]
 8002750:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002754:	d001      	beq.n	800275a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002756:	2000      	movs	r0, #0
}
 8002758:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800275a:	6942      	ldr	r2, [r0, #20]
 800275c:	06d2      	lsls	r2, r2, #27
 800275e:	d50b      	bpl.n	8002778 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	f06f 0210 	mvn.w	r2, #16
 8002764:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8002766:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800276a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002770:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8002772:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8002776:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002778:	b95d      	cbnz	r5, 8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800277c:	f043 0320 	orr.w	r3, r3, #32
 8002780:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002782:	2320      	movs	r3, #32
 8002784:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8002788:	2300      	movs	r3, #0
 800278a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800278e:	2003      	movs	r0, #3
 8002790:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002792:	f7fe fe93 	bl	80014bc <HAL_GetTick>
 8002796:	1b80      	subs	r0, r0, r6
 8002798:	4285      	cmp	r5, r0
 800279a:	d2d7      	bcs.n	800274c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800279c:	e7ed      	b.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800279e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800279e:	b570      	push	{r4, r5, r6, lr}
 80027a0:	4604      	mov	r4, r0
 80027a2:	460d      	mov	r5, r1
 80027a4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	075b      	lsls	r3, r3, #29
 80027ac:	d501      	bpl.n	80027b2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80027ae:	2000      	movs	r0, #0
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff fe50 	bl	8002458 <I2C_IsAcknowledgeFailed>
 80027b8:	b9a8      	cbnz	r0, 80027e6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80027ba:	1c6a      	adds	r2, r5, #1
 80027bc:	d0f3      	beq.n	80027a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027be:	b965      	cbnz	r5, 80027da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027c2:	f043 0320 	orr.w	r3, r3, #32
 80027c6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80027c8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80027ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80027d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80027d6:	2003      	movs	r0, #3
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027da:	f7fe fe6f 	bl	80014bc <HAL_GetTick>
 80027de:	1b80      	subs	r0, r0, r6
 80027e0:	4285      	cmp	r5, r0
 80027e2:	d2e0      	bcs.n	80027a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80027e4:	e7ec      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
}
 80027e8:	bd70      	pop	{r4, r5, r6, pc}

080027ea <HAL_I2C_MspInit>:
 80027ea:	4770      	bx	lr

080027ec <HAL_I2C_Init>:
{
 80027ec:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80027ee:	4604      	mov	r4, r0
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d062      	beq.n	80028ba <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80027f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027fc:	b91b      	cbnz	r3, 8002806 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002802:	f7ff fff2 	bl	80027ea <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8002806:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002808:	4e2d      	ldr	r6, [pc, #180]	; (80028c0 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	4d2e      	ldr	r5, [pc, #184]	; (80028c4 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	2324      	movs	r3, #36	; 0x24
 800280e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800281a:	f001 f835 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800281e:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8002820:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002822:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002826:	42b3      	cmp	r3, r6
 8002828:	bf84      	itt	hi
 800282a:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 800282e:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8002830:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002832:	bf91      	iteee	ls
 8002834:	1c69      	addls	r1, r5, #1
 8002836:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800283a:	fbb1 f1f5 	udivhi	r1, r1, r5
 800283e:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002840:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002842:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002844:	d821      	bhi.n	800288a <HAL_I2C_Init+0x9e>
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fbb0 f0f3 	udiv	r0, r0, r3
 800284c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002850:	2b03      	cmp	r3, #3
 8002852:	bf98      	it	ls
 8002854:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002856:	6a21      	ldr	r1, [r4, #32]
 8002858:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800285a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800285c:	430b      	orrs	r3, r1
 800285e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002860:	68e1      	ldr	r1, [r4, #12]
 8002862:	6923      	ldr	r3, [r4, #16]
 8002864:	430b      	orrs	r3, r1
 8002866:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002868:	69a1      	ldr	r1, [r4, #24]
 800286a:	6963      	ldr	r3, [r4, #20]
 800286c:	430b      	orrs	r3, r1
 800286e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002870:	6813      	ldr	r3, [r2, #0]
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800287a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002882:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002888:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800288a:	68a1      	ldr	r1, [r4, #8]
 800288c:	b949      	cbnz	r1, 80028a2 <HAL_I2C_Init+0xb6>
 800288e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002892:	fbb0 f0f3 	udiv	r0, r0, r3
 8002896:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800289a:	b163      	cbz	r3, 80028b6 <HAL_I2C_Init+0xca>
 800289c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80028a0:	e7d9      	b.n	8002856 <HAL_I2C_Init+0x6a>
 80028a2:	2119      	movs	r1, #25
 80028a4:	434b      	muls	r3, r1
 80028a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80028aa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80028ae:	b113      	cbz	r3, 80028b6 <HAL_I2C_Init+0xca>
 80028b0:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80028b4:	e7cf      	b.n	8002856 <HAL_I2C_Init+0x6a>
 80028b6:	2001      	movs	r0, #1
 80028b8:	e7cd      	b.n	8002856 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80028ba:	2001      	movs	r0, #1
}
 80028bc:	bd70      	pop	{r4, r5, r6, pc}
 80028be:	bf00      	nop
 80028c0:	000186a0 	.word	0x000186a0
 80028c4:	000f4240 	.word	0x000f4240

080028c8 <HAL_I2C_MspDeInit>:
 80028c8:	4770      	bx	lr

080028ca <HAL_I2C_DeInit>:
{
 80028ca:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 80028cc:	4604      	mov	r4, r0
 80028ce:	b198      	cbz	r0, 80028f8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80028d0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d2:	2324      	movs	r3, #36	; 0x24
 80028d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	6813      	ldr	r3, [r2, #0]
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80028e0:	f7ff fff2 	bl	80028c8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80028e4:	2000      	movs	r0, #0
 80028e6:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80028e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80028ec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80028f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028f8:	2001      	movs	r0, #1
}
 80028fa:	bd10      	pop	{r4, pc}

080028fc <HAL_I2C_Mem_Write>:
{
 80028fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002900:	4604      	mov	r4, r0
 8002902:	469a      	mov	sl, r3
 8002904:	4688      	mov	r8, r1
 8002906:	4691      	mov	r9, r2
 8002908:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 800290a:	f7fe fdd7 	bl	80014bc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800290e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002912:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8002914:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002916:	d003      	beq.n	8002920 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002918:	2002      	movs	r0, #2
}
 800291a:	b002      	add	sp, #8
 800291c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002920:	9000      	str	r0, [sp, #0]
 8002922:	2319      	movs	r3, #25
 8002924:	2201      	movs	r2, #1
 8002926:	493e      	ldr	r1, [pc, #248]	; (8002a20 <HAL_I2C_Mem_Write+0x124>)
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff fdea 	bl	8002502 <I2C_WaitOnFlagUntilTimeout>
 800292e:	2800      	cmp	r0, #0
 8002930:	d1f2      	bne.n	8002918 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8002932:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d0ee      	beq.n	8002918 <HAL_I2C_Mem_Write+0x1c>
 800293a:	2301      	movs	r3, #1
 800293c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002946:	bf5e      	ittt	pl
 8002948:	681a      	ldrpl	r2, [r3, #0]
 800294a:	f042 0201 	orrpl.w	r2, r2, #1
 800294e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002956:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002958:	2321      	movs	r3, #33	; 0x21
 800295a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800295e:	2340      	movs	r3, #64	; 0x40
 8002960:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002966:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 800296a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296e:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002970:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_I2C_Mem_Write+0x128>)
 8002974:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002976:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002978:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800297a:	9501      	str	r5, [sp, #4]
 800297c:	9600      	str	r6, [sp, #0]
 800297e:	4653      	mov	r3, sl
 8002980:	464a      	mov	r2, r9
 8002982:	4641      	mov	r1, r8
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff fe11 	bl	80025ac <I2C_RequestMemoryWrite>
 800298a:	2800      	cmp	r0, #0
 800298c:	d02a      	beq.n	80029e4 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002990:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002994:	2b04      	cmp	r3, #4
 8002996:	d107      	bne.n	80029a8 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
 800299a:	e7be      	b.n	800291a <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299c:	f7ff fddf 	bl	800255e <I2C_WaitOnTXEFlagUntilTimeout>
 80029a0:	b120      	cbz	r0, 80029ac <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d034      	beq.n	8002a12 <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 80029a8:	2003      	movs	r0, #3
 80029aa:	e7b6      	b.n	800291a <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029ae:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 80029b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029b2:	1c4b      	adds	r3, r1, #1
 80029b4:	6263      	str	r3, [r4, #36]	; 0x24
 80029b6:	780b      	ldrb	r3, [r1, #0]
 80029b8:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80029ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029c2:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80029c4:	1e50      	subs	r0, r2, #1
 80029c6:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029c8:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80029ca:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029cc:	d50a      	bpl.n	80029e4 <HAL_I2C_Mem_Write+0xe8>
 80029ce:	b148      	cbz	r0, 80029e4 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80029d0:	1c8b      	adds	r3, r1, #2
 80029d2:	6263      	str	r3, [r4, #36]	; 0x24
 80029d4:	784b      	ldrb	r3, [r1, #1]
 80029d6:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80029d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029da:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80029dc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80029de:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80029e0:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80029e2:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80029e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e6:	462a      	mov	r2, r5
 80029e8:	4631      	mov	r1, r6
 80029ea:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1d5      	bne.n	800299c <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	f7ff fed5 	bl	800279e <I2C_WaitOnBTFFlagUntilTimeout>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d1d4      	bne.n	80029a2 <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80029f8:	6822      	ldr	r2, [r4, #0]
 80029fa:	6813      	ldr	r3, [r2, #0]
 80029fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a00:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	2320      	movs	r3, #32
 8002a04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002a08:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8002a10:	e783      	b.n	800291a <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a12:	6822      	ldr	r2, [r4, #0]
 8002a14:	6813      	ldr	r3, [r2, #0]
 8002a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e7bc      	b.n	8002998 <HAL_I2C_Mem_Write+0x9c>
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000

08002a28 <HAL_I2C_Mem_Read>:
{
 8002a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	b086      	sub	sp, #24
 8002a30:	469a      	mov	sl, r3
 8002a32:	460d      	mov	r5, r1
 8002a34:	4691      	mov	r9, r2
 8002a36:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002a38:	f7fe fd40 	bl	80014bc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002a3c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002a40:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8002a42:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	d004      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8002a46:	2502      	movs	r5, #2
}
 8002a48:	4628      	mov	r0, r5
 8002a4a:	b006      	add	sp, #24
 8002a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a50:	9000      	str	r0, [sp, #0]
 8002a52:	2319      	movs	r3, #25
 8002a54:	2201      	movs	r2, #1
 8002a56:	4979      	ldr	r1, [pc, #484]	; (8002c3c <HAL_I2C_Mem_Read+0x214>)
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7ff fd52 	bl	8002502 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d1f1      	bne.n	8002a46 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8002a62:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d0ed      	beq.n	8002a46 <HAL_I2C_Mem_Read+0x1e>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002a76:	bf5e      	ittt	pl
 8002a78:	681a      	ldrpl	r2, [r3, #0]
 8002a7a:	f042 0201 	orrpl.w	r2, r2, #1
 8002a7e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a86:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a88:	2322      	movs	r3, #34	; 0x22
 8002a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8e:	2340      	movs	r3, #64	; 0x40
 8002a90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a96:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8002a9c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002aa4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa6:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_I2C_Mem_Read+0x218>)
 8002aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002aaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002aac:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aae:	4629      	mov	r1, r5
 8002ab0:	9601      	str	r6, [sp, #4]
 8002ab2:	9700      	str	r7, [sp, #0]
 8002ab4:	4653      	mov	r3, sl
 8002ab6:	464a      	mov	r2, r9
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff fdc9 	bl	8002650 <I2C_RequestMemoryRead>
 8002abe:	4605      	mov	r5, r0
 8002ac0:	b130      	cbz	r0, 8002ad0 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ac4:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d13a      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8002acc:	2501      	movs	r5, #1
 8002ace:	e7bb      	b.n	8002a48 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8002ad0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	b992      	cbnz	r2, 8002afc <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	9002      	str	r0, [sp, #8]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	9202      	str	r2, [sp, #8]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	9202      	str	r2, [sp, #8]
 8002ae0:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	2320      	movs	r3, #32
 8002aec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002af6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002afa:	e7a5      	b.n	8002a48 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8002afc:	2a01      	cmp	r2, #1
 8002afe:	d122      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	9003      	str	r0, [sp, #12]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	9203      	str	r2, [sp, #12]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	9203      	str	r2, [sp, #12]
 8002b12:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8002c44 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8002b20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0e1      	beq.n	8002aea <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d86b      	bhi.n	8002c02 <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d123      	bne.n	8002b76 <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002b2e:	4632      	mov	r2, r6
 8002b30:	4639      	mov	r1, r7
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff fe06 	bl	8002744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d039      	beq.n	8002bb0 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d1c4      	bne.n	8002acc <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8002b42:	2503      	movs	r5, #3
 8002b44:	e780      	b.n	8002a48 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8002b46:	2a02      	cmp	r2, #2
 8002b48:	d10e      	bne.n	8002b68 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b50:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b58:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	9004      	str	r0, [sp, #16]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	9204      	str	r2, [sp, #16]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	9304      	str	r3, [sp, #16]
 8002b64:	9b04      	ldr	r3, [sp, #16]
 8002b66:	e7d9      	b.n	8002b1c <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b68:	9005      	str	r0, [sp, #20]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	9205      	str	r2, [sp, #20]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	9305      	str	r3, [sp, #20]
 8002b72:	9b05      	ldr	r3, [sp, #20]
 8002b74:	e7d2      	b.n	8002b1c <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8002b76:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b78:	9600      	str	r6, [sp, #0]
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	4641      	mov	r1, r8
 8002b82:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8002b84:	d122      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b86:	f7ff fcbc 	bl	8002502 <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d1d9      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	1c51      	adds	r1, r2, #1
 8002b9e:	6261      	str	r1, [r4, #36]	; 0x24
 8002ba0:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002ba8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	6262      	str	r2, [r4, #36]	; 0x24
 8002bb6:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bb8:	6912      	ldr	r2, [r2, #16]
 8002bba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002bbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002bca:	e7a9      	b.n	8002b20 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bcc:	f7ff fc99 	bl	8002502 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d1b5      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002bde:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002be0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	1c48      	adds	r0, r1, #1
 8002be6:	6260      	str	r0, [r4, #36]	; 0x24
 8002be8:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8002bea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bec:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002bf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	4620      	mov	r0, r4
 8002c00:	e7c1      	b.n	8002b86 <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c02:	4632      	mov	r2, r6
 8002c04:	4639      	mov	r1, r7
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7ff fd9c 	bl	8002744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d195      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	6262      	str	r2, [r4, #36]	; 0x24
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	6912      	ldr	r2, [r2, #16]
 8002c1a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002c1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c1e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002c20:	3b01      	subs	r3, #1
 8002c22:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002c24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c2c:	6953      	ldr	r3, [r2, #20]
 8002c2e:	075b      	lsls	r3, r3, #29
 8002c30:	f57f af76 	bpl.w	8002b20 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	6261      	str	r1, [r4, #36]	; 0x24
 8002c3a:	e7bd      	b.n	8002bb8 <HAL_I2C_Mem_Read+0x190>
 8002c3c:	00100002 	.word	0x00100002
 8002c40:	ffff0000 	.word	0xffff0000
 8002c44:	00010004 	.word	0x00010004

08002c48 <HAL_I2C_GetState>:
  return hi2c->State;
 8002c48:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_I2S_MspInit>:
 8002c4e:	4770      	bx	lr

08002c50 <HAL_I2S_Transmit_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4604      	mov	r4, r0
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 8002c54:	2900      	cmp	r1, #0
 8002c56:	d045      	beq.n	8002ce4 <HAL_I2S_Transmit_DMA+0x94>
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d043      	beq.n	8002ce4 <HAL_I2S_Transmit_DMA+0x94>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8002c5c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d001      	beq.n	8002c68 <HAL_I2S_Transmit_DMA+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002c64:	2002      	movs	r0, #2
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002c68:	6805      	ldr	r5, [r0, #0]
    hi2s->pTxBuffPtr = pData;
 8002c6a:	6241      	str	r1, [r0, #36]	; 0x24
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002c6c:	69eb      	ldr	r3, [r5, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d001      	beq.n	8002c7a <HAL_I2S_Transmit_DMA+0x2a>
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d131      	bne.n	8002cde <HAL_I2S_Transmit_DMA+0x8e>
      hi2s->TxXferSize  = (Size << 1U);
 8002c7a:	0053      	lsls	r3, r2, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2s->TxXferCount = (Size << 1U);
 8002c80:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_LOCK(hi2s);
 8002c82:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d0ec      	beq.n	8002c64 <HAL_I2S_Transmit_DMA+0x14>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002c94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2s->State     = HAL_I2S_STATE_BUSY_TX;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_I2S_Transmit_DMA+0x98>)
 8002c9e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_I2S_Transmit_DMA+0x9c>)
 8002ca2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_I2S_Transmit_DMA+0xa0>)
 8002ca6:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002ca8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002caa:	f105 020c 	add.w	r2, r5, #12
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f7fe fd40 	bl	8001734 <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	0551      	lsls	r1, r2, #21
      __HAL_I2S_ENABLE(hi2s);
 8002cba:	bf5e      	ittt	pl
 8002cbc:	69da      	ldrpl	r2, [r3, #28]
 8002cbe:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002cc2:	61da      	strpl	r2, [r3, #28]
    if((hi2s->Instance->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	0792      	lsls	r2, r2, #30
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cc8:	bf58      	it	pl
 8002cca:	685a      	ldrpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8002ccc:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cd0:	bf5c      	itt	pl
 8002cd2:	f042 0202 	orrpl.w	r2, r2, #2
 8002cd6:	605a      	strpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8002cd8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 8002cdc:	bd38      	pop	{r3, r4, r5, pc}
      hi2s->TxXferSize  = Size;
 8002cde:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2s->TxXferCount = Size;
 8002ce0:	8542      	strh	r2, [r0, #42]	; 0x2a
 8002ce2:	e7ce      	b.n	8002c82 <HAL_I2S_Transmit_DMA+0x32>
    return  HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
  }
}
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	08002e99 	.word	0x08002e99
 8002cec:	08002ea3 	.word	0x08002ea3
 8002cf0:	080030f7 	.word	0x080030f7

08002cf4 <HAL_I2S_DMAPause>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002cf4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d02d      	beq.n	8002d58 <HAL_I2S_DMAPause+0x64>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d109      	bne.n	8002d1e <HAL_I2S_DMAPause+0x2a>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002d0a:	6802      	ldr	r2, [r0, #0]
 8002d0c:	6853      	ldr	r3, [r2, #4]
 8002d0e:	f023 0302 	bic.w	r3, r3, #2
  }
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002d12:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8002d14:	2300      	movs	r3, #0
 8002d16:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4770      	bx	lr
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d104      	bne.n	8002d30 <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002d26:	6802      	ldr	r2, [r0, #0]
 8002d28:	6853      	ldr	r3, [r2, #4]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	e7f0      	b.n	8002d12 <HAL_I2S_DMAPause+0x1e>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002d30:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d1ed      	bne.n	8002d14 <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 8002d38:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 8002d3c:	6853      	ldr	r3, [r2, #4]
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_I2S_DMAPause+0x6c>)
 8002d46:	428a      	cmp	r2, r1
 8002d48:	bf18      	it	ne
 8002d4a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	f022 0203 	bic.w	r2, r2, #3
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	e7dd      	b.n	8002d14 <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 8002d58:	2002      	movs	r0, #2
}
 8002d5a:	4770      	bx	lr
 8002d5c:	40003800 	.word	0x40003800
 8002d60:	40003400 	.word	0x40003400

08002d64 <HAL_I2S_DMAResume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d039      	beq.n	8002de0 <HAL_I2S_DMAResume+0x7c>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d72:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	d10f      	bne.n	8002d9c <HAL_I2S_DMAResume+0x38>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	f042 0202 	orr.w	r2, r2, #2
  }
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002d82:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* If the I2S peripheral is still not enabled, enable it */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	0552      	lsls	r2, r2, #21
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002d88:	bf5e      	ittt	pl
 8002d8a:	69da      	ldrpl	r2, [r3, #28]
 8002d8c:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002d90:	61da      	strpl	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8002d92:	2300      	movs	r3, #0
 8002d94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4770      	bx	lr
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d9c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002da0:	2a04      	cmp	r2, #4
 8002da2:	d103      	bne.n	8002dac <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	e7ea      	b.n	8002d82 <HAL_I2S_DMAResume+0x1e>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dac:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002db0:	2a05      	cmp	r2, #5
 8002db2:	d1e7      	bne.n	8002d84 <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002db4:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002db6:	490b      	ldr	r1, [pc, #44]	; (8002de4 <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002db8:	f042 0203 	orr.w	r2, r2, #3
 8002dbc:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <HAL_I2S_DMAResume+0x84>)
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	bf18      	it	ne
 8002dc4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002dc8:	6851      	ldr	r1, [r2, #4]
 8002dca:	f041 0103 	orr.w	r1, r1, #3
 8002dce:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002dd0:	69d1      	ldr	r1, [r2, #28]
 8002dd2:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 8002dd4:	bf5e      	ittt	pl
 8002dd6:	69d1      	ldrpl	r1, [r2, #28]
 8002dd8:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 8002ddc:	61d1      	strpl	r1, [r2, #28]
 8002dde:	e7d1      	b.n	8002d84 <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 8002de0:	2002      	movs	r0, #2
}
 8002de2:	4770      	bx	lr
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40003400 	.word	0x40003400

08002dec <HAL_I2S_DMAStop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002dec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002df0:	2b01      	cmp	r3, #1
{
 8002df2:	b570      	push	{r4, r5, r6, lr}
 8002df4:	4604      	mov	r4, r0
  __HAL_LOCK(hi2s);
 8002df6:	d049      	beq.n	8002e8c <HAL_I2S_DMAStop+0xa0>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002dfe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	6803      	ldr	r3, [r0, #0]
 8002e06:	d114      	bne.n	8002e32 <HAL_I2S_DMAStop+0x46>
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002e08:	685a      	ldr	r2, [r3, #4]

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmatx);
 8002e0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002e0c:	f022 0202 	bic.w	r2, r2, #2
 8002e10:	605a      	str	r2, [r3, #4]
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmarx);
 8002e12:	f7fe fccd 	bl	80017b0 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	69d3      	ldr	r3, [r2, #28]
 8002e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	61d3      	str	r3, [r2, #28]

  hi2s->State = HAL_I2S_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8002e24:	2000      	movs	r0, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8002e2c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

  return HAL_OK;
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002e32:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002e36:	2a04      	cmp	r2, #4
 8002e38:	d105      	bne.n	8002e46 <HAL_I2S_DMAStop+0x5a>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002e3a:	685a      	ldr	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmarx);
 8002e3c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	e7e5      	b.n	8002e12 <HAL_I2S_DMAStop+0x26>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002e46:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002e4a:	2a05      	cmp	r2, #5
 8002e4c:	d1e3      	bne.n	8002e16 <HAL_I2S_DMAStop+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e4e:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e50:	4e0f      	ldr	r6, [pc, #60]	; (8002e90 <HAL_I2S_DMAStop+0xa4>)
 8002e52:	4d10      	ldr	r5, [pc, #64]	; (8002e94 <HAL_I2S_DMAStop+0xa8>)
    HAL_DMA_Abort(hi2s->hdmatx);
 8002e54:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e56:	f022 0203 	bic.w	r2, r2, #3
 8002e5a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e5c:	42b3      	cmp	r3, r6
 8002e5e:	bf0c      	ite	eq
 8002e60:	462b      	moveq	r3, r5
 8002e62:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	f022 0203 	bic.w	r2, r2, #3
 8002e6c:	605a      	str	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmatx);
 8002e6e:	f7fe fc9f 	bl	80017b0 <HAL_DMA_Abort>
    HAL_DMA_Abort(hi2s->hdmarx);
 8002e72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e74:	f7fe fc9c 	bl	80017b0 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	42b3      	cmp	r3, r6
 8002e7c:	bf18      	it	ne
 8002e7e:	f04f 2540 	movne.w	r5, #1073758208	; 0x40004000
 8002e82:	69eb      	ldr	r3, [r5, #28]
 8002e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e88:	61eb      	str	r3, [r5, #28]
 8002e8a:	e7c4      	b.n	8002e16 <HAL_I2S_DMAStop+0x2a>
  __HAL_LOCK(hi2s);
 8002e8c:	2002      	movs	r0, #2
}
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	40003800 	.word	0x40003800
 8002e94:	40003400 	.word	0x40003400

08002e98 <I2S_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e98:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002e9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e9c:	f7fe fa90 	bl	80013c0 <HAL_I2S_TxHalfCpltCallback>
 8002ea0:	bd08      	pop	{r3, pc}

08002ea2 <I2S_DMATxCplt>:
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ea2:	6802      	ldr	r2, [r0, #0]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	f412 7280 	ands.w	r2, r2, #256	; 0x100
{
 8002eaa:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eac:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002eae:	d108      	bne.n	8002ec2 <I2S_DMATxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	6841      	ldr	r1, [r0, #4]
 8002eb4:	f021 0102 	bic.w	r1, r1, #2
 8002eb8:	6041      	str	r1, [r0, #4]
    hi2s->TxXferCount = 0U;
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State       = HAL_I2S_STATE_READY;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fa72 	bl	80013ac <HAL_I2S_TxCpltCallback>
 8002ec8:	bd08      	pop	{r3, pc}
	...

08002ecc <HAL_I2S_Init>:
{
 8002ecc:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8002ece:	4604      	mov	r4, r0
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d03f      	beq.n	8002f54 <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ed4:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ed6:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ed8:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002edc:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8002ede:	f7ff feb6 	bl	8002c4e <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	69d3      	ldr	r3, [r2, #28]
 8002ee6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002eea:	f023 030f 	bic.w	r3, r3, #15
 8002eee:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ef0:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8002ef2:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ef4:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8002ef6:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ef8:	d035      	beq.n	8002f66 <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002efa:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8002efc:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002efe:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8002f00:	bf14      	ite	ne
 8002f02:	2620      	movne	r6, #32
 8002f04:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f06:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f08:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002f0a:	bf98      	it	ls
 8002f0c:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f0e:	f000 fdb5 	bl	8003a7c <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	6961      	ldr	r1, [r4, #20]
 8002f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1a:	d11f      	bne.n	8002f5c <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f1c:	68e3      	ldr	r3, [r4, #12]
 8002f1e:	220a      	movs	r2, #10
 8002f20:	b1d3      	cbz	r3, 8002f58 <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002f22:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f28:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8002f2a:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8002f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f30:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002f32:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8002f36:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8002f3a:	0212      	lsls	r2, r2, #8
 8002f3c:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002f40:	1e99      	subs	r1, r3, #2
 8002f42:	29fd      	cmp	r1, #253	; 0xfd
 8002f44:	d911      	bls.n	8002f6a <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7fe fa46 	bl	80013e0 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
}
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002f58:	00f3      	lsls	r3, r6, #3
 8002f5a:	e7e3      	b.n	8002f24 <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	fbb0 f0f6 	udiv	r0, r0, r6
 8002f62:	4343      	muls	r3, r0
 8002f64:	e7e1      	b.n	8002f2a <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8002f66:	2200      	movs	r2, #0
 8002f68:	e7ea      	b.n	8002f40 <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	6922      	ldr	r2, [r4, #16]
 8002f6e:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8002f70:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f72:	4313      	orrs	r3, r2
 8002f74:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f76:	68e2      	ldr	r2, [r4, #12]
 8002f78:	68a3      	ldr	r3, [r4, #8]
 8002f7a:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8002f7c:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8002f82:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 8002f86:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f88:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8002f8a:	b289      	uxth	r1, r1
 8002f8c:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f8e:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8002f90:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f92:	d11c      	bne.n	8002fce <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_I2S_Init+0x114>)
 8002f96:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f98:	4912      	ldr	r1, [pc, #72]	; (8002fe4 <HAL_I2S_Init+0x118>)
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <HAL_I2S_Init+0x11c>)
 8002f9c:	4288      	cmp	r0, r1
 8002f9e:	bf18      	it	ne
 8002fa0:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8002fa4:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fa8:	69d1      	ldr	r1, [r2, #28]
 8002faa:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8002fae:	f021 010f 	bic.w	r1, r1, #15
 8002fb2:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002fb4:	f04f 0102 	mov.w	r1, #2
 8002fb8:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002fba:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 8002fbc:	bf0c      	ite	eq
 8002fbe:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8002fc2:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8002fcc:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fce:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002fd0:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fd2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002fd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	bf00      	nop
 8002fdc:	08002fed 	.word	0x08002fed
 8002fe0:	08003129 	.word	0x08003129
 8002fe4:	40003800 	.word	0x40003800
 8002fe8:	40003400 	.word	0x40003400

08002fec <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002fee:	6803      	ldr	r3, [r0, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ff4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ff8:	2a04      	cmp	r2, #4
{
 8002ffa:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ffc:	d13a      	bne.n	8003074 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002ffe:	9a01      	ldr	r2, [sp, #4]
 8003000:	07d1      	lsls	r1, r2, #31
 8003002:	d519      	bpl.n	8003038 <I2S_IRQHandler+0x4c>
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	0652      	lsls	r2, r2, #25
 8003008:	d516      	bpl.n	8003038 <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800300a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800300c:	1c91      	adds	r1, r2, #2
 800300e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8003014:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8003016:	3a01      	subs	r2, #1
 8003018:	b292      	uxth	r2, r2
 800301a:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 800301c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800301e:	b292      	uxth	r2, r2
 8003020:	b952      	cbnz	r2, 8003038 <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003028:	0412      	lsls	r2, r2, #16
 800302a:	0c12      	lsrs	r2, r2, #16
 800302c:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800302e:	2301      	movs	r3, #1
 8003030:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8003034:	f7fe f9cf 	bl	80013d6 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003038:	9b01      	ldr	r3, [sp, #4]
 800303a:	0659      	lsls	r1, r3, #25
 800303c:	d51a      	bpl.n	8003074 <I2S_IRQHandler+0x88>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	0692      	lsls	r2, r2, #26
 8003044:	d516      	bpl.n	8003074 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800304c:	0412      	lsls	r2, r2, #16
 800304e:	0c12      	lsrs	r2, r2, #16
 8003050:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003052:	2200      	movs	r2, #0
 8003054:	9202      	str	r2, [sp, #8]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	9202      	str	r2, [sp, #8]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	9302      	str	r3, [sp, #8]
 800305e:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003060:	2301      	movs	r3, #1
 8003062:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8003066:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800306e:	4620      	mov	r0, r4
 8003070:	f7fe f9b6 	bl	80013e0 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003074:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003078:	2b03      	cmp	r3, #3
 800307a:	d13a      	bne.n	80030f2 <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	079b      	lsls	r3, r3, #30
 8003080:	d51b      	bpl.n	80030ba <I2S_IRQHandler+0xce>
 8003082:	6822      	ldr	r2, [r4, #0]
 8003084:	6853      	ldr	r3, [r2, #4]
 8003086:	0618      	lsls	r0, r3, #24
 8003088:	d517      	bpl.n	80030ba <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800308a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800308c:	1c99      	adds	r1, r3, #2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	6261      	str	r1, [r4, #36]	; 0x24
 8003092:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003094:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003096:	3b01      	subs	r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 800309c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b95b      	cbnz	r3, 80030ba <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030a2:	6853      	ldr	r3, [r2, #4]
 80030a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7fe f979 	bl	80013ac <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030ba:	9b01      	ldr	r3, [sp, #4]
 80030bc:	0719      	lsls	r1, r3, #28
 80030be:	d518      	bpl.n	80030f2 <I2S_IRQHandler+0x106>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	0692      	lsls	r2, r2, #26
 80030c6:	d514      	bpl.n	80030f2 <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030ce:	0412      	lsls	r2, r2, #16
 80030d0:	0c12      	lsrs	r2, r2, #16
 80030d2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030d4:	2200      	movs	r2, #0
 80030d6:	9203      	str	r2, [sp, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	9303      	str	r3, [sp, #12]
 80030dc:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030de:	2301      	movs	r3, #1
 80030e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7fe f977 	bl	80013e0 <HAL_I2S_ErrorCallback>
    }
  }
}
 80030f2:	b004      	add	sp, #16
 80030f4:	bd10      	pop	{r4, pc}

080030f6 <I2S_DMAError>:
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80030f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80030f8:	6802      	ldr	r2, [r0, #0]
{
 80030fa:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80030fc:	6853      	ldr	r3, [r2, #4]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003108:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State= HAL_I2S_STATE_READY;
 800310a:	2301      	movs	r3, #1
 800310c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 8003110:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003112:	f043 0308 	orr.w	r3, r3, #8
 8003116:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8003118:	f7fe f962 	bl	80013e0 <HAL_I2S_ErrorCallback>
 800311c:	bd08      	pop	{r3, pc}

0800311e <HAL_I2S_GetState>:
  return hi2s->State;
 800311e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003122:	4770      	bx	lr

08003124 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s: I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003124:	4770      	bx	lr
	...

08003128 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8003128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800312a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800312c:	4992      	ldr	r1, [pc, #584]	; (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8003132:	4a92      	ldr	r2, [pc, #584]	; (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003134:	428b      	cmp	r3, r1
 8003136:	bf18      	it	ne
 8003138:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 800313c:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800313e:	6891      	ldr	r1, [r2, #8]
 8003140:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8003142:	69d9      	ldr	r1, [r3, #28]
 8003144:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003148:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800314c:	d004      	beq.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800314e:	69d9      	ldr	r1, [r3, #28]
 8003150:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003154:	f040 8097 	bne.w	8003286 <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003158:	9a00      	ldr	r2, [sp, #0]
 800315a:	0792      	lsls	r2, r2, #30
 800315c:	d51d      	bpl.n	800319a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	0610      	lsls	r0, r2, #24
 8003162:	d51a      	bpl.n	800319a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003164:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003166:	1c91      	adds	r1, r2, #2
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	6261      	str	r1, [r4, #36]	; 0x24
 800316c:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 800316e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003170:	3a01      	subs	r2, #1
 8003172:	b292      	uxth	r2, r2
 8003174:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8003176:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003178:	b292      	uxth	r2, r2
 800317a:	b972      	cbnz	r2, 800319a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003182:	0412      	lsls	r2, r2, #16
 8003184:	0c12      	lsrs	r2, r2, #16
 8003186:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8003188:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800318a:	b29b      	uxth	r3, r3
 800318c:	b92b      	cbnz	r3, 800319a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800318e:	2301      	movs	r3, #1
 8003190:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff ffc5 	bl	8003124 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800319a:	9b01      	ldr	r3, [sp, #4]
 800319c:	07d9      	lsls	r1, r3, #31
 800319e:	d522      	bpl.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 80031a0:	4a75      	ldr	r2, [pc, #468]	; (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80031a2:	6821      	ldr	r1, [r4, #0]
 80031a4:	4b75      	ldr	r3, [pc, #468]	; (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80031a6:	4291      	cmp	r1, r2
 80031a8:	bf18      	it	ne
 80031aa:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	0652      	lsls	r2, r2, #25
 80031b2:	d518      	bpl.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80031b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031b6:	1c91      	adds	r1, r2, #2
 80031b8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80031ba:	68d9      	ldr	r1, [r3, #12]
 80031bc:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 80031be:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80031c0:	3a01      	subs	r2, #1
 80031c2:	b292      	uxth	r2, r2
 80031c4:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 80031c6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80031c8:	b292      	uxth	r2, r2
 80031ca:	b962      	cbnz	r2, 80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031d2:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 80031d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	b92b      	cbnz	r3, 80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80031da:	2301      	movs	r3, #1
 80031dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031e0:	4620      	mov	r0, r4
 80031e2:	f7ff ff9f 	bl	8003124 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031e6:	9b01      	ldr	r3, [sp, #4]
 80031e8:	0658      	lsls	r0, r3, #25
 80031ea:	d524      	bpl.n	8003236 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 80031ec:	4962      	ldr	r1, [pc, #392]	; (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	4a62      	ldr	r2, [pc, #392]	; (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80031f2:	428b      	cmp	r3, r1
 80031f4:	bf18      	it	ne
 80031f6:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80031fa:	6851      	ldr	r1, [r2, #4]
 80031fc:	0689      	lsls	r1, r1, #26
 80031fe:	d51a      	bpl.n	8003236 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003200:	6851      	ldr	r1, [r2, #4]
 8003202:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003206:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800320e:	0412      	lsls	r2, r2, #16
 8003210:	0c12      	lsrs	r2, r2, #16
 8003212:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003214:	2200      	movs	r2, #0
 8003216:	9202      	str	r2, [sp, #8]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	9202      	str	r2, [sp, #8]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003222:	2301      	movs	r3, #1
 8003224:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8003228:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003230:	4620      	mov	r0, r4
 8003232:	f7fe f8d5 	bl	80013e0 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003236:	9b00      	ldr	r3, [sp, #0]
 8003238:	071b      	lsls	r3, r3, #28
 800323a:	d522      	bpl.n	8003282 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	0690      	lsls	r0, r2, #26
 8003242:	d51e      	bpl.n	8003282 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003244:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003246:	494c      	ldr	r1, [pc, #304]	; (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800324c:	0412      	lsls	r2, r2, #16
 800324e:	0c12      	lsrs	r2, r2, #16
 8003250:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003252:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003254:	428b      	cmp	r3, r1
 8003256:	bf18      	it	ne
 8003258:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800325c:	6851      	ldr	r1, [r2, #4]
 800325e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003262:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003264:	2200      	movs	r2, #0
 8003266:	9203      	str	r2, [sp, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	9303      	str	r3, [sp, #12]
 800326c:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 800326e:	2301      	movs	r3, #1
 8003270:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8003274:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003276:	f043 0304 	orr.w	r3, r3, #4
 800327a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800327c:	4620      	mov	r0, r4
 800327e:	f7fe f8af 	bl	80013e0 <HAL_I2S_ErrorCallback>
}
 8003282:	b004      	add	sp, #16
 8003284:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003286:	9b01      	ldr	r3, [sp, #4]
 8003288:	0799      	lsls	r1, r3, #30
 800328a:	d51a      	bpl.n	80032c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 800328c:	6853      	ldr	r3, [r2, #4]
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	d517      	bpl.n	80032c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003292:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003294:	1c99      	adds	r1, r3, #2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	6241      	str	r1, [r0, #36]	; 0x24
 800329a:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 800329c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 80032a4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	b95b      	cbnz	r3, 80032c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032aa:	6853      	ldr	r3, [r2, #4]
 80032ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b0:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 80032b2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b923      	cbnz	r3, 80032c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032be:	f7ff ff31 	bl	8003124 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032c2:	9b00      	ldr	r3, [sp, #0]
 80032c4:	07d8      	lsls	r0, r3, #31
 80032c6:	d51e      	bpl.n	8003306 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 80032c8:	6822      	ldr	r2, [r4, #0]
 80032ca:	6853      	ldr	r3, [r2, #4]
 80032cc:	0659      	lsls	r1, r3, #25
 80032ce:	d51a      	bpl.n	8003306 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80032d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032d2:	1c99      	adds	r1, r3, #2
 80032d4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80032d6:	68d1      	ldr	r1, [r2, #12]
 80032d8:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 80032da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80032e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	b973      	cbnz	r3, 8003306 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032e8:	6853      	ldr	r3, [r2, #4]
 80032ea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 80032f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	b92b      	cbnz	r3, 8003306 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003300:	4620      	mov	r0, r4
 8003302:	f7ff ff0f 	bl	8003124 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003306:	9b00      	ldr	r3, [sp, #0]
 8003308:	065a      	lsls	r2, r3, #25
 800330a:	d51d      	bpl.n	8003348 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	6853      	ldr	r3, [r2, #4]
 8003310:	069b      	lsls	r3, r3, #26
 8003312:	d519      	bpl.n	8003348 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003314:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003316:	4918      	ldr	r1, [pc, #96]	; (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003318:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003324:	428a      	cmp	r2, r1
 8003326:	bf18      	it	ne
 8003328:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 800332c:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003334:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003336:	2301      	movs	r3, #1
 8003338:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 800333c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800333e:	f043 0302 	orr.w	r3, r3, #2
 8003342:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003344:	f7fe f84c 	bl	80013e0 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003348:	9b01      	ldr	r3, [sp, #4]
 800334a:	0718      	lsls	r0, r3, #28
 800334c:	d599      	bpl.n	8003282 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800334e:	490a      	ldr	r1, [pc, #40]	; (8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003354:	428a      	cmp	r2, r1
 8003356:	bf18      	it	ne
 8003358:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	0689      	lsls	r1, r1, #26
 8003360:	d58f      	bpl.n	8003282 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8003368:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800336a:	6853      	ldr	r3, [r2, #4]
 800336c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	6053      	str	r3, [r2, #4]
 8003376:	e77a      	b.n	800326e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003378:	40003800 	.word	0x40003800
 800337c:	40003400 	.word	0x40003400

08003380 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003380:	6803      	ldr	r3, [r0, #0]
{
 8003382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003384:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	07d8      	lsls	r0, r3, #31
 8003388:	d43b      	bmi.n	8003402 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	0799      	lsls	r1, r3, #30
 800338e:	f100 8086 	bmi.w	800349e <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	071e      	lsls	r6, r3, #28
 8003396:	f100 80d1 	bmi.w	800353c <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	075d      	lsls	r5, r3, #29
 800339e:	d52a      	bpl.n	80033f6 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	4b8e      	ldr	r3, [pc, #568]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033a6:	4d8f      	ldr	r5, [pc, #572]	; (80035e4 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80033ba:	682b      	ldr	r3, [r5, #0]
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80033c2:	f7fe f87b 	bl	80014bc <HAL_GetTick>
 80033c6:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	05da      	lsls	r2, r3, #23
 80033cc:	f140 80d8 	bpl.w	8003580 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d0:	68a3      	ldr	r3, [r4, #8]
 80033d2:	4d83      	ldr	r5, [pc, #524]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 80da 	bne.w	800358e <HAL_RCC_OscConfig+0x20e>
 80033da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fe f86b 	bl	80014bc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4d7e      	ldr	r5, [pc, #504]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80033e8:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80033f0:	079b      	lsls	r3, r3, #30
 80033f2:	f140 80ed 	bpl.w	80035d0 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f6:	69a2      	ldr	r2, [r4, #24]
 80033f8:	2a00      	cmp	r2, #0
 80033fa:	f040 80f9 	bne.w	80035f0 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80033fe:	2000      	movs	r0, #0
 8003400:	e015      	b.n	800342e <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	4b77      	ldr	r3, [pc, #476]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	f002 020c 	and.w	r2, r2, #12
 800340a:	2a04      	cmp	r2, #4
 800340c:	d007      	beq.n	800341e <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003414:	2a08      	cmp	r2, #8
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	025a      	lsls	r2, r3, #9
 800341c:	d509      	bpl.n	8003432 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341e:	4b70      	ldr	r3, [pc, #448]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	039b      	lsls	r3, r3, #14
 8003424:	d5b1      	bpl.n	800338a <HAL_RCC_OscConfig+0xa>
 8003426:	6863      	ldr	r3, [r4, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ae      	bne.n	800338a <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 800342c:	2001      	movs	r0, #1
}
 800342e:	b003      	add	sp, #12
 8003430:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	4d6a      	ldr	r5, [pc, #424]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343a:	d111      	bne.n	8003460 <HAL_RCC_OscConfig+0xe0>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003444:	f7fe f83a 	bl	80014bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003448:	4d65      	ldr	r5, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800344a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	039f      	lsls	r7, r3, #14
 8003450:	d49b      	bmi.n	800338a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003452:	f7fe f833 	bl	80014bc <HAL_GetTick>
 8003456:	1b80      	subs	r0, r0, r6
 8003458:	2864      	cmp	r0, #100	; 0x64
 800345a:	d9f7      	bls.n	800344c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800345c:	2003      	movs	r0, #3
 800345e:	e7e6      	b.n	800342e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003464:	d104      	bne.n	8003470 <HAL_RCC_OscConfig+0xf0>
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	e7e5      	b.n	800343c <HAL_RCC_OscConfig+0xbc>
 8003470:	682a      	ldr	r2, [r5, #0]
 8003472:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003476:	602a      	str	r2, [r5, #0]
 8003478:	682a      	ldr	r2, [r5, #0]
 800347a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800347e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1df      	bne.n	8003444 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003484:	f7fe f81a 	bl	80014bc <HAL_GetTick>
 8003488:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	682b      	ldr	r3, [r5, #0]
 800348c:	0398      	lsls	r0, r3, #14
 800348e:	f57f af7c 	bpl.w	800338a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003492:	f7fe f813 	bl	80014bc <HAL_GetTick>
 8003496:	1b80      	subs	r0, r0, r6
 8003498:	2864      	cmp	r0, #100	; 0x64
 800349a:	d9f6      	bls.n	800348a <HAL_RCC_OscConfig+0x10a>
 800349c:	e7de      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	f012 0f0c 	tst.w	r2, #12
 80034a6:	d007      	beq.n	80034b8 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ae:	2a08      	cmp	r2, #8
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0259      	lsls	r1, r3, #9
 80034b6:	d413      	bmi.n	80034e0 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b8:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	0792      	lsls	r2, r2, #30
 80034be:	d502      	bpl.n	80034c6 <HAL_RCC_OscConfig+0x146>
 80034c0:	68e2      	ldr	r2, [r4, #12]
 80034c2:	2a01      	cmp	r2, #1
 80034c4:	d1b2      	bne.n	800342c <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	22f8      	movs	r2, #248	; 0xf8
 80034ca:	fa92 f2a2 	rbit	r2, r2
 80034ce:	fab2 f182 	clz	r1, r2
 80034d2:	6922      	ldr	r2, [r4, #16]
 80034d4:	408a      	lsls	r2, r1
 80034d6:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e758      	b.n	8003392 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e0:	68e2      	ldr	r2, [r4, #12]
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x268>)
 80034e4:	b1da      	cbz	r2, 800351e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80034ea:	f7fd ffe7 	bl	80014bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4d3c      	ldr	r5, [pc, #240]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80034f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	682b      	ldr	r3, [r5, #0]
 80034f4:	079b      	lsls	r3, r3, #30
 80034f6:	d50c      	bpl.n	8003512 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	6829      	ldr	r1, [r5, #0]
 80034fa:	23f8      	movs	r3, #248	; 0xf8
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	fab3 f283 	clz	r2, r3
 8003504:	6923      	ldr	r3, [r4, #16]
 8003506:	4093      	lsls	r3, r2
 8003508:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800350c:	4313      	orrs	r3, r2
 800350e:	602b      	str	r3, [r5, #0]
 8003510:	e73f      	b.n	8003392 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003512:	f7fd ffd3 	bl	80014bc <HAL_GetTick>
 8003516:	1b80      	subs	r0, r0, r6
 8003518:	2802      	cmp	r0, #2
 800351a:	d9ea      	bls.n	80034f2 <HAL_RCC_OscConfig+0x172>
 800351c:	e79e      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 800351e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003520:	f7fd ffcc 	bl	80014bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003524:	4d2e      	ldr	r5, [pc, #184]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8003526:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	079f      	lsls	r7, r3, #30
 800352c:	f57f af31 	bpl.w	8003392 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003530:	f7fd ffc4 	bl	80014bc <HAL_GetTick>
 8003534:	1b80      	subs	r0, r0, r6
 8003536:	2802      	cmp	r0, #2
 8003538:	d9f6      	bls.n	8003528 <HAL_RCC_OscConfig+0x1a8>
 800353a:	e78f      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353c:	6962      	ldr	r2, [r4, #20]
 800353e:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x26c>)
 8003540:	b17a      	cbz	r2, 8003562 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003546:	f7fd ffb9 	bl	80014bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	4d25      	ldr	r5, [pc, #148]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 800354c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003550:	0798      	lsls	r0, r3, #30
 8003552:	f53f af22 	bmi.w	800339a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003556:	f7fd ffb1 	bl	80014bc <HAL_GetTick>
 800355a:	1b80      	subs	r0, r0, r6
 800355c:	2802      	cmp	r0, #2
 800355e:	d9f6      	bls.n	800354e <HAL_RCC_OscConfig+0x1ce>
 8003560:	e77c      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8003562:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003564:	f7fd ffaa 	bl	80014bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	4d1d      	ldr	r5, [pc, #116]	; (80035e0 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 800356a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800356e:	0799      	lsls	r1, r3, #30
 8003570:	f57f af13 	bpl.w	800339a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003574:	f7fd ffa2 	bl	80014bc <HAL_GetTick>
 8003578:	1b80      	subs	r0, r0, r6
 800357a:	2802      	cmp	r0, #2
 800357c:	d9f6      	bls.n	800356c <HAL_RCC_OscConfig+0x1ec>
 800357e:	e76d      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7fd ff9c 	bl	80014bc <HAL_GetTick>
 8003584:	1b80      	subs	r0, r0, r6
 8003586:	2802      	cmp	r0, #2
 8003588:	f67f af1e 	bls.w	80033c8 <HAL_RCC_OscConfig+0x48>
 800358c:	e766      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358e:	2b05      	cmp	r3, #5
 8003590:	d104      	bne.n	800359c <HAL_RCC_OscConfig+0x21c>
 8003592:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	672b      	str	r3, [r5, #112]	; 0x70
 800359a:	e71e      	b.n	80033da <HAL_RCC_OscConfig+0x5a>
 800359c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	672a      	str	r2, [r5, #112]	; 0x70
 80035a4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f47f af18 	bne.w	80033e2 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 80035b2:	f7fd ff83 	bl	80014bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80035ba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035be:	0798      	lsls	r0, r3, #30
 80035c0:	f57f af19 	bpl.w	80033f6 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fd ff7a 	bl	80014bc <HAL_GetTick>
 80035c8:	1b80      	subs	r0, r0, r6
 80035ca:	42b8      	cmp	r0, r7
 80035cc:	d9f6      	bls.n	80035bc <HAL_RCC_OscConfig+0x23c>
 80035ce:	e745      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fd ff74 	bl	80014bc <HAL_GetTick>
 80035d4:	1b80      	subs	r0, r0, r6
 80035d6:	42b8      	cmp	r0, r7
 80035d8:	f67f af09 	bls.w	80033ee <HAL_RCC_OscConfig+0x6e>
 80035dc:	e73e      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40007000 	.word	0x40007000
 80035e8:	42470000 	.word	0x42470000
 80035ec:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f0:	4d2b      	ldr	r5, [pc, #172]	; (80036a0 <HAL_RCC_OscConfig+0x320>)
 80035f2:	68ab      	ldr	r3, [r5, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	f43f af17 	beq.w	800342c <HAL_RCC_OscConfig+0xac>
 80035fe:	4e29      	ldr	r6, [pc, #164]	; (80036a4 <HAL_RCC_OscConfig+0x324>)
 8003600:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003602:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003604:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003606:	d13e      	bne.n	8003686 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8003608:	f7fd ff58 	bl	80014bc <HAL_GetTick>
 800360c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	682b      	ldr	r3, [r5, #0]
 8003610:	0199      	lsls	r1, r3, #6
 8003612:	d432      	bmi.n	800367a <HAL_RCC_OscConfig+0x2fa>
 8003614:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003618:	fa97 f7a7 	rbit	r7, r7
 800361c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003620:	fab7 f787 	clz	r7, r7
 8003624:	fa92 f2a2 	rbit	r2, r2
 8003628:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800362c:	fab2 f082 	clz	r0, r2
 8003630:	fa91 f1a1 	rbit	r1, r1
 8003634:	6a22      	ldr	r2, [r4, #32]
 8003636:	69e3      	ldr	r3, [r4, #28]
 8003638:	4313      	orrs	r3, r2
 800363a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800363c:	fa02 f707 	lsl.w	r7, r2, r7
 8003640:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003642:	0852      	lsrs	r2, r2, #1
 8003644:	3a01      	subs	r2, #1
 8003646:	4082      	lsls	r2, r0
 8003648:	433b      	orrs	r3, r7
 800364a:	4313      	orrs	r3, r2
 800364c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4c14      	ldr	r4, [pc, #80]	; (80036a0 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003650:	fab1 f181 	clz	r1, r1
 8003654:	fa02 f101 	lsl.w	r1, r2, r1
 8003658:	430b      	orrs	r3, r1
 800365a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800365c:	2301      	movs	r3, #1
 800365e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003660:	f7fd ff2c 	bl	80014bc <HAL_GetTick>
 8003664:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	019a      	lsls	r2, r3, #6
 800366a:	f53f aec8 	bmi.w	80033fe <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd ff25 	bl	80014bc <HAL_GetTick>
 8003672:	1b40      	subs	r0, r0, r5
 8003674:	2802      	cmp	r0, #2
 8003676:	d9f6      	bls.n	8003666 <HAL_RCC_OscConfig+0x2e6>
 8003678:	e6f0      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd ff1f 	bl	80014bc <HAL_GetTick>
 800367e:	1bc0      	subs	r0, r0, r7
 8003680:	2802      	cmp	r0, #2
 8003682:	d9c4      	bls.n	800360e <HAL_RCC_OscConfig+0x28e>
 8003684:	e6ea      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8003686:	f7fd ff19 	bl	80014bc <HAL_GetTick>
 800368a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	019b      	lsls	r3, r3, #6
 8003690:	f57f aeb5 	bpl.w	80033fe <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003694:	f7fd ff12 	bl	80014bc <HAL_GetTick>
 8003698:	1b00      	subs	r0, r0, r4
 800369a:	2802      	cmp	r0, #2
 800369c:	d9f6      	bls.n	800368c <HAL_RCC_OscConfig+0x30c>
 800369e:	e6dd      	b.n	800345c <HAL_RCC_OscConfig+0xdc>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	42470060 	.word	0x42470060

080036a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_RCC_GetSysClockFreq+0x68>)
 80036aa:	6893      	ldr	r3, [r2, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b04      	cmp	r3, #4
{
 80036b2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x16>
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ba:	4816      	ldr	r0, [pc, #88]	; (8003714 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80036bc:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80036be:	4816      	ldr	r0, [pc, #88]	; (8003718 <HAL_RCC_GetSysClockFreq+0x70>)
 80036c0:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c2:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c4:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80036ce:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80036d2:	6853      	ldr	r3, [r2, #4]
 80036d4:	fa94 f0a4 	rbit	r0, r4
 80036d8:	fab0 f080 	clz	r0, r0
 80036dc:	ea03 0304 	and.w	r3, r3, r4
 80036e0:	fa23 f300 	lsr.w	r3, r3, r0
 80036e4:	bf14      	ite	ne
 80036e6:	480c      	ldrne	r0, [pc, #48]	; (8003718 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80036e8:	480a      	ldreq	r0, [pc, #40]	; (8003714 <HAL_RCC_GetSysClockFreq+0x6c>)
 80036ea:	fbb0 f0f1 	udiv	r0, r0, r1
 80036ee:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_RCC_GetSysClockFreq+0x68>)
 80036f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	fa92 f2a2 	rbit	r2, r2
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003704:	40d3      	lsrs	r3, r2
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800370a:	fbb0 f0f3 	udiv	r0, r0, r3
 800370e:	bd10      	pop	{r4, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_ClockConfig+0x15c>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	f002 020f 	and.w	r2, r2, #15
 8003724:	428a      	cmp	r2, r1
{
 8003726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372a:	4605      	mov	r5, r0
 800372c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800372e:	d330      	bcc.n	8003792 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	682a      	ldr	r2, [r5, #0]
 8003732:	0794      	lsls	r4, r2, #30
 8003734:	d437      	bmi.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	07d0      	lsls	r0, r2, #31
 8003738:	d43d      	bmi.n	80037b6 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800373a:	4b4f      	ldr	r3, [pc, #316]	; (8003878 <HAL_RCC_ClockConfig+0x15c>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f002 020f 	and.w	r2, r2, #15
 8003742:	4296      	cmp	r6, r2
 8003744:	f0c0 8088 	bcc.w	8003858 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	682a      	ldr	r2, [r5, #0]
 800374a:	0751      	lsls	r1, r2, #29
 800374c:	f100 808c 	bmi.w	8003868 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	0713      	lsls	r3, r2, #28
 8003752:	d507      	bpl.n	8003764 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003754:	4a49      	ldr	r2, [pc, #292]	; (800387c <HAL_RCC_ClockConfig+0x160>)
 8003756:	6929      	ldr	r1, [r5, #16]
 8003758:	6893      	ldr	r3, [r2, #8]
 800375a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800375e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003762:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003764:	f7ff ffa0 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003768:	4b44      	ldr	r3, [pc, #272]	; (800387c <HAL_RCC_ClockConfig+0x160>)
 800376a:	22f0      	movs	r2, #240	; 0xf0
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	fa92 f2a2 	rbit	r2, r2
 8003772:	fab2 f282 	clz	r2, r2
 8003776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377a:	40d3      	lsrs	r3, r2
 800377c:	4a40      	ldr	r2, [pc, #256]	; (8003880 <HAL_RCC_ClockConfig+0x164>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	40d8      	lsrs	r0, r3
 8003782:	4b40      	ldr	r3, [pc, #256]	; (8003884 <HAL_RCC_ClockConfig+0x168>)
 8003784:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003786:	200f      	movs	r0, #15
 8003788:	f7fd fe66 	bl	8001458 <HAL_InitTick>
  return HAL_OK;
 800378c:	2000      	movs	r0, #0
}
 800378e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	b2ca      	uxtb	r2, r1
 8003794:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	4299      	cmp	r1, r3
 800379e:	d0c7      	beq.n	8003730 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80037a0:	2001      	movs	r0, #1
 80037a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a6:	4935      	ldr	r1, [pc, #212]	; (800387c <HAL_RCC_ClockConfig+0x160>)
 80037a8:	68a8      	ldr	r0, [r5, #8]
 80037aa:	688b      	ldr	r3, [r1, #8]
 80037ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b0:	4303      	orrs	r3, r0
 80037b2:	608b      	str	r3, [r1, #8]
 80037b4:	e7bf      	b.n	8003736 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	686a      	ldr	r2, [r5, #4]
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <HAL_RCC_ClockConfig+0x160>)
 80037ba:	2a01      	cmp	r2, #1
 80037bc:	d11e      	bne.n	80037fc <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	d0ec      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4c2d      	ldr	r4, [pc, #180]	; (800387c <HAL_RCC_ClockConfig+0x160>)
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80037d2:	f7fd fe73 	bl	80014bc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	686b      	ldr	r3, [r5, #4]
 80037d8:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80037da:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e0:	d116      	bne.n	8003810 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e2:	68a3      	ldr	r3, [r4, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d0a6      	beq.n	800373a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fd fe66 	bl	80014bc <HAL_GetTick>
 80037f0:	1bc0      	subs	r0, r0, r7
 80037f2:	4540      	cmp	r0, r8
 80037f4:	d9f5      	bls.n	80037e2 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 80037f6:	2003      	movs	r0, #3
 80037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80037fc:	1e91      	subs	r1, r2, #2
 80037fe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003802:	d802      	bhi.n	800380a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003804:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003808:	e7dc      	b.n	80037c4 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380a:	f013 0f02 	tst.w	r3, #2
 800380e:	e7d9      	b.n	80037c4 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003810:	2b02      	cmp	r3, #2
 8003812:	d10a      	bne.n	800382a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003814:	68a3      	ldr	r3, [r4, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d08d      	beq.n	800373a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381e:	f7fd fe4d 	bl	80014bc <HAL_GetTick>
 8003822:	1bc0      	subs	r0, r0, r7
 8003824:	4540      	cmp	r0, r8
 8003826:	d9f5      	bls.n	8003814 <HAL_RCC_ClockConfig+0xf8>
 8003828:	e7e5      	b.n	80037f6 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800382a:	2b03      	cmp	r3, #3
 800382c:	d10f      	bne.n	800384e <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800382e:	68a3      	ldr	r3, [r4, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d080      	beq.n	800373a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7fd fe40 	bl	80014bc <HAL_GetTick>
 800383c:	1bc0      	subs	r0, r0, r7
 800383e:	4540      	cmp	r0, r8
 8003840:	d9f5      	bls.n	800382e <HAL_RCC_ClockConfig+0x112>
 8003842:	e7d8      	b.n	80037f6 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fd fe3a 	bl	80014bc <HAL_GetTick>
 8003848:	1bc0      	subs	r0, r0, r7
 800384a:	4540      	cmp	r0, r8
 800384c:	d8d3      	bhi.n	80037f6 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800384e:	68a3      	ldr	r3, [r4, #8]
 8003850:	f013 0f0c 	tst.w	r3, #12
 8003854:	d1f6      	bne.n	8003844 <HAL_RCC_ClockConfig+0x128>
 8003856:	e770      	b.n	800373a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003858:	b2f2      	uxtb	r2, r6
 800385a:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	429e      	cmp	r6, r3
 8003864:	d19c      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x84>
 8003866:	e76f      	b.n	8003748 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_RCC_ClockConfig+0x160>)
 800386a:	68e8      	ldr	r0, [r5, #12]
 800386c:	688b      	ldr	r3, [r1, #8]
 800386e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003872:	4303      	orrs	r3, r0
 8003874:	608b      	str	r3, [r1, #8]
 8003876:	e76b      	b.n	8003750 <HAL_RCC_ClockConfig+0x34>
 8003878:	40023c00 	.word	0x40023c00
 800387c:	40023800 	.word	0x40023800
 8003880:	08007d0c 	.word	0x08007d0c
 8003884:	20000050 	.word	0x20000050

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	fa92 f2a2 	rbit	r2, r2
 8003894:	fab2 f282 	clz	r2, r2
 8003898:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800389c:	40d3      	lsrs	r3, r2
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038a0:	5cd3      	ldrb	r3, [r2, r3]
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80038a4:	6810      	ldr	r0, [r2, #0]
}
 80038a6:	40d8      	lsrs	r0, r3
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08007d1c 	.word	0x08007d1c
 80038b4:	20000050 	.word	0x20000050

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ba:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	fa92 f2a2 	rbit	r2, r2
 80038c4:	fab2 f282 	clz	r2, r2
 80038c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80038cc:	40d3      	lsrs	r3, r2
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80038d4:	6810      	ldr	r0, [r2, #0]
} 
 80038d6:	40d8      	lsrs	r0, r3
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	08007d1c 	.word	0x08007d1c
 80038e4:	20000050 	.word	0x20000050

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038e8:	6803      	ldr	r3, [r0, #0]
 80038ea:	f013 0f05 	tst.w	r3, #5
{
 80038ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038f0:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f4:	6828      	ldr	r0, [r5, #0]
 80038f6:	f010 0002 	ands.w	r0, r0, #2
 80038fa:	d135      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80038fc:	b003      	add	sp, #12
 80038fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003900:	4c47      	ldr	r4, [pc, #284]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003902:	4e48      	ldr	r6, [pc, #288]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003904:	2300      	movs	r3, #0
 8003906:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003908:	f7fd fdd8 	bl	80014bc <HAL_GetTick>
 800390c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800390e:	6833      	ldr	r3, [r6, #0]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	d422      	bmi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003920:	fab3 f183 	clz	r1, r3
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	686b      	ldr	r3, [r5, #4]
 800392a:	408b      	lsls	r3, r1
 800392c:	68a9      	ldr	r1, [r5, #8]
 800392e:	fab2 f282 	clz	r2, r2
 8003932:	fa01 f202 	lsl.w	r2, r1, r2
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800393c:	2301      	movs	r3, #1
 800393e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003940:	f7fd fdbc 	bl	80014bc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003944:	4c37      	ldr	r4, [pc, #220]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    tickstart = HAL_GetTick();
 8003946:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	0118      	lsls	r0, r3, #4
 800394c:	d4d2      	bmi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800394e:	f7fd fdb5 	bl	80014bc <HAL_GetTick>
 8003952:	1b80      	subs	r0, r0, r6
 8003954:	2802      	cmp	r0, #2
 8003956:	d9f7      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003958:	e004      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800395a:	f7fd fdaf 	bl	80014bc <HAL_GetTick>
 800395e:	1bc0      	subs	r0, r0, r7
 8003960:	2802      	cmp	r0, #2
 8003962:	d9d4      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
 8003966:	e7c9      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    PWR->CR |= PWR_CR_DBP;
 800396e:	4c2e      	ldr	r4, [pc, #184]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003972:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800398a:	f7fd fd97 	bl	80014bc <HAL_GetTick>
 800398e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	05d9      	lsls	r1, r3, #23
 8003994:	d51b      	bpl.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003996:	4c23      	ldr	r4, [pc, #140]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003998:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800399a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800399e:	d11c      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a0:	68eb      	ldr	r3, [r5, #12]
 80039a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80039a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039ac:	d134      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80039ae:	6891      	ldr	r1, [r2, #8]
 80039b0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80039b4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80039b8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80039bc:	4301      	orrs	r1, r0
 80039be:	6091      	str	r1, [r2, #8]
 80039c0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80039ca:	2000      	movs	r0, #0
 80039cc:	e796      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fd fd75 	bl	80014bc <HAL_GetTick>
 80039d2:	1b80      	subs	r0, r0, r6
 80039d4:	2802      	cmp	r0, #2
 80039d6:	d9db      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 80039d8:	e7c4      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039da:	68ea      	ldr	r2, [r5, #12]
 80039dc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d0dd      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80039e6:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80039e8:	2101      	movs	r1, #1
 80039ea:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f0:	2100      	movs	r1, #0
 80039f2:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80039f4:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80039f8:	07da      	lsls	r2, r3, #31
 80039fa:	d5d1      	bpl.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        tickstart = HAL_GetTick();
 80039fc:	f7fd fd5e 	bl	80014bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a00:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003a04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003a08:	079b      	lsls	r3, r3, #30
 8003a0a:	d4c9      	bmi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fd56 	bl	80014bc <HAL_GetTick>
 8003a10:	1b80      	subs	r0, r0, r6
 8003a12:	42b8      	cmp	r0, r7
 8003a14:	d9f7      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003a16:	e7a5      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a18:	6891      	ldr	r1, [r2, #8]
 8003a1a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003a1e:	e7ce      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8003a20:	42470068 	.word	0x42470068
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42470e40 	.word	0x42470e40

08003a30 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8003a30:	2303      	movs	r3, #3
  
  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8003a32:	4911      	ldr	r1, [pc, #68]	; (8003a78 <HAL_RCCEx_GetPeriphCLKConfig+0x48>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8003a34:	6003      	str	r3, [r0, #0]
{
 8003a36:	b510      	push	{r4, lr}
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8003a38:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8003a3c:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8003a40:	fa94 f2a4 	rbit	r2, r4
 8003a44:	fab2 f282 	clz	r2, r2
 8003a48:	4023      	ands	r3, r4
 8003a4a:	40d3      	lsrs	r3, r2
 8003a4c:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8003a4e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8003a52:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003a56:	fa92 f2a2 	rbit	r2, r2
 8003a5a:	fab2 f282 	clz	r2, r2
 8003a5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003a62:	40d3      	lsrs	r3, r2
 8003a64:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003a66:	688b      	ldr	r3, [r1, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003a68:	6f0a      	ldr	r2, [r1, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003a6a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003a6e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60c3      	str	r3, [r0, #12]
 8003a76:	bd10      	pop	{r4, pc}
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003a7c:	2801      	cmp	r0, #1
 8003a7e:	d120      	bne.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8003a82:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8003a84:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8003a88:	d004      	beq.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8003a8a:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003a8c:	480f      	ldr	r0, [pc, #60]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8003a8e:	bf18      	it	ne
 8003a90:	2000      	movne	r0, #0
 8003a92:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a94:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a96:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a98:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a9a:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a9c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aa0:	bf4c      	ite	mi
 8003aa2:	4b0b      	ldrmi	r3, [pc, #44]	; (8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aa4:	4b0b      	ldrpl	r3, [pc, #44]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aa6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aaa:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003aae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ab2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8003ab6:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ab8:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8003abc:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8003ac0:	4770      	bx	lr
  uint32_t frequency = 0U;
 8003ac2:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency; 
}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00bb8000 	.word	0x00bb8000
 8003ad0:	007a1200 	.word	0x007a1200
 8003ad4:	00f42400 	.word	0x00f42400

08003ad8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	6803      	ldr	r3, [r0, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003aea:	2000      	movs	r0, #0
 8003aec:	4770      	bx	lr

08003aee <HAL_TIM_OC_DelayElapsedCallback>:
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_IC_CaptureCallback>:
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_TriggerCallback>:
 8003af4:	4770      	bx	lr

08003af6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af6:	6803      	ldr	r3, [r0, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	0791      	lsls	r1, r2, #30
{
 8003afc:	b510      	push	{r4, lr}
 8003afe:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b00:	d50e      	bpl.n	8003b20 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	0792      	lsls	r2, r2, #30
 8003b06:	d50b      	bpl.n	8003b20 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b08:	f06f 0202 	mvn.w	r2, #2
 8003b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b0e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b10:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b12:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b14:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b16:	d077      	beq.n	8003c08 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003b18:	f7ff ffea 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	0750      	lsls	r0, r2, #29
 8003b26:	d510      	bpl.n	8003b4a <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	0751      	lsls	r1, r2, #29
 8003b2c:	d50d      	bpl.n	8003b4a <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b2e:	f06f 0204 	mvn.w	r2, #4
 8003b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b38:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3c:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b40:	d068      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	f7ff ffd5 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	2300      	movs	r3, #0
 8003b48:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	0712      	lsls	r2, r2, #28
 8003b50:	d50f      	bpl.n	8003b72 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	0710      	lsls	r0, r2, #28
 8003b56:	d50c      	bpl.n	8003b72 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b58:	f06f 0208 	mvn.w	r2, #8
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b60:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b62:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b64:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b68:	d05a      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	f7ff ffc1 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	06d2      	lsls	r2, r2, #27
 8003b78:	d510      	bpl.n	8003b9c <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	06d0      	lsls	r0, r2, #27
 8003b7e:	d50d      	bpl.n	8003b9c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b88:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003b90:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b92:	d04b      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b94:	f7ff ffac 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	07d1      	lsls	r1, r2, #31
 8003ba2:	d508      	bpl.n	8003bb6 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	07d2      	lsls	r2, r2, #31
 8003ba8:	d505      	bpl.n	8003bb6 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003baa:	f06f 0201 	mvn.w	r2, #1
 8003bae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7fc fb5d 	bl	8000270 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	0610      	lsls	r0, r2, #24
 8003bbc:	d508      	bpl.n	8003bd0 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	0611      	lsls	r1, r2, #24
 8003bc2:	d505      	bpl.n	8003bd0 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f000 f8b5 	bl	8003d3a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	0652      	lsls	r2, r2, #25
 8003bd6:	d508      	bpl.n	8003bea <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	0650      	lsls	r0, r2, #25
 8003bdc:	d505      	bpl.n	8003bea <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003be2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003be4:	4620      	mov	r0, r4
 8003be6:	f7ff ff85 	bl	8003af4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	0691      	lsls	r1, r2, #26
 8003bf0:	d522      	bpl.n	8003c38 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	0692      	lsls	r2, r2, #26
 8003bf6:	d51f      	bpl.n	8003c38 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bf8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003bfc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bfe:	611a      	str	r2, [r3, #16]
    }
  }
}
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003c04:	f000 b898 	b.w	8003d38 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c08:	f7ff ff71 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7ff ff70 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c12:	e783      	b.n	8003b1c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c14:	f7ff ff6b 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff ff6a 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c1e:	e792      	b.n	8003b46 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c20:	f7ff ff65 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003c24:	4620      	mov	r0, r4
 8003c26:	f7ff ff64 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c2a:	e7a0      	b.n	8003b6e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2c:	f7ff ff5f 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7ff ff5e 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c36:	e7af      	b.n	8003b98 <HAL_TIM_IRQHandler+0xa2>
 8003c38:	bd10      	pop	{r4, pc}
	...

08003c3c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003c3c:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8003c3e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003c40:	4290      	cmp	r0, r2
 8003c42:	d012      	beq.n	8003c6a <TIM_Base_SetConfig+0x2e>
 8003c44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c48:	d00f      	beq.n	8003c6a <TIM_Base_SetConfig+0x2e>
 8003c4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c4e:	4290      	cmp	r0, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_Base_SetConfig+0x2e>
 8003c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c56:	4290      	cmp	r0, r2
 8003c58:	d007      	beq.n	8003c6a <TIM_Base_SetConfig+0x2e>
 8003c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c5e:	4290      	cmp	r0, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_Base_SetConfig+0x2e>
 8003c62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003c66:	4290      	cmp	r0, r2
 8003c68:	d11d      	bne.n	8003ca6 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003c6a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c70:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <TIM_Base_SetConfig+0xbc>)
 8003c74:	4290      	cmp	r0, r2
 8003c76:	d104      	bne.n	8003c82 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c78:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	e028      	b.n	8003cd4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003c82:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c86:	d0f7      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003c88:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <TIM_Base_SetConfig+0xc0>)
 8003c8a:	4290      	cmp	r0, r2
 8003c8c:	d0f4      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c92:	4290      	cmp	r0, r2
 8003c94:	d0f0      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c9a:	4290      	cmp	r0, r2
 8003c9c:	d0ec      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003c9e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003ca2:	4290      	cmp	r0, r2
 8003ca4:	d0e8      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003ca6:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <TIM_Base_SetConfig+0xc4>)
 8003ca8:	4290      	cmp	r0, r2
 8003caa:	d0e5      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003cac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cb0:	4290      	cmp	r0, r2
 8003cb2:	d0e1      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003cb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cb8:	4290      	cmp	r0, r2
 8003cba:	d0dd      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003cbc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003cc0:	4290      	cmp	r0, r2
 8003cc2:	d0d9      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003cc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cc8:	4290      	cmp	r0, r2
 8003cca:	d0d5      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
 8003ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cd0:	4290      	cmp	r0, r2
 8003cd2:	d0d1      	beq.n	8003c78 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8003cd4:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd6:	688b      	ldr	r3, [r1, #8]
 8003cd8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003cda:	680b      	ldr	r3, [r1, #0]
 8003cdc:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <TIM_Base_SetConfig+0xbc>)
 8003ce0:	4298      	cmp	r0, r3
 8003ce2:	d006      	beq.n	8003cf2 <TIM_Base_SetConfig+0xb6>
 8003ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	d002      	beq.n	8003cf2 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cec:	2301      	movs	r3, #1
 8003cee:	6143      	str	r3, [r0, #20]
}
 8003cf0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf2:	690b      	ldr	r3, [r1, #16]
 8003cf4:	6303      	str	r3, [r0, #48]	; 0x30
 8003cf6:	e7f9      	b.n	8003cec <TIM_Base_SetConfig+0xb0>
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40014000 	.word	0x40014000

08003d04 <HAL_TIM_Base_Init>:
{ 
 8003d04:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003d06:	4604      	mov	r4, r0
 8003d08:	b1a0      	cbz	r0, 8003d34 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003d0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d12:	b91b      	cbnz	r3, 8003d1c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003d14:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003d18:	f7fc fc44 	bl	80005a4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	1d21      	adds	r1, r4, #4
 8003d26:	f7ff ff89 	bl	8003c3c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003d30:	2000      	movs	r0, #0
 8003d32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
}
 8003d36:	bd10      	pop	{r4, pc}

08003d38 <HAL_TIMEx_CommutationCallback>:
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d3a:	4770      	bx	lr

08003d3c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	6803      	ldr	r3, [r0, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d44:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	2320      	movs	r3, #32
 8003d50:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003d54:	4770      	bx	lr
	...

08003d58 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003d5c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003d5e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8003d60:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d62:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003d64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003d68:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003d6a:	6133      	str	r3, [r6, #16]
{
 8003d6c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	6883      	ldr	r3, [r0, #8]
 8003d70:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8003d72:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d74:	4303      	orrs	r3, r0
 8003d76:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d78:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d7c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d7e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d82:	430b      	orrs	r3, r1
 8003d84:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003d86:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003d88:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003d8a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8003d90:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d92:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003d96:	6173      	str	r3, [r6, #20]
 8003d98:	4b7a      	ldr	r3, [pc, #488]	; (8003f84 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	d17c      	bne.n	8003e96 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d9c:	429e      	cmp	r6, r3
 8003d9e:	d003      	beq.n	8003da8 <UART_SetConfig+0x50>
 8003da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003da4:	429e      	cmp	r6, r3
 8003da6:	d144      	bne.n	8003e32 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003da8:	f7ff fd86 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003dac:	2519      	movs	r5, #25
 8003dae:	fb05 f300 	mul.w	r3, r5, r0
 8003db2:	6860      	ldr	r0, [r4, #4]
 8003db4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003db8:	0040      	lsls	r0, r0, #1
 8003dba:	fbb3 f3f0 	udiv	r3, r3, r0
 8003dbe:	fbb3 f3f9 	udiv	r3, r3, r9
 8003dc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dc6:	f7ff fd77 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	4368      	muls	r0, r5
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fbb0 f7f3 	udiv	r7, r0, r3
 8003dd4:	f7ff fd70 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	6863      	ldr	r3, [r4, #4]
 8003dda:	4368      	muls	r0, r5
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	fbb3 f3f9 	udiv	r3, r3, r9
 8003de6:	fb09 7313 	mls	r3, r9, r3, r7
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	3332      	adds	r3, #50	; 0x32
 8003dee:	fbb3 f3f9 	udiv	r3, r3, r9
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003df8:	f7ff fd5e 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	6862      	ldr	r2, [r4, #4]
 8003dfe:	4368      	muls	r0, r5
 8003e00:	0052      	lsls	r2, r2, #1
 8003e02:	fbb0 faf2 	udiv	sl, r0, r2
 8003e06:	f7ff fd57 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	4368      	muls	r0, r5
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e14:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e18:	fb09 a313 	mls	r3, r9, r3, sl
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	3332      	adds	r3, #50	; 0x32
 8003e20:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e2a:	443b      	add	r3, r7
 8003e2c:	60b3      	str	r3, [r6, #8]
 8003e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e32:	f7ff fd29 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003e36:	2519      	movs	r5, #25
 8003e38:	fb05 f300 	mul.w	r3, r5, r0
 8003e3c:	6860      	ldr	r0, [r4, #4]
 8003e3e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003e42:	0040      	lsls	r0, r0, #1
 8003e44:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e48:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e50:	f7ff fd1a 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	4368      	muls	r0, r5
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fbb0 f7f3 	udiv	r7, r0, r3
 8003e5e:	f7ff fd13 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003e62:	6863      	ldr	r3, [r4, #4]
 8003e64:	4368      	muls	r0, r5
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e70:	fb09 7313 	mls	r3, r9, r3, r7
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	3332      	adds	r3, #50	; 0x32
 8003e78:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003e82:	f7ff fd01 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003e86:	6862      	ldr	r2, [r4, #4]
 8003e88:	4368      	muls	r0, r5
 8003e8a:	0052      	lsls	r2, r2, #1
 8003e8c:	fbb0 faf2 	udiv	sl, r0, r2
 8003e90:	f7ff fcfa 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003e94:	e7b9      	b.n	8003e0a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e96:	429e      	cmp	r6, r3
 8003e98:	d002      	beq.n	8003ea0 <UART_SetConfig+0x148>
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <UART_SetConfig+0x230>)
 8003e9c:	429e      	cmp	r6, r3
 8003e9e:	d140      	bne.n	8003f22 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ea0:	f7ff fd0a 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	6867      	ldr	r7, [r4, #4]
 8003ea6:	2519      	movs	r5, #25
 8003ea8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003eac:	fb05 f300 	mul.w	r3, r5, r0
 8003eb0:	00bf      	lsls	r7, r7, #2
 8003eb2:	fbb3 f3f7 	udiv	r3, r3, r7
 8003eb6:	fbb3 f3f9 	udiv	r3, r3, r9
 8003eba:	011f      	lsls	r7, r3, #4
 8003ebc:	f7ff fcfc 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	4368      	muls	r0, r5
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	fbb0 f8f3 	udiv	r8, r0, r3
 8003eca:	f7ff fcf5 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	4368      	muls	r0, r5
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed8:	fbb3 f3f9 	udiv	r3, r3, r9
 8003edc:	fb09 8313 	mls	r3, r9, r3, r8
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	; 0x32
 8003ee4:	fbb3 f3f9 	udiv	r3, r3, r9
 8003ee8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003eec:	f7ff fce4 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003ef0:	6862      	ldr	r2, [r4, #4]
 8003ef2:	4368      	muls	r0, r5
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	fbb0 faf2 	udiv	sl, r0, r2
 8003efa:	f7ff fcdd 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003efe:	6863      	ldr	r3, [r4, #4]
 8003f00:	4368      	muls	r0, r5
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f08:	fbb3 f3f9 	udiv	r3, r3, r9
 8003f0c:	fb09 a313 	mls	r3, r9, r3, sl
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	3332      	adds	r3, #50	; 0x32
 8003f14:	fbb3 f3f9 	udiv	r3, r3, r9
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	ea43 0308 	orr.w	r3, r3, r8
 8003f20:	e783      	b.n	8003e2a <UART_SetConfig+0xd2>
 8003f22:	f7ff fcb1 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003f26:	6867      	ldr	r7, [r4, #4]
 8003f28:	2519      	movs	r5, #25
 8003f2a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003f2e:	fb05 f300 	mul.w	r3, r5, r0
 8003f32:	00bf      	lsls	r7, r7, #2
 8003f34:	fbb3 f3f7 	udiv	r3, r3, r7
 8003f38:	fbb3 f3f9 	udiv	r3, r3, r9
 8003f3c:	011f      	lsls	r7, r3, #4
 8003f3e:	f7ff fca3 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003f42:	6863      	ldr	r3, [r4, #4]
 8003f44:	4368      	muls	r0, r5
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	fbb0 f8f3 	udiv	r8, r0, r3
 8003f4c:	f7ff fc9c 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003f50:	6863      	ldr	r3, [r4, #4]
 8003f52:	4368      	muls	r0, r5
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8003f5e:	fb09 8313 	mls	r3, r9, r3, r8
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	3332      	adds	r3, #50	; 0x32
 8003f66:	fbb3 f3f9 	udiv	r3, r3, r9
 8003f6a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003f6e:	f7ff fc8b 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003f72:	6862      	ldr	r2, [r4, #4]
 8003f74:	4368      	muls	r0, r5
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	fbb0 faf2 	udiv	sl, r0, r2
 8003f7c:	f7ff fc84 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8003f80:	e7bd      	b.n	8003efe <UART_SetConfig+0x1a6>
 8003f82:	bf00      	nop
 8003f84:	40011000 	.word	0x40011000
 8003f88:	40011400 	.word	0x40011400

08003f8c <HAL_UART_Init>:
{
 8003f8c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003f8e:	4604      	mov	r4, r0
 8003f90:	b340      	cbz	r0, 8003fe4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003f92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f9a:	b91b      	cbnz	r3, 8003fa4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003f9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003fa0:	f7fc fabc 	bl	800051c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003fa4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fa6:	2324      	movs	r3, #36	; 0x24
 8003fa8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003fac:	68d3      	ldr	r3, [r2, #12]
 8003fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f7ff fecf 	bl	8003d58 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fca:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003fd6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003fda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003fde:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003fe2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003fe4:	2001      	movs	r0, #1
}
 8003fe6:	bd10      	pop	{r4, pc}

08003fe8 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8003fe8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d118      	bne.n	8004022 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL ) || (Size == 0)) 
 8003ff0:	b1a9      	cbz	r1, 800401e <HAL_UART_Transmit_IT+0x36>
 8003ff2:	b1a2      	cbz	r2, 800401e <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8003ff4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d012      	beq.n	8004022 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8003ffc:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 8003ffe:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004000:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004002:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004004:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004008:	2221      	movs	r2, #33	; 0x21
 800400a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800400e:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8004010:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004018:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800401a:	4618      	mov	r0, r3
 800401c:	4770      	bx	lr
      return HAL_ERROR;
 800401e:	2001      	movs	r0, #1
 8004020:	4770      	bx	lr
    return HAL_BUSY;   
 8004022:	2002      	movs	r0, #2
}
 8004024:	4770      	bx	lr

08004026 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8004026:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800402a:	2b20      	cmp	r3, #32
 800402c:	d11c      	bne.n	8004068 <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 800402e:	b1c9      	cbz	r1, 8004064 <HAL_UART_Receive_IT+0x3e>
 8004030:	b1c2      	cbz	r2, 8004064 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8004032:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004036:	2b01      	cmp	r3, #1
 8004038:	d016      	beq.n	8004068 <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 800403a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800403c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004040:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004044:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800404a:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 800404e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	f041 0101 	orr.w	r1, r1, #1
 8004056:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004058:	68d1      	ldr	r1, [r2, #12]
 800405a:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800405e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8004060:	4618      	mov	r0, r3
 8004062:	4770      	bx	lr
      return HAL_ERROR;
 8004064:	2001      	movs	r0, #1
 8004066:	4770      	bx	lr
    return HAL_BUSY; 
 8004068:	2002      	movs	r0, #2
}
 800406a:	4770      	bx	lr

0800406c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800406c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004070:	2b22      	cmp	r3, #34	; 0x22
{
 8004072:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004074:	d132      	bne.n	80040dc <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004076:	6883      	ldr	r3, [r0, #8]
 8004078:	6901      	ldr	r1, [r0, #16]
 800407a:	6802      	ldr	r2, [r0, #0]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004080:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004082:	d11f      	bne.n	80040c4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004084:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004086:	b9c9      	cbnz	r1, 80040bc <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800408c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8004090:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8004092:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8004094:	3c01      	subs	r4, #1
 8004096:	b2a4      	uxth	r4, r4
 8004098:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800409a:	b96c      	cbnz	r4, 80040b8 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800409c:	6803      	ldr	r3, [r0, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040a4:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80040ae:	2320      	movs	r3, #32
 80040b0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80040b4:	f7fc f8ec 	bl	8000290 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80040b8:	2000      	movs	r0, #0
}
 80040ba:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	f823 2b01 	strh.w	r2, [r3], #1
 80040c2:	e7e5      	b.n	8004090 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80040c4:	b921      	cbnz	r1, 80040d0 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c6:	1c59      	adds	r1, r3, #1
 80040c8:	6852      	ldr	r2, [r2, #4]
 80040ca:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e7e0      	b.n	8004092 <UART_Receive_IT+0x26>
 80040d0:	6852      	ldr	r2, [r2, #4]
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	6281      	str	r1, [r0, #40]	; 0x28
 80040d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040da:	e7f7      	b.n	80040cc <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80040dc:	2002      	movs	r0, #2
 80040de:	bd10      	pop	{r4, pc}

080040e0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040e0:	6803      	ldr	r3, [r0, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e4:	68d9      	ldr	r1, [r3, #12]
{
 80040e6:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80040e8:	0716      	lsls	r6, r2, #28
{
 80040ea:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040ec:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80040ee:	d107      	bne.n	8004100 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f0:	0696      	lsls	r6, r2, #26
 80040f2:	d55a      	bpl.n	80041aa <HAL_UART_IRQHandler+0xca>
 80040f4:	068d      	lsls	r5, r1, #26
 80040f6:	d558      	bpl.n	80041aa <HAL_UART_IRQHandler+0xca>
}
 80040f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80040fc:	f7ff bfb6 	b.w	800406c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004100:	f015 0501 	ands.w	r5, r5, #1
 8004104:	d102      	bne.n	800410c <HAL_UART_IRQHandler+0x2c>
 8004106:	f411 7f90 	tst.w	r1, #288	; 0x120
 800410a:	d04e      	beq.n	80041aa <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800410c:	07d3      	lsls	r3, r2, #31
 800410e:	d505      	bpl.n	800411c <HAL_UART_IRQHandler+0x3c>
 8004110:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004112:	bf42      	ittt	mi
 8004114:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8004116:	f043 0301 	orrmi.w	r3, r3, #1
 800411a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800411c:	0750      	lsls	r0, r2, #29
 800411e:	d504      	bpl.n	800412a <HAL_UART_IRQHandler+0x4a>
 8004120:	b11d      	cbz	r5, 800412a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004122:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800412a:	0793      	lsls	r3, r2, #30
 800412c:	d504      	bpl.n	8004138 <HAL_UART_IRQHandler+0x58>
 800412e:	b11d      	cbz	r5, 8004138 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004138:	0716      	lsls	r6, r2, #28
 800413a:	d504      	bpl.n	8004146 <HAL_UART_IRQHandler+0x66>
 800413c:	b11d      	cbz	r5, 8004146 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800413e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004140:	f043 0308 	orr.w	r3, r3, #8
 8004144:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d066      	beq.n	800421a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800414c:	0695      	lsls	r5, r2, #26
 800414e:	d504      	bpl.n	800415a <HAL_UART_IRQHandler+0x7a>
 8004150:	0688      	lsls	r0, r1, #26
 8004152:	d502      	bpl.n	800415a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8004154:	4620      	mov	r0, r4
 8004156:	f7ff ff89 	bl	800406c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800415e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004160:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8004162:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004164:	d402      	bmi.n	800416c <HAL_UART_IRQHandler+0x8c>
 8004166:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800416a:	d01a      	beq.n	80041a2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800416c:	f7ff fde6 	bl	8003d3c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	0652      	lsls	r2, r2, #25
 8004176:	d510      	bpl.n	800419a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004178:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800417a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004180:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8004182:	b150      	cbz	r0, 800419a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_UART_IRQHandler+0x13c>)
 8004186:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004188:	f7fd fb55 	bl	8001836 <HAL_DMA_Abort_IT>
 800418c:	2800      	cmp	r0, #0
 800418e:	d044      	beq.n	800421a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004190:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004196:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004198:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800419a:	4620      	mov	r0, r4
 800419c:	f7fc f9ba 	bl	8000514 <HAL_UART_ErrorCallback>
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80041a2:	f7fc f9b7 	bl	8000514 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80041a8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041aa:	0616      	lsls	r6, r2, #24
 80041ac:	d527      	bpl.n	80041fe <HAL_UART_IRQHandler+0x11e>
 80041ae:	060d      	lsls	r5, r1, #24
 80041b0:	d525      	bpl.n	80041fe <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80041b6:	2a21      	cmp	r2, #33	; 0x21
 80041b8:	d12f      	bne.n	800421a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041ba:	68a2      	ldr	r2, [r4, #8]
 80041bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80041c0:	6a22      	ldr	r2, [r4, #32]
 80041c2:	d117      	bne.n	80041f4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041c4:	8811      	ldrh	r1, [r2, #0]
 80041c6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80041ca:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80041cc:	6921      	ldr	r1, [r4, #16]
 80041ce:	b979      	cbnz	r1, 80041f0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80041d0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80041d2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80041d4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80041d6:	3a01      	subs	r2, #1
 80041d8:	b292      	uxth	r2, r2
 80041da:	84e2      	strh	r2, [r4, #38]	; 0x26
 80041dc:	b9ea      	cbnz	r2, 800421a <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e4:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80041f0:	3201      	adds	r2, #1
 80041f2:	e7ee      	b.n	80041d2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041f4:	1c51      	adds	r1, r2, #1
 80041f6:	6221      	str	r1, [r4, #32]
 80041f8:	7812      	ldrb	r2, [r2, #0]
 80041fa:	605a      	str	r2, [r3, #4]
 80041fc:	e7ea      	b.n	80041d4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041fe:	0650      	lsls	r0, r2, #25
 8004200:	d50b      	bpl.n	800421a <HAL_UART_IRQHandler+0x13a>
 8004202:	064a      	lsls	r2, r1, #25
 8004204:	d509      	bpl.n	800421a <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800420e:	2320      	movs	r3, #32
 8004210:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004214:	4620      	mov	r0, r4
 8004216:	f7fc f835 	bl	8000284 <HAL_UART_TxCpltCallback>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	08004221 	.word	0x08004221

08004220 <UART_DMAAbortOnError>:
{
 8004220:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004222:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8004228:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800422a:	f7fc f973 	bl	8000514 <HAL_UART_ErrorCallback>
 800422e:	bd08      	pop	{r3, pc}

08004230 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004230:	b084      	sub	sp, #16
 8004232:	b538      	push	{r3, r4, r5, lr}
 8004234:	ad05      	add	r5, sp, #20
 8004236:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800423a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800423c:	2b01      	cmp	r3, #1
{
 800423e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004240:	d126      	bne.n	8004290 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004242:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004248:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800424a:	68c3      	ldr	r3, [r0, #12]
 800424c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004254:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004256:	68c3      	ldr	r3, [r0, #12]
 8004258:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800425c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800425e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004260:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004262:	bf02      	ittt	eq
 8004264:	68c3      	ldreq	r3, [r0, #12]
 8004266:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800426a:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 800426c:	f000 f88a 	bl	8004384 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8004270:	9b08      	ldr	r3, [sp, #32]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	f043 0306 	orr.w	r3, r3, #6
 800427c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800427e:	68a3      	ldr	r3, [r4, #8]
 8004280:	f043 0320 	orr.w	r3, r3, #32
 8004284:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8004286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800428a:	2000      	movs	r0, #0
 800428c:	b004      	add	sp, #16
 800428e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004290:	68c3      	ldr	r3, [r0, #12]
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8004298:	f000 f874 	bl	8004384 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800429c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80042a2:	e7e5      	b.n	8004270 <USB_CoreInit+0x40>

080042a4 <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042a4:	6883      	ldr	r3, [r0, #8]
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80042ac:	2000      	movs	r0, #0
 80042ae:	4770      	bx	lr

080042b0 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042b0:	6883      	ldr	r3, [r0, #8]
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80042b8:	2000      	movs	r0, #0
 80042ba:	4770      	bx	lr

080042bc <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80042bc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80042be:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80042c0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80042c2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042c6:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80042c8:	d108      	bne.n	80042dc <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80042ca:	68c3      	ldr	r3, [r0, #12]
 80042cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d0:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80042d2:	2032      	movs	r0, #50	; 0x32
 80042d4:	f7fd f8f8 	bl	80014c8 <HAL_Delay>
  
  return HAL_OK;
}
 80042d8:	2000      	movs	r0, #0
 80042da:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80042dc:	2900      	cmp	r1, #0
 80042de:	d1f8      	bne.n	80042d2 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80042e0:	68c3      	ldr	r3, [r0, #12]
 80042e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042e6:	60c3      	str	r3, [r0, #12]
 80042e8:	e7f3      	b.n	80042d2 <USB_SetCurrentMode+0x16>
	...

080042ec <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80042ec:	0189      	lsls	r1, r1, #6
 80042ee:	f041 0120 	orr.w	r1, r1, #32
 80042f2:	4a06      	ldr	r2, [pc, #24]	; (800430c <USB_FlushTxFifo+0x20>)
 80042f4:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80042f6:	3a01      	subs	r2, #1
 80042f8:	d005      	beq.n	8004306 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042fa:	6903      	ldr	r3, [r0, #16]
 80042fc:	f013 0320 	ands.w	r3, r3, #32
 8004300:	d1f9      	bne.n	80042f6 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8004302:	4618      	mov	r0, r3
 8004304:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	00030d41 	.word	0x00030d41

08004310 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004310:	2310      	movs	r3, #16
 8004312:	4a06      	ldr	r2, [pc, #24]	; (800432c <USB_FlushRxFifo+0x1c>)
 8004314:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8004316:	3a01      	subs	r2, #1
 8004318:	d005      	beq.n	8004326 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800431a:	6903      	ldr	r3, [r0, #16]
 800431c:	f013 0310 	ands.w	r3, r3, #16
 8004320:	d1f9      	bne.n	8004316 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8004322:	4618      	mov	r0, r3
 8004324:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004326:	2003      	movs	r0, #3
}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	00030d41 	.word	0x00030d41

08004330 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004330:	b510      	push	{r4, lr}
 8004332:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8004336:	b94c      	cbnz	r4, 800434c <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8004338:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800433a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8004346:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8004348:	4299      	cmp	r1, r3
 800434a:	d101      	bne.n	8004350 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 800434c:	2000      	movs	r0, #0
 800434e:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004350:	f851 0b04 	ldr.w	r0, [r1], #4
 8004354:	6010      	str	r0, [r2, #0]
 8004356:	e7f7      	b.n	8004348 <USB_WritePacket+0x18>

08004358 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8004358:	3203      	adds	r2, #3
 800435a:	f022 0203 	bic.w	r2, r2, #3
 800435e:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8004360:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8004364:	4291      	cmp	r1, r2
 8004366:	d101      	bne.n	800436c <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8004368:	4608      	mov	r0, r1
 800436a:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800436c:	6803      	ldr	r3, [r0, #0]
 800436e:	f841 3b04 	str.w	r3, [r1], #4
 8004372:	e7f7      	b.n	8004364 <USB_ReadPacket+0xc>

08004374 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8004374:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8004376:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8004378:	4010      	ands	r0, r2
 800437a:	4770      	bx	lr

0800437c <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 800437c:	6940      	ldr	r0, [r0, #20]
}
 800437e:	f000 0001 	and.w	r0, r0, #1
 8004382:	4770      	bx	lr

08004384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004384:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004386:	3b01      	subs	r3, #1
 8004388:	d101      	bne.n	800438e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800438a:	2003      	movs	r0, #3
 800438c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800438e:	6902      	ldr	r2, [r0, #16]
 8004390:	2a00      	cmp	r2, #0
 8004392:	daf8      	bge.n	8004386 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004394:	6903      	ldr	r3, [r0, #16]
 8004396:	4a06      	ldr	r2, [pc, #24]	; (80043b0 <USB_CoreReset+0x2c>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800439e:	3a01      	subs	r2, #1
 80043a0:	d0f3      	beq.n	800438a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043a2:	6903      	ldr	r3, [r0, #16]
 80043a4:	f013 0301 	ands.w	r3, r3, #1
 80043a8:	d1f9      	bne.n	800439e <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80043aa:	4618      	mov	r0, r3
}
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	00030d41 	.word	0x00030d41

080043b4 <USB_HostInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043b4:	b084      	sub	sp, #16
 80043b6:	b538      	push	{r3, r4, r5, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	a805      	add	r0, sp, #20
 80043bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 80043c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043cc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 80043ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043d0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80043d4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043dc:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80043de:	9b07      	ldr	r3, [sp, #28]
 80043e0:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80043e2:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80043e6:	d13c      	bne.n	8004462 <USB_HostInit+0xae>
 80043e8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80043ec:	d039      	beq.n	8004462 <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80043f6:	2110      	movs	r1, #16
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff ff77 	bl	80042ec <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80043fe:	4620      	mov	r0, r4
 8004400:	f7ff ff86 	bl	8004310 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	9906      	ldr	r1, [sp, #24]
 8004408:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8004410:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8004412:	428b      	cmp	r3, r1
 8004414:	d12a      	bne.n	800446c <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8004416:	2101      	movs	r1, #1
 8004418:	4620      	mov	r0, r4
 800441a:	f000 f873 	bl	8004504 <USB_DriveVbus>
  
  HAL_Delay(200U);
 800441e:	20c8      	movs	r0, #200	; 0xc8
 8004420:	f7fd f852 	bl	80014c8 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8004428:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 800442c:	f04f 33ff 	mov.w	r3, #4294967295
 8004430:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8004432:	d120      	bne.n	8004476 <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8004438:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800443c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800443e:	4b13      	ldr	r3, [pc, #76]	; (800448c <USB_HostInit+0xd8>)
 8004440:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8004444:	9b08      	ldr	r3, [sp, #32]
 8004446:	b91b      	cbnz	r3, 8004450 <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8004448:	69a3      	ldr	r3, [r4, #24]
 800444a:	f043 0310 	orr.w	r3, r3, #16
 800444e:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8004450:	69a2      	ldr	r2, [r4, #24]
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <USB_HostInit+0xdc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8004458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800445c:	2000      	movs	r0, #0
 800445e:	b004      	add	sp, #16
 8004460:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8004462:	f023 0304 	bic.w	r3, r3, #4
 8004466:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800446a:	e7c4      	b.n	80043f6 <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800446c:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800446e:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8004470:	60d5      	str	r5, [r2, #12]
 8004472:	3220      	adds	r2, #32
 8004474:	e7cd      	b.n	8004412 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 8004476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800447a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 800447c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8004480:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <USB_HostInit+0xe0>)
 8004484:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004488:	e7dc      	b.n	8004444 <USB_HostInit+0x90>
 800448a:	bf00      	nop
 800448c:	004000e0 	.word	0x004000e0
 8004490:	a3200008 	.word	0xa3200008
 8004494:	00e00300 	.word	0x00e00300

08004498 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004498:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800449c:	f023 0303 	bic.w	r3, r3, #3
{
 80044a0:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80044a2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80044a6:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80044aa:	f001 0303 	and.w	r3, r1, #3
 80044ae:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 80044b0:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80044b2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80044b6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 80044ba:	d104      	bne.n	80044c6 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80044bc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80044c0:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 80044c2:	2000      	movs	r0, #0
 80044c4:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 80044c6:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 80044c8:	bf04      	itt	eq
 80044ca:	f241 7370 	movweq	r3, #6000	; 0x1770
 80044ce:	6053      	streq	r3, [r2, #4]
 80044d0:	e7f7      	b.n	80044c2 <USB_InitFSLSPClkSel+0x2a>

080044d2 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80044d2:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80044d4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80044d8:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80044da:	9b01      	ldr	r3, [sp, #4]
 80044dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044e0:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 80044e2:	9b01      	ldr	r3, [sp, #4]
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80044e8:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 80044ea:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 80044ee:	200a      	movs	r0, #10
 80044f0:	f7fc ffea 	bl	80014c8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80044f4:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 80044f6:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80044f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044fc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8004500:	b002      	add	sp, #8
 8004502:	bd10      	pop	{r4, pc}

08004504 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004504:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8004506:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800450a:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800450c:	9b01      	ldr	r3, [sp, #4]
 800450e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004512:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004514:	9b01      	ldr	r3, [sp, #4]
 8004516:	04da      	lsls	r2, r3, #19
 8004518:	d406      	bmi.n	8004528 <USB_DriveVbus+0x24>
 800451a:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 800451c:	bf02      	ittt	eq
 800451e:	9b01      	ldreq	r3, [sp, #4]
 8004520:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004524:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004528:	9b01      	ldr	r3, [sp, #4]
 800452a:	04db      	lsls	r3, r3, #19
 800452c:	d505      	bpl.n	800453a <USB_DriveVbus+0x36>
 800452e:	b921      	cbnz	r1, 800453a <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8004530:	9b01      	ldr	r3, [sp, #4]
 8004532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004536:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 800453a:	2000      	movs	r0, #0
 800453c:	b002      	add	sp, #8
 800453e:	4770      	bx	lr

08004540 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004542:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004546:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8004548:	9801      	ldr	r0, [sp, #4]
}
 800454a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800454e:	b002      	add	sp, #8
 8004550:	4770      	bx	lr

08004552 <USB_GetCurrentFrame>:
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004552:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004556:	6880      	ldr	r0, [r0, #8]
}
 8004558:	b280      	uxth	r0, r0
 800455a:	4770      	bx	lr

0800455c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800455c:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800455e:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 8004562:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 8004566:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800456a:	f04f 36ff 	mov.w	r6, #4294967295
 800456e:	60a6      	str	r6, [r4, #8]
 8004570:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8004572:	2d03      	cmp	r5, #3
 8004574:	d814      	bhi.n	80045a0 <USB_HC_Init+0x44>
 8004576:	e8df f005 	tbb	[pc, r5]
 800457a:	5302      	.short	0x5302
 800457c:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800457e:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 8004582:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004584:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8004586:	da04      	bge.n	8004592 <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004588:	68e6      	ldr	r6, [r4, #12]
 800458a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800458e:	60e6      	str	r6, [r4, #12]
 8004590:	e006      	b.n	80045a0 <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 8004592:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8004596:	d003      	beq.n	80045a0 <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004598:	68e6      	ldr	r6, [r4, #12]
 800459a:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 800459e:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80045a0:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 80045a4:	2601      	movs	r6, #1
 80045a6:	fa06 f101 	lsl.w	r1, r6, r1
 80045aa:	ea41 010c 	orr.w	r1, r1, ip
 80045ae:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80045b2:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80045b4:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80045b6:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80045b8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80045bc:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80045c0:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80045c4:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80045c6:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80045c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80045cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80045d0:	2f00      	cmp	r7, #0
 80045d2:	bfb4      	ite	lt
 80045d4:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 80045d8:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80045da:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80045de:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80045e0:	ea4f 4385 	mov.w	r3, r5, lsl #18
 80045e4:	ea42 0201 	orr.w	r2, r2, r1
 80045e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80045ec:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80045f0:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80045f4:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80045f8:	bf0c      	ite	eq
 80045fa:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 80045fe:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004600:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004602:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8004604:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004606:	bf02      	ittt	eq
 8004608:	6823      	ldreq	r3, [r4, #0]
 800460a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800460e:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 8004610:	2000      	movs	r0, #0
 8004612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004614:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 8004618:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800461a:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 800461c:	dac0      	bge.n	80045a0 <USB_HC_Init+0x44>
 800461e:	e7b3      	b.n	8004588 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004620:	f240 2625 	movw	r6, #549	; 0x225
 8004624:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8004626:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8004628:	bfbe      	ittt	lt
 800462a:	68e6      	ldrlt	r6, [r4, #12]
 800462c:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 8004630:	60e6      	strlt	r6, [r4, #12]
 8004632:	e7b5      	b.n	80045a0 <USB_HC_Init+0x44>

08004634 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8004642:	2300      	movs	r3, #0
 8004644:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8004646:	2300      	movs	r3, #0
 8004648:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 800464e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004652:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800465e:	d02b      	beq.n	80046b8 <USB_HC_StartXfer+0x84>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	791b      	ldrb	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d127      	bne.n	80046b8 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <USB_HC_StartXfer+0x52>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	795b      	ldrb	r3, [r3, #5]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d107      	bne.n	8004686 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	4619      	mov	r1, r3
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fa0f 	bl	8004aa0 <USB_DoPing>
      return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e10d      	b.n	80048a2 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d115      	bne.n	80046b8 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	4619      	mov	r1, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80046b0:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d019      	beq.n	80046f4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	8912      	ldrh	r2, [r2, #8]
 80046c8:	4413      	add	r3, r2
 80046ca:	3b01      	subs	r3, #1
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	8912      	ldrh	r2, [r2, #8]
 80046d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046d4:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80046d6:	8bfa      	ldrh	r2, [r7, #30]
 80046d8:	8b3b      	ldrh	r3, [r7, #24]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80046de:	8b3b      	ldrh	r3, [r7, #24]
 80046e0:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80046e2:	8bfb      	ldrh	r3, [r7, #30]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	8912      	ldrh	r2, [r2, #8]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	611a      	str	r2, [r3, #16]
 80046f2:	e001      	b.n	80046f8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80046f4:	2301      	movs	r3, #1
 80046f6:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	78db      	ldrb	r3, [r3, #3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8004700:	8bfb      	ldrh	r3, [r7, #30]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	8912      	ldrh	r2, [r2, #8]
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471e:	4619      	mov	r1, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004728:	8bfb      	ldrh	r3, [r7, #30]
 800472a:	04db      	lsls	r3, r3, #19
 800472c:	4618      	mov	r0, r3
 800472e:	4b5f      	ldr	r3, [pc, #380]	; (80048ac <USB_HC_StartXfer+0x278>)
 8004730:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004732:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	7a9b      	ldrb	r3, [r3, #10]
 8004738:	075b      	lsls	r3, r3, #29
 800473a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800473e:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004740:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	461a      	mov	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004784:	4619      	mov	r1, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800479a:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047aa:	4619      	mov	r1, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	7f7a      	ldrb	r2, [r7, #29]
 80047be:	0752      	lsls	r2, r2, #29
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047dc:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e4:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d14f      	bne.n	80048a0 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	78db      	ldrb	r3, [r3, #3]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d14b      	bne.n	80048a0 <USB_HC_StartXfer+0x26c>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d047      	beq.n	80048a0 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	79db      	ldrb	r3, [r3, #7]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d831      	bhi.n	800487c <USB_HC_StartXfer+0x248>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <USB_HC_StartXfer+0x1ec>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004831 	.word	0x08004831
 8004824:	08004855 	.word	0x08004855
 8004828:	08004831 	.word	0x08004831
 800482c:	08004855 	.word	0x08004855
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	3303      	adds	r3, #3
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 800483a:	8b7a      	ldrh	r2, [r7, #26]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	b29b      	uxth	r3, r3
 8004842:	429a      	cmp	r2, r3
 8004844:	d91c      	bls.n	8004880 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	619a      	str	r2, [r3, #24]
        }
        break;
 8004852:	e015      	b.n	8004880 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	3303      	adds	r3, #3
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 800485e:	8b7a      	ldrh	r2, [r7, #26]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	b29b      	uxth	r3, r3
 800486a:	429a      	cmp	r2, r3
 800486c:	d90a      	bls.n	8004884 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	619a      	str	r2, [r3, #24]
        }
        break;
 800487a:	e003      	b.n	8004884 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <USB_HC_StartXfer+0x252>
        break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <USB_HC_StartXfer+0x252>
        break;
 8004884:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	68d9      	ldr	r1, [r3, #12]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	785a      	ldrb	r2, [r3, #1]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	b298      	uxth	r0, r3
 8004894:	2300      	movs	r3, #0
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	4603      	mov	r3, r0
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff fd48 	bl	8004330 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	1ff80000 	.word	0x1ff80000

080048b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	b29b      	uxth	r3, r3
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	0c9b      	lsrs	r3, r3, #18
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <USB_HC_Halt+0x40>
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004902:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8004904:	0c9b      	lsrs	r3, r3, #18
 8004906:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800490a:	2b02      	cmp	r3, #2
 800490c:	d160      	bne.n	80049d0 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491a:	4619      	mov	r1, r3
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4413      	add	r3, r2
 8004924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800492e:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d135      	bne.n	80049a8 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	4619      	mov	r1, r3
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800495c:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496a:	4619      	mov	r1, r3
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800497e:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498c:	d81e      	bhi.n	80049cc <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a4:	d0ec      	beq.n	8004980 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80049a6:	e074      	b.n	8004a92 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	4619      	mov	r1, r3
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049c8:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80049ca:	e062      	b.n	8004a92 <USB_HC_Halt+0x1c4>
          break;
 80049cc:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80049ce:	e060      	b.n	8004a92 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049dc:	4619      	mov	r1, r3
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f0:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d135      	bne.n	8004a6c <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a20:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2e:	4619      	mov	r1, r3
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a42:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a50:	d81e      	bhi.n	8004a90 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a68:	d0ec      	beq.n	8004a44 <USB_HC_Halt+0x176>
 8004a6a:	e012      	b.n	8004a92 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	4619      	mov	r1, r3
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a8c:	600b      	str	r3, [r1, #0]
 8004a8e:	e000      	b.n	8004a92 <USB_HC_Halt+0x1c4>
          break;
 8004a90:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	04db      	lsls	r3, r3, #19
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <USB_DoPing+0x74>)
 8004aca:	400b      	ands	r3, r1
 8004acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad0:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004af0:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	1ff80000 	.word	0x1ff80000

08004b18 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fbc3 	bl	80042b0 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fbdd 	bl	80042ec <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fbec 	bl	8004310 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	75fb      	strb	r3, [r7, #23]
 8004b3c:	e01f      	b.n	8004b7e <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b54:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b5c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b64:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	2b0f      	cmp	r3, #15
 8004b82:	d9dc      	bls.n	8004b3e <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8004b84:	2300      	movs	r3, #0
 8004b86:	75fb      	strb	r3, [r7, #23]
 8004b88:	e034      	b.n	8004bf4 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba0:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ba8:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bb0:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd0:	d80c      	bhi.n	8004bec <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be8:	d0ec      	beq.n	8004bc4 <USB_StopHost+0xac>
 8004bea:	e000      	b.n	8004bee <USB_StopHost+0xd6>
        break;
 8004bec:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	d9c7      	bls.n	8004b8a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c00:	461a      	mov	r2, r3
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fb47 	bl	80042a4 <USB_EnableGlobalInt>
  return HAL_OK;  
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <disk_status+0x10>)
 8004c22:	181a      	adds	r2, r3, r0
 8004c24:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004c28:	7a10      	ldrb	r0, [r2, #8]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4718      	bx	r3
 8004c30:	200001fc 	.word	0x200001fc

08004c34 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <disk_initialize+0x1c>)
 8004c36:	5c1a      	ldrb	r2, [r3, r0]
 8004c38:	b942      	cbnz	r2, 8004c4c <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c3e:	181a      	adds	r2, r3, r0
 8004c40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004c44:	7a10      	ldrb	r0, [r2, #8]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4718      	bx	r3
  }
  return stat;
}
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4770      	bx	lr
 8004c50:	200001fc 	.word	0x200001fc

08004c54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c54:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c56:	4c05      	ldr	r4, [pc, #20]	; (8004c6c <disk_read+0x18>)
 8004c58:	1825      	adds	r5, r4, r0
 8004c5a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004c5e:	6860      	ldr	r0, [r4, #4]
 8004c60:	6884      	ldr	r4, [r0, #8]
 8004c62:	7a28      	ldrb	r0, [r5, #8]
 8004c64:	46a4      	mov	ip, r4
  return res;
}
 8004c66:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c68:	4760      	bx	ip
 8004c6a:	bf00      	nop
 8004c6c:	200001fc 	.word	0x200001fc

08004c70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c70:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c72:	4c05      	ldr	r4, [pc, #20]	; (8004c88 <disk_write+0x18>)
 8004c74:	1825      	adds	r5, r4, r0
 8004c76:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004c7a:	6860      	ldr	r0, [r4, #4]
 8004c7c:	68c4      	ldr	r4, [r0, #12]
 8004c7e:	7a28      	ldrb	r0, [r5, #8]
 8004c80:	46a4      	mov	ip, r4
  return res;
}
 8004c82:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c84:	4760      	bx	ip
 8004c86:	bf00      	nop
 8004c88:	200001fc 	.word	0x200001fc

08004c8c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <disk_ioctl+0x18>)
{
 8004c8e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c90:	181c      	adds	r4, r3, r0
 8004c92:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004c96:	7a20      	ldrb	r0, [r4, #8]
 8004c98:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8004c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	4718      	bx	r3
 8004ca2:	bf00      	nop
 8004ca4:	200001fc 	.word	0x200001fc

08004ca8 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8004ca8:	2000      	movs	r0, #0
 8004caa:	4770      	bx	lr

08004cac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004cac:	3801      	subs	r0, #1
 8004cae:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004cb0:	4291      	cmp	r1, r2
 8004cb2:	d100      	bne.n	8004cb6 <mem_cpy+0xa>
		*d++ = *s++;
}
 8004cb4:	4770      	bx	lr
		*d++ = *s++;
 8004cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cba:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004cbe:	e7f7      	b.n	8004cb0 <mem_cpy+0x4>

08004cc0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004cc0:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8004cc2:	4290      	cmp	r0, r2
 8004cc4:	d100      	bne.n	8004cc8 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8004cc6:	4770      	bx	lr
		*d++ = (BYTE)val;
 8004cc8:	f800 1b01 	strb.w	r1, [r0], #1
 8004ccc:	e7f9      	b.n	8004cc2 <mem_set+0x2>
	...

08004cd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cd0:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <chk_lock+0x60>)
 8004cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cd4:	2400      	movs	r4, #0
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8004cda:	6815      	ldr	r5, [r2, #0]
 8004cdc:	b1c5      	cbz	r5, 8004d10 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004cde:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8004ce2:	42bd      	cmp	r5, r7
 8004ce4:	d115      	bne.n	8004d12 <chk_lock+0x42>
 8004ce6:	6857      	ldr	r7, [r2, #4]
 8004ce8:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8004cec:	42af      	cmp	r7, r5
 8004cee:	d110      	bne.n	8004d12 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8004cf0:	8917      	ldrh	r7, [r2, #8]
 8004cf2:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8004cf6:	42af      	cmp	r7, r5
 8004cf8:	d10b      	bne.n	8004d12 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004cfa:	b9b9      	cbnz	r1, 8004d2c <chk_lock+0x5c>
 8004cfc:	220c      	movs	r2, #12
 8004cfe:	fb02 6303 	mla	r3, r2, r3, r6
 8004d02:	895b      	ldrh	r3, [r3, #10]
 8004d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d08:	bf14      	ite	ne
 8004d0a:	2000      	movne	r0, #0
 8004d0c:	2010      	moveq	r0, #16
 8004d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8004d10:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d12:	3301      	adds	r3, #1
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	f102 020c 	add.w	r2, r2, #12
 8004d1a:	d1de      	bne.n	8004cda <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d1c:	b10c      	cbz	r4, 8004d22 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d1e:	2000      	movs	r0, #0
 8004d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d22:	2902      	cmp	r1, #2
 8004d24:	bf0c      	ite	eq
 8004d26:	2000      	moveq	r0, #0
 8004d28:	2012      	movne	r0, #18
 8004d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d2c:	2010      	movs	r0, #16
 8004d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d30:	200001e0 	.word	0x200001e0

08004d34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d36:	4c20      	ldr	r4, [pc, #128]	; (8004db8 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8004d38:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8004d40:	6825      	ldr	r5, [r4, #0]
 8004d42:	42b5      	cmp	r5, r6
 8004d44:	d109      	bne.n	8004d5a <inc_lock+0x26>
 8004d46:	6867      	ldr	r7, [r4, #4]
 8004d48:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8004d4c:	42af      	cmp	r7, r5
 8004d4e:	d104      	bne.n	8004d5a <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8004d50:	8927      	ldrh	r7, [r4, #8]
 8004d52:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8004d56:	42af      	cmp	r7, r5
 8004d58:	d022      	beq.n	8004da0 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	f104 040c 	add.w	r4, r4, #12
 8004d62:	d1ed      	bne.n	8004d40 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d64:	6813      	ldr	r3, [r2, #0]
 8004d66:	b113      	cbz	r3, 8004d6e <inc_lock+0x3a>
 8004d68:	68d3      	ldr	r3, [r2, #12]
 8004d6a:	bb1b      	cbnz	r3, 8004db4 <inc_lock+0x80>
 8004d6c:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8004d6e:	240c      	movs	r4, #12
 8004d70:	435c      	muls	r4, r3
 8004d72:	1915      	adds	r5, r2, r4
 8004d74:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8004d76:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8004d7a:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8004d7e:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8004d80:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8004d82:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8004d84:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d86:	b991      	cbnz	r1, 8004dae <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d88:	210c      	movs	r1, #12
 8004d8a:	fb01 2103 	mla	r1, r1, r3, r2
 8004d8e:	8949      	ldrh	r1, [r1, #10]
 8004d90:	3101      	adds	r1, #1
 8004d92:	b289      	uxth	r1, r1
 8004d94:	200c      	movs	r0, #12
 8004d96:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8004d9a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d9c:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8004d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d0f1      	beq.n	8004d88 <inc_lock+0x54>
 8004da4:	210c      	movs	r1, #12
 8004da6:	fb01 2103 	mla	r1, r1, r3, r2
 8004daa:	8949      	ldrh	r1, [r1, #10]
 8004dac:	b911      	cbnz	r1, 8004db4 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004db2:	e7ef      	b.n	8004d94 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004db4:	2000      	movs	r0, #0
 8004db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db8:	200001e0 	.word	0x200001e0

08004dbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004dbc:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004dbe:	1e45      	subs	r5, r0, #1
 8004dc0:	2d01      	cmp	r5, #1
 8004dc2:	d811      	bhi.n	8004de8 <dec_lock+0x2c>
		n = Files[i].ctr;
 8004dc4:	490a      	ldr	r1, [pc, #40]	; (8004df0 <dec_lock+0x34>)
 8004dc6:	220c      	movs	r2, #12
 8004dc8:	fb02 1305 	mla	r3, r2, r5, r1
 8004dcc:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8004dce:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8004dd2:	b298      	uxth	r0, r3
 8004dd4:	b108      	cbz	r0, 8004dda <dec_lock+0x1e>
 8004dd6:	3c01      	subs	r4, #1
 8004dd8:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8004dda:	fb02 f305 	mul.w	r3, r2, r5
 8004dde:	18ca      	adds	r2, r1, r3
 8004de0:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004de2:	b918      	cbnz	r0, 8004dec <dec_lock+0x30>
 8004de4:	50c8      	str	r0, [r1, r3]
 8004de6:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004de8:	2002      	movs	r0, #2
 8004dea:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8004dec:	2000      	movs	r0, #0
	}
	return res;
}
 8004dee:	bd30      	pop	{r4, r5, pc}
 8004df0:	200001e0 	.word	0x200001e0

08004df4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004df4:	4602      	mov	r2, r0
 8004df6:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8004dfa:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004dfc:	01c3      	lsls	r3, r0, #7
 8004dfe:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004e02:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004e06:	fa50 f383 	uxtab	r3, r0, r3
 8004e0a:	428a      	cmp	r2, r1
 8004e0c:	b2d8      	uxtb	r0, r3
 8004e0e:	d1f5      	bne.n	8004dfc <sum_sfn+0x8>
	return sum;
}
 8004e10:	4770      	bx	lr

08004e12 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004e12:	6802      	ldr	r2, [r0, #0]
{
 8004e14:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004e16:	b152      	cbz	r2, 8004e2e <get_ldnumber+0x1c>
 8004e18:	4611      	mov	r1, r2
 8004e1a:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e20:	2c1f      	cmp	r4, #31
 8004e22:	d90c      	bls.n	8004e3e <get_ldnumber+0x2c>
 8004e24:	2c3a      	cmp	r4, #58	; 0x3a
 8004e26:	d1f8      	bne.n	8004e1a <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8004e28:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004e2a:	428b      	cmp	r3, r1
 8004e2c:	d002      	beq.n	8004e34 <get_ldnumber+0x22>
	int vol = -1;
 8004e2e:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8004e32:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	2a30      	cmp	r2, #48	; 0x30
 8004e38:	d1f9      	bne.n	8004e2e <get_ldnumber+0x1c>
					*path = ++tt;
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8004e3e:	2000      	movs	r0, #0
 8004e40:	bd10      	pop	{r4, pc}

08004e42 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004e42:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004e44:	b190      	cbz	r0, 8004e6c <validate+0x2a>
 8004e46:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004e4a:	b17b      	cbz	r3, 8004e6c <validate+0x2a>
 8004e4c:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8004e50:	b162      	cbz	r2, 8004e6c <validate+0x2a>
 8004e52:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8004e56:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	d106      	bne.n	8004e6c <validate+0x2a>
 8004e5e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004e62:	f7ff fedd 	bl	8004c20 <disk_status>
 8004e66:	f010 0001 	ands.w	r0, r0, #1
 8004e6a:	d000      	beq.n	8004e6e <validate+0x2c>
		return FR_INVALID_OBJECT;
 8004e6c:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8004e6e:	bd08      	pop	{r3, pc}

08004e70 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004e70:	7eca      	ldrb	r2, [r1, #27]
 8004e72:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8004e74:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004e76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004e7a:	bf01      	itttt	eq
 8004e7c:	7d48      	ldrbeq	r0, [r1, #21]
 8004e7e:	7d0a      	ldrbeq	r2, [r1, #20]
 8004e80:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8004e84:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	4770      	bx	lr

08004e8c <sync_window.part.1>:
FRESULT sync_window (
 8004e8c:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004e8e:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8004e92:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004e94:	4601      	mov	r1, r0
 8004e96:	2301      	movs	r3, #1
 8004e98:	462a      	mov	r2, r5
 8004e9a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004e9e:	f7ff fee7 	bl	8004c70 <disk_write>
 8004ea2:	b9d0      	cbnz	r0, 8004eda <sync_window.part.1+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ea4:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8004ea8:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8004eac:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004eb0:	1aeb      	subs	r3, r5, r3
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d301      	bcc.n	8004eba <sync_window.part.1+0x2e>
	FRESULT res = FR_OK;
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004eba:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8004ebe:	2e01      	cmp	r6, #1
 8004ec0:	d9f9      	bls.n	8004eb6 <sync_window.part.1+0x2a>
					wsect += fs->fsize;
 8004ec2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004ec6:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8004eca:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004ecc:	462a      	mov	r2, r5
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	f7ff fecd 	bl	8004c70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ed6:	3e01      	subs	r6, #1
 8004ed8:	e7f1      	b.n	8004ebe <sync_window.part.1+0x32>
			res = FR_DISK_ERR;
 8004eda:	2001      	movs	r0, #1
}
 8004edc:	bd70      	pop	{r4, r5, r6, pc}

08004ede <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ede:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8004ee2:	b10b      	cbz	r3, 8004ee8 <sync_window+0xa>
 8004ee4:	f7ff bfd2 	b.w	8004e8c <sync_window.part.1>
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	4770      	bx	lr

08004eec <sync_fs>:
{
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004ef0:	f7ff fff5 	bl	8004ede <sync_window>
 8004ef4:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d154      	bne.n	8004fa4 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004efa:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d147      	bne.n	8004f92 <sync_fs+0xa6>
 8004f02:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d143      	bne.n	8004f92 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8004f0a:	4601      	mov	r1, r0
 8004f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f10:	4620      	mov	r0, r4
 8004f12:	f7ff fed5 	bl	8004cc0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004f16:	2255      	movs	r2, #85	; 0x55
 8004f18:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8004f1c:	22aa      	movs	r2, #170	; 0xaa
 8004f1e:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004f22:	2252      	movs	r2, #82	; 0x52
 8004f24:	7022      	strb	r2, [r4, #0]
 8004f26:	7062      	strb	r2, [r4, #1]
 8004f28:	2261      	movs	r2, #97	; 0x61
 8004f2a:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004f2c:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004f30:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8004f34:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004f38:	2141      	movs	r1, #65	; 0x41
 8004f3a:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004f3c:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004f40:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004f44:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8004f48:	0c11      	lsrs	r1, r2, #16
 8004f4a:	0e12      	lsrs	r2, r2, #24
 8004f4c:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004f50:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004f54:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004f58:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004f5c:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8004f60:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8004f64:	0c11      	lsrs	r1, r2, #16
 8004f66:	0e12      	lsrs	r2, r2, #24
 8004f68:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8004f6c:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004f70:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004f74:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8004f76:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004f78:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8004f7c:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8004f80:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004f84:	4621      	mov	r1, r4
 8004f86:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004f8a:	f7ff fe71 	bl	8004c70 <disk_write>
			fs->fsi_flag = 0;
 8004f8e:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004f92:	2200      	movs	r2, #0
 8004f94:	4611      	mov	r1, r2
 8004f96:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004f9a:	f7ff fe77 	bl	8004c8c <disk_ioctl>
 8004f9e:	3000      	adds	r0, #0
 8004fa0:	bf18      	it	ne
 8004fa2:	2001      	movne	r0, #1
}
 8004fa4:	bd38      	pop	{r3, r4, r5, pc}

08004fa6 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004fa6:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8004faa:	428b      	cmp	r3, r1
{
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4606      	mov	r6, r0
 8004fb0:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004fb2:	d013      	beq.n	8004fdc <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8004fb4:	f7ff ff93 	bl	8004ede <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004fb8:	4604      	mov	r4, r0
 8004fba:	b968      	cbnz	r0, 8004fd8 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004fbc:	462a      	mov	r2, r5
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8004fc6:	f7ff fe45 	bl	8004c54 <disk_read>
 8004fca:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8004fcc:	bf1c      	itt	ne
 8004fce:	f04f 35ff 	movne.w	r5, #4294967295
 8004fd2:	2401      	movne	r4, #1
			fs->winsect = sector;
 8004fd4:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8004fd8:	4620      	mov	r0, r4
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8004fdc:	2400      	movs	r4, #0
 8004fde:	e7fb      	b.n	8004fd8 <move_window+0x32>

08004fe0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004fe0:	2300      	movs	r3, #0
{
 8004fe2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004fe4:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8004fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fec:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8004ff0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004ff2:	f7ff ffd8 	bl	8004fa6 <move_window>
 8004ff6:	b9c0      	cbnz	r0, 800502a <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004ff8:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8004ffc:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8005000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005004:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005008:	4293      	cmp	r3, r2
 800500a:	d110      	bne.n	800502e <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800500c:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <check_fs+0x54>)
 8005012:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005016:	4293      	cmp	r3, r2
 8005018:	d00a      	beq.n	8005030 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800501a:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 800501e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8005022:	1a80      	subs	r0, r0, r2
 8005024:	bf18      	it	ne
 8005026:	2001      	movne	r0, #1
 8005028:	bd10      	pop	{r4, pc}
 800502a:	2003      	movs	r0, #3
 800502c:	bd10      	pop	{r4, pc}
		return 2;
 800502e:	2002      	movs	r0, #2
}
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop
 8005034:	00544146 	.word	0x00544146

08005038 <find_volume>:
{
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	6003      	str	r3, [r0, #0]
{
 800503e:	b085      	sub	sp, #20
 8005040:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8005042:	4608      	mov	r0, r1
{
 8005044:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8005046:	f7ff fee4 	bl	8004e12 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800504a:	1e06      	subs	r6, r0, #0
 800504c:	f2c0 8123 	blt.w	8005296 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005050:	4b95      	ldr	r3, [pc, #596]	; (80052a8 <find_volume+0x270>)
 8005052:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005056:	2c00      	cmp	r4, #0
 8005058:	f000 811f 	beq.w	800529a <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 800505c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800505e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8005062:	b173      	cbz	r3, 8005082 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8005064:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8005068:	f7ff fdda 	bl	8004c20 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800506c:	07c7      	lsls	r7, r0, #31
 800506e:	d408      	bmi.n	8005082 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005070:	2d00      	cmp	r5, #0
 8005072:	f000 8114 	beq.w	800529e <find_volume+0x266>
 8005076:	f010 0004 	ands.w	r0, r0, #4
 800507a:	d000      	beq.n	800507e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800507c:	200a      	movs	r0, #10
}
 800507e:	b005      	add	sp, #20
 8005080:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8005082:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005084:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8005086:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800508a:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800508e:	f7ff fdd1 	bl	8004c34 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005092:	07c1      	lsls	r1, r0, #31
 8005094:	f100 8105 	bmi.w	80052a2 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005098:	b10d      	cbz	r5, 800509e <find_volume+0x66>
 800509a:	0742      	lsls	r2, r0, #29
 800509c:	d4ee      	bmi.n	800507c <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800509e:	2100      	movs	r1, #0
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7ff ff9d 	bl	8004fe0 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80050a6:	2801      	cmp	r0, #1
 80050a8:	f040 80dc 	bne.w	8005264 <find_volume+0x22c>
 80050ac:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 80050b0:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80050b2:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80050b6:	b103      	cbz	r3, 80050ba <find_volume+0x82>
 80050b8:	680b      	ldr	r3, [r1, #0]
 80050ba:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80050be:	3201      	adds	r2, #1
 80050c0:	2a04      	cmp	r2, #4
 80050c2:	f101 0110 	add.w	r1, r1, #16
 80050c6:	d1f4      	bne.n	80050b2 <find_volume+0x7a>
 80050c8:	2600      	movs	r6, #0
			bsect = br[i];
 80050ca:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	f000 80bf 	beq.w	8005252 <find_volume+0x21a>
 80050d4:	4629      	mov	r1, r5
 80050d6:	4620      	mov	r0, r4
 80050d8:	f7ff ff82 	bl	8004fe0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80050dc:	2800      	cmp	r0, #0
 80050de:	f040 80b9 	bne.w	8005254 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80050e2:	7b22      	ldrb	r2, [r4, #12]
 80050e4:	7ae3      	ldrb	r3, [r4, #11]
 80050e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ee:	f040 80bc 	bne.w	800526a <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80050f2:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80050f4:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80050f6:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80050f8:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80050fc:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005100:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005104:	bf08      	it	eq
 8005106:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8005108:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800510c:	2b01      	cmp	r3, #1
 800510e:	f200 80ac 	bhi.w	800526a <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005112:	7b66      	ldrb	r6, [r4, #13]
 8005114:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005118:	2e00      	cmp	r6, #0
 800511a:	f000 80a6 	beq.w	800526a <find_volume+0x232>
 800511e:	1e73      	subs	r3, r6, #1
 8005120:	4233      	tst	r3, r6
 8005122:	f040 80a2 	bne.w	800526a <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005126:	7ca3      	ldrb	r3, [r4, #18]
 8005128:	7c67      	ldrb	r7, [r4, #17]
 800512a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800512e:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005130:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005134:	f040 8099 	bne.w	800526a <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005138:	7d22      	ldrb	r2, [r4, #20]
 800513a:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800513c:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005140:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005144:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005146:	bf08      	it	eq
 8005148:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800514a:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 800514e:	f000 808c 	beq.w	800526a <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005152:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005156:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 800515a:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800515c:	4283      	cmp	r3, r0
 800515e:	f0c0 8084 	bcc.w	800526a <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005162:	1a1b      	subs	r3, r3, r0
 8005164:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005168:	2b00      	cmp	r3, #0
 800516a:	d07e      	beq.n	800526a <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800516c:	f640 76f5 	movw	r6, #4085	; 0xff5
 8005170:	42b3      	cmp	r3, r6
 8005172:	d97e      	bls.n	8005272 <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005174:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8005178:	42b3      	cmp	r3, r6
 800517a:	bf94      	ite	ls
 800517c:	2602      	movls	r6, #2
 800517e:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005180:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005182:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8005184:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 8005186:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005188:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800518c:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005190:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005194:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8005198:	d16d      	bne.n	8005276 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800519a:	2f00      	cmp	r7, #0
 800519c:	d165      	bne.n	800526a <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800519e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051a0:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80051a4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80051a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80051aa:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80051ae:	d35c      	bcc.n	800526a <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 80051b8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80051bc:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 80051be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80051c2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80051c6:	d12d      	bne.n	8005224 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80051c8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80051cc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80051d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d125      	bne.n	8005224 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 80051d8:	1c69      	adds	r1, r5, #1
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff fee3 	bl	8004fa6 <move_window>
 80051e0:	bb00      	cbnz	r0, 8005224 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80051e2:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80051e6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 80051ea:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80051ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051f2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d114      	bne.n	8005224 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <find_volume+0x274>)
 80051fe:	429a      	cmp	r2, r3
 8005200:	d110      	bne.n	8005224 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005202:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8005206:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800520a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800520e:	3320      	adds	r3, #32
 8005210:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005212:	bf01      	itttt	eq
 8005214:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8005218:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800521c:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8005220:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8005224:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8005226:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800522a:	8813      	ldrh	r3, [r2, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
 8005232:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <find_volume+0x27c>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4294      	cmp	r4, r2
 800523c:	bf04      	itt	eq
 800523e:	2200      	moveq	r2, #0
 8005240:	601a      	streq	r2, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4294      	cmp	r4, r2
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	f47f af18 	bne.w	800507e <find_volume+0x46>
 800524e:	60d8      	str	r0, [r3, #12]
 8005250:	e715      	b.n	800507e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005252:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005254:	3601      	adds	r6, #1
 8005256:	2e04      	cmp	r6, #4
 8005258:	f47f af37 	bne.w	80050ca <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800525c:	2803      	cmp	r0, #3
 800525e:	d104      	bne.n	800526a <find_volume+0x232>
 8005260:	2001      	movs	r0, #1
 8005262:	e70c      	b.n	800507e <find_volume+0x46>
 8005264:	2803      	cmp	r0, #3
 8005266:	d0fb      	beq.n	8005260 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005268:	b108      	cbz	r0, 800526e <find_volume+0x236>
 800526a:	200d      	movs	r0, #13
 800526c:	e707      	b.n	800507e <find_volume+0x46>
	bsect = 0;
 800526e:	4605      	mov	r5, r0
 8005270:	e737      	b.n	80050e2 <find_volume+0xaa>
	fmt = FS_FAT12;
 8005272:	2601      	movs	r6, #1
 8005274:	e784      	b.n	8005180 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005276:	2f00      	cmp	r7, #0
 8005278:	d0f7      	beq.n	800526a <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800527a:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800527c:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800527e:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8005282:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005286:	bf1b      	ittet	ne
 8005288:	18d2      	addne	r2, r2, r3
 800528a:	f003 0301 	andne.w	r3, r3, #1
 800528e:	4613      	moveq	r3, r2
 8005290:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8005294:	e787      	b.n	80051a6 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005296:	200b      	movs	r0, #11
 8005298:	e6f1      	b.n	800507e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800529a:	200c      	movs	r0, #12
 800529c:	e6ef      	b.n	800507e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800529e:	4628      	mov	r0, r5
 80052a0:	e6ed      	b.n	800507e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80052a2:	2003      	movs	r0, #3
 80052a4:	e6eb      	b.n	800507e <find_volume+0x46>
 80052a6:	bf00      	nop
 80052a8:	200001dc 	.word	0x200001dc
 80052ac:	41615252 	.word	0x41615252
 80052b0:	200001f8 	.word	0x200001f8
 80052b4:	200001e0 	.word	0x200001e0

080052b8 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80052b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 80052bc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80052be:	3b02      	subs	r3, #2
 80052c0:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80052c2:	bf3d      	ittte	cc
 80052c4:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 80052c8:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 80052cc:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80052d0:	2000      	movcs	r0, #0
}
 80052d2:	4770      	bx	lr

080052d4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052d4:	2901      	cmp	r1, #1
{
 80052d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d8:	4606      	mov	r6, r0
 80052da:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052dc:	d959      	bls.n	8005392 <get_fat+0xbe>
 80052de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80052e2:	4299      	cmp	r1, r3
 80052e4:	d255      	bcs.n	8005392 <get_fat+0xbe>
		switch (fs->fs_type) {
 80052e6:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d027      	beq.n	800533e <get_fat+0x6a>
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d036      	beq.n	8005360 <get_fat+0x8c>
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d14d      	bne.n	8005392 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 80052f6:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052fa:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80052fe:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8005302:	f7ff fe50 	bl	8004fa6 <move_window>
 8005306:	b110      	cbz	r0, 800530e <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800530e:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8005312:	1c67      	adds	r7, r4, #1
 8005314:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005318:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800531c:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800531e:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005320:	f7ff fe41 	bl	8004fa6 <move_window>
 8005324:	2800      	cmp	r0, #0
 8005326:	d1ef      	bne.n	8005308 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005328:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800532c:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800532e:	5df0      	ldrb	r0, [r6, r7]
 8005330:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005334:	bf4c      	ite	mi
 8005336:	0900      	lsrmi	r0, r0, #4
 8005338:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800533e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8005342:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8005346:	f7ff fe2e 	bl	8004fa6 <move_window>
 800534a:	2800      	cmp	r0, #0
 800534c:	d1dc      	bne.n	8005308 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800534e:	006d      	lsls	r5, r5, #1
 8005350:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8005354:	1973      	adds	r3, r6, r5
 8005356:	5d70      	ldrb	r0, [r6, r5]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005360:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8005364:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8005368:	f7ff fe1d 	bl	8004fa6 <move_window>
 800536c:	2800      	cmp	r0, #0
 800536e:	d1cb      	bne.n	8005308 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005370:	00ad      	lsls	r5, r5, #2
 8005372:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8005376:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005378:	7898      	ldrb	r0, [r3, #2]
 800537a:	78da      	ldrb	r2, [r3, #3]
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	0400      	lsls	r0, r0, #16
 8005380:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8005384:	5d72      	ldrb	r2, [r6, r5]
 8005386:	4310      	orrs	r0, r2
 8005388:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800538c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8005390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8005392:	2001      	movs	r0, #1
}
 8005394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005396 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005396:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 800539a:	b570      	push	{r4, r5, r6, lr}
 800539c:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800539e:	2a01      	cmp	r2, #1
{
 80053a0:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 80053a2:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80053a6:	d101      	bne.n	80053ac <dir_sdi+0x16>
		return FR_INT_ERR;
 80053a8:	2002      	movs	r0, #2
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80053ac:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80053b0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80053b4:	428a      	cmp	r2, r1
 80053b6:	d2f7      	bcs.n	80053a8 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80053b8:	b9f2      	cbnz	r2, 80053f8 <dir_sdi+0x62>
 80053ba:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 80053be:	2903      	cmp	r1, #3
 80053c0:	d102      	bne.n	80053c8 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 80053c2:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80053c6:	b9c1      	cbnz	r1, 80053fa <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80053c8:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 80053cc:	428d      	cmp	r5, r1
 80053ce:	d2eb      	bcs.n	80053a8 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 80053d0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 80053d4:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80053d8:	2800      	cmp	r0, #0
 80053da:	d0e5      	beq.n	80053a8 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80053dc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80053e0:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80053e4:	f005 050f 	and.w	r5, r5, #15
 80053e8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80053ec:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80053f0:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 80053f4:	2000      	movs	r0, #0
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80053fa:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 80053fe:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005400:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8005402:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005404:	4611      	mov	r1, r2
 8005406:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 800540a:	d202      	bcs.n	8005412 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 800540c:	f7ff ff54 	bl	80052b8 <clust2sect>
 8005410:	e7e0      	b.n	80053d4 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005412:	f7ff ff5f 	bl	80052d4 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005416:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005418:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800541a:	d009      	beq.n	8005430 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800541c:	2801      	cmp	r0, #1
 800541e:	d9c3      	bls.n	80053a8 <dir_sdi+0x12>
 8005420:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005424:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005428:	4298      	cmp	r0, r3
 800542a:	d2bd      	bcs.n	80053a8 <dir_sdi+0x12>
			idx -= ic;
 800542c:	1bad      	subs	r5, r5, r6
 800542e:	e7e8      	b.n	8005402 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005430:	2001      	movs	r0, #1
}
 8005432:	bd70      	pop	{r4, r5, r6, pc}

08005434 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005434:	2901      	cmp	r1, #1
{
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	4605      	mov	r5, r0
 800543c:	460c      	mov	r4, r1
 800543e:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005440:	d96f      	bls.n	8005522 <put_fat+0xee>
 8005442:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005446:	4299      	cmp	r1, r3
 8005448:	d26b      	bcs.n	8005522 <put_fat+0xee>
		switch (fs->fs_type) {
 800544a:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800544e:	2b02      	cmp	r3, #2
 8005450:	d03d      	beq.n	80054ce <put_fat+0x9a>
 8005452:	2b03      	cmp	r3, #3
 8005454:	d04b      	beq.n	80054ee <put_fat+0xba>
 8005456:	2b01      	cmp	r3, #1
 8005458:	d163      	bne.n	8005522 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 800545a:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800545e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8005462:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8005466:	f7ff fd9e 	bl	8004fa6 <move_window>
			if (res != FR_OK) break;
 800546a:	2800      	cmp	r0, #0
 800546c:	d15a      	bne.n	8005524 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 800546e:	f107 0801 	add.w	r8, r7, #1
 8005472:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005476:	f014 0401 	ands.w	r4, r4, #1
 800547a:	bf1f      	itttt	ne
 800547c:	5deb      	ldrbne	r3, [r5, r7]
 800547e:	f003 020f 	andne.w	r2, r3, #15
 8005482:	0133      	lslne	r3, r6, #4
 8005484:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8005488:	bf14      	ite	ne
 800548a:	4313      	orrne	r3, r2
 800548c:	b2f3      	uxtbeq	r3, r6
 800548e:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005490:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8005494:	2301      	movs	r3, #1
 8005496:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800549a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800549e:	4628      	mov	r0, r5
 80054a0:	f7ff fd81 	bl	8004fa6 <move_window>
			if (res != FR_OK) break;
 80054a4:	bbf0      	cbnz	r0, 8005524 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 80054a6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80054aa:	b144      	cbz	r4, 80054be <put_fat+0x8a>
 80054ac:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80054b0:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 80054ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80054be:	f815 2008 	ldrb.w	r2, [r5, r8]
 80054c2:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80054c6:	f022 020f 	bic.w	r2, r2, #15
 80054ca:	4332      	orrs	r2, r6
 80054cc:	e7f0      	b.n	80054b0 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80054ce:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80054d2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80054d6:	f7ff fd66 	bl	8004fa6 <move_window>
			if (res != FR_OK) break;
 80054da:	bb18      	cbnz	r0, 8005524 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80054dc:	0064      	lsls	r4, r4, #1
 80054de:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 80054e2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80054e6:	552e      	strb	r6, [r5, r4]
 80054e8:	442c      	add	r4, r5
 80054ea:	7062      	strb	r2, [r4, #1]
 80054ec:	e7e2      	b.n	80054b4 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80054ee:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80054f2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80054f6:	f7ff fd56 	bl	8004fa6 <move_window>
			if (res != FR_OK) break;
 80054fa:	b998      	cbnz	r0, 8005524 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80054fc:	00a4      	lsls	r4, r4, #2
 80054fe:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005502:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8005504:	78cb      	ldrb	r3, [r1, #3]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800550c:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8005510:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005514:	552a      	strb	r2, [r5, r4]
 8005516:	704b      	strb	r3, [r1, #1]
 8005518:	0c13      	lsrs	r3, r2, #16
 800551a:	0e12      	lsrs	r2, r2, #24
 800551c:	708b      	strb	r3, [r1, #2]
 800551e:	70ca      	strb	r2, [r1, #3]
 8005520:	e7c8      	b.n	80054b4 <put_fat+0x80>
			res = FR_INT_ERR;
 8005522:	2002      	movs	r0, #2
}
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005528 <create_chain>:
{
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800552c:	460f      	mov	r7, r1
 800552e:	b989      	cbnz	r1, 8005554 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8005530:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005534:	b1fe      	cbz	r6, 8005576 <create_chain+0x4e>
 8005536:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800553a:	429e      	cmp	r6, r3
 800553c:	bf28      	it	cs
 800553e:	2601      	movcs	r6, #1
 8005540:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005542:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8005546:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005548:	429c      	cmp	r4, r3
 800554a:	d317      	bcc.n	800557c <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 800554c:	2e01      	cmp	r6, #1
 800554e:	d814      	bhi.n	800557a <create_chain+0x52>
 8005550:	2400      	movs	r4, #0
 8005552:	e008      	b.n	8005566 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005554:	f7ff febe 	bl	80052d4 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8005558:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800555a:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800555c:	d93b      	bls.n	80055d6 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800555e:	3001      	adds	r0, #1
 8005560:	d103      	bne.n	800556a <create_chain+0x42>
			ncl = 2;
 8005562:	f04f 34ff 	mov.w	r4, #4294967295
}
 8005566:	4620      	mov	r0, r4
 8005568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800556a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800556e:	429c      	cmp	r4, r3
 8005570:	d3f9      	bcc.n	8005566 <create_chain+0x3e>
 8005572:	463e      	mov	r6, r7
 8005574:	e7e4      	b.n	8005540 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005576:	2601      	movs	r6, #1
 8005578:	e7e2      	b.n	8005540 <create_chain+0x18>
			ncl = 2;
 800557a:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f7ff fea8 	bl	80052d4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8005584:	b130      	cbz	r0, 8005594 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005586:	1c41      	adds	r1, r0, #1
 8005588:	d0eb      	beq.n	8005562 <create_chain+0x3a>
 800558a:	2801      	cmp	r0, #1
 800558c:	d023      	beq.n	80055d6 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 800558e:	42b4      	cmp	r4, r6
 8005590:	d1d7      	bne.n	8005542 <create_chain+0x1a>
 8005592:	e7dd      	b.n	8005550 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005594:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005598:	4621      	mov	r1, r4
 800559a:	4628      	mov	r0, r5
 800559c:	f7ff ff4a 	bl	8005434 <put_fat>
	if (res == FR_OK && clst != 0) {
 80055a0:	b9b8      	cbnz	r0, 80055d2 <create_chain+0xaa>
 80055a2:	b97f      	cbnz	r7, 80055c4 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80055a4:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 80055a8:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	d0da      	beq.n	8005566 <create_chain+0x3e>
			fs->free_clust--;
 80055b0:	3b01      	subs	r3, #1
 80055b2:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 80055b6:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 80055c2:	e7d0      	b.n	8005566 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80055c4:	4622      	mov	r2, r4
 80055c6:	4639      	mov	r1, r7
 80055c8:	4628      	mov	r0, r5
 80055ca:	f7ff ff33 	bl	8005434 <put_fat>
	if (res == FR_OK) {
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0e8      	beq.n	80055a4 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80055d2:	2801      	cmp	r0, #1
 80055d4:	d0c5      	beq.n	8005562 <create_chain+0x3a>
 80055d6:	2401      	movs	r4, #1
 80055d8:	e7c5      	b.n	8005566 <create_chain+0x3e>

080055da <dir_next>:
{
 80055da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 80055de:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 80055e2:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80055e4:	b2b3      	uxth	r3, r6
{
 80055e6:	4604      	mov	r4, r0
 80055e8:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80055ea:	b913      	cbnz	r3, 80055f2 <dir_next+0x18>
		return FR_NO_FILE;
 80055ec:	2004      	movs	r0, #4
 80055ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80055f2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f8      	beq.n	80055ec <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80055fa:	f016 080f 	ands.w	r8, r6, #15
 80055fe:	d10b      	bne.n	8005618 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8005600:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8005604:	3301      	adds	r3, #1
 8005606:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800560a:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800560e:	b971      	cbnz	r1, 800562e <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005610:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8005614:	429e      	cmp	r6, r3
 8005616:	d2e9      	bcs.n	80055ec <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005618:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800561c:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005620:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005624:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8005628:	2000      	movs	r0, #0
 800562a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800562e:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8005632:	3f01      	subs	r7, #1
 8005634:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8005638:	d1ee      	bne.n	8005618 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800563a:	f7ff fe4b 	bl	80052d4 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800563e:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005640:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8005642:	d802      	bhi.n	800564a <dir_next+0x70>
 8005644:	2002      	movs	r0, #2
 8005646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800564a:	1c42      	adds	r2, r0, #1
 800564c:	d102      	bne.n	8005654 <dir_next+0x7a>
 800564e:	2001      	movs	r0, #1
 8005650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005654:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005658:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800565c:	429d      	cmp	r5, r3
 800565e:	d32f      	bcc.n	80056c0 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	d0c2      	beq.n	80055ec <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005666:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800566a:	f7ff ff5d 	bl	8005528 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800566e:	4605      	mov	r5, r0
 8005670:	2800      	cmp	r0, #0
 8005672:	d03e      	beq.n	80056f2 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 8005674:	2801      	cmp	r0, #1
 8005676:	d0e5      	beq.n	8005644 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d0e8      	beq.n	800564e <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800567c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005680:	f7ff fc2d 	bl	8004ede <sync_window>
 8005684:	4601      	mov	r1, r0
 8005686:	2800      	cmp	r0, #0
 8005688:	d1e1      	bne.n	800564e <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800568a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005692:	f7ff fb15 	bl	8004cc0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005696:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800569a:	4629      	mov	r1, r5
 800569c:	4610      	mov	r0, r2
 800569e:	f7ff fe0b 	bl	80052b8 <clust2sect>
						dp->fs->wflag = 1;
 80056a2:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80056a6:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80056aa:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80056ae:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80056b2:	429f      	cmp	r7, r3
 80056b4:	d30e      	bcc.n	80056d4 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 80056b6:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 80056ba:	1bdf      	subs	r7, r3, r7
 80056bc:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 80056c0:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80056c4:	4629      	mov	r1, r5
 80056c6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80056ca:	f7ff fdf5 	bl	80052b8 <clust2sect>
 80056ce:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 80056d2:	e7a1      	b.n	8005618 <dir_next+0x3e>
						dp->fs->wflag = 1;
 80056d4:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 80056d8:	f7ff fbd8 	bl	8004e8c <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1b6      	bne.n	800564e <dir_next+0x74>
						dp->fs->winsect++;
 80056e0:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80056e4:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 80056e8:	3301      	adds	r3, #1
 80056ea:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80056ee:	3701      	adds	r7, #1
 80056f0:	e7db      	b.n	80056aa <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80056f2:	2007      	movs	r0, #7
}
 80056f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080056f8 <dir_find.part.6>:
FRESULT dir_find (
 80056f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80056fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005700:	f04f 08ff 	mov.w	r8, #255	; 0xff
FRESULT dir_find (
 8005704:	4606      	mov	r6, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005706:	f8a0 7224 	strh.w	r7, [r0, #548]	; 0x224
 800570a:	4644      	mov	r4, r8
		res = move_window(dp->fs, dp->sect);
 800570c:	f8d6 1210 	ldr.w	r1, [r6, #528]	; 0x210
 8005710:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
 8005714:	f7ff fc47 	bl	8004fa6 <move_window>
		if (res != FR_OK) break;
 8005718:	4682      	mov	sl, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	d167      	bne.n	80057ee <dir_find.part.6+0xf6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800571e:	f8d6 5214 	ldr.w	r5, [r6, #532]	; 0x214
		c = dir[DIR_Name];
 8005722:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005724:	2b00      	cmp	r3, #0
 8005726:	d07f      	beq.n	8005828 <dir_find.part.6+0x130>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005728:	2be5      	cmp	r3, #229	; 0xe5
 800572a:	d006      	beq.n	800573a <dir_find.part.6+0x42>
		a = dir[DIR_Attr] & AM_MASK;
 800572c:	7ae9      	ldrb	r1, [r5, #11]
 800572e:	f001 023f 	and.w	r2, r1, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005732:	0709      	lsls	r1, r1, #28
 8005734:	d504      	bpl.n	8005740 <dir_find.part.6+0x48>
 8005736:	2a0f      	cmp	r2, #15
 8005738:	d004      	beq.n	8005744 <dir_find.part.6+0x4c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800573a:	f8a6 7224 	strh.w	r7, [r6, #548]	; 0x224
 800573e:	e04e      	b.n	80057de <dir_find.part.6+0xe6>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005740:	2a0f      	cmp	r2, #15
 8005742:	d15b      	bne.n	80057fc <dir_find.part.6+0x104>
				if (dp->lfn) {
 8005744:	f8d6 b220 	ldr.w	fp, [r6, #544]	; 0x220
 8005748:	f1bb 0f00 	cmp.w	fp, #0
 800574c:	d048      	beq.n	80057e0 <dir_find.part.6+0xe8>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800574e:	0658      	lsls	r0, r3, #25
 8005750:	d543      	bpl.n	80057da <dir_find.part.6+0xe2>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005752:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8005756:	f8b6 3206 	ldrh.w	r3, [r6, #518]	; 0x206
						sum = dir[LDIR_Chksum];
 800575a:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800575e:	f8a6 3224 	strh.w	r3, [r6, #548]	; 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005762:	7b6b      	ldrb	r3, [r5, #13]
 8005764:	4543      	cmp	r3, r8
 8005766:	d13a      	bne.n	80057de <dir_find.part.6+0xe6>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005768:	f895 a000 	ldrb.w	sl, [r5]
 800576c:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
 8005770:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005774:	f04f 0a0d 	mov.w	sl, #13
 8005778:	fb0a fa03 	mul.w	sl, sl, r3
	s = 0; wc = 1;
 800577c:	2001      	movs	r0, #1
 800577e:	f04f 0900 	mov.w	r9, #0
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005782:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <dir_find.part.6+0x138>)
 8005784:	f819 1003 	ldrb.w	r1, [r9, r3]
 8005788:	186a      	adds	r2, r5, r1
 800578a:	f892 e001 	ldrb.w	lr, [r2, #1]
 800578e:	5c6a      	ldrb	r2, [r5, r1]
 8005790:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
		if (wc) {	/* Last character has not been processed */
 8005794:	b378      	cbz	r0, 80057f6 <dir_find.part.6+0xfe>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005796:	4610      	mov	r0, r2
 8005798:	f000 ff70 	bl	800667c <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800579c:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80057a0:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80057a2:	d81c      	bhi.n	80057de <dir_find.part.6+0xe6>
 80057a4:	f10a 0201 	add.w	r2, sl, #1
 80057a8:	f83b 001a 	ldrh.w	r0, [fp, sl, lsl #1]
 80057ac:	9200      	str	r2, [sp, #0]
 80057ae:	f000 ff65 	bl	800667c <ff_wtoupper>
 80057b2:	9901      	ldr	r1, [sp, #4]
 80057b4:	4281      	cmp	r1, r0
 80057b6:	d112      	bne.n	80057de <dir_find.part.6+0xe6>
 80057b8:	9a00      	ldr	r2, [sp, #0]
 80057ba:	4692      	mov	sl, r2
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80057bc:	f109 0901 	add.w	r9, r9, #1
 80057c0:	f1b9 0f0d 	cmp.w	r9, #13
 80057c4:	d1dd      	bne.n	8005782 <dir_find.part.6+0x8a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80057c6:	782b      	ldrb	r3, [r5, #0]
 80057c8:	0659      	lsls	r1, r3, #25
 80057ca:	d503      	bpl.n	80057d4 <dir_find.part.6+0xdc>
 80057cc:	b110      	cbz	r0, 80057d4 <dir_find.part.6+0xdc>
 80057ce:	f83b 301a 	ldrh.w	r3, [fp, sl, lsl #1]
 80057d2:	b923      	cbnz	r3, 80057de <dir_find.part.6+0xe6>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80057d4:	3c01      	subs	r4, #1
 80057d6:	b2e4      	uxtb	r4, r4
 80057d8:	e002      	b.n	80057e0 <dir_find.part.6+0xe8>
 80057da:	42a3      	cmp	r3, r4
 80057dc:	d0c1      	beq.n	8005762 <dir_find.part.6+0x6a>
 80057de:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 80057e0:	2100      	movs	r1, #0
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff fef9 	bl	80055da <dir_next>
	} while (res == FR_OK);
 80057e8:	4682      	mov	sl, r0
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d08e      	beq.n	800570c <dir_find.part.6+0x14>
}
 80057ee:	4650      	mov	r0, sl
 80057f0:	b003      	add	sp, #12
 80057f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80057f6:	42ba      	cmp	r2, r7
 80057f8:	d0e0      	beq.n	80057bc <dir_find.part.6+0xc4>
 80057fa:	e7f0      	b.n	80057de <dir_find.part.6+0xe6>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80057fc:	b924      	cbnz	r4, 8005808 <dir_find.part.6+0x110>
 80057fe:	4628      	mov	r0, r5
 8005800:	f7ff faf8 	bl	8004df4 <sum_sfn>
 8005804:	4540      	cmp	r0, r8
 8005806:	d0f2      	beq.n	80057ee <dir_find.part.6+0xf6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005808:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
 800580c:	7ada      	ldrb	r2, [r3, #11]
 800580e:	07d2      	lsls	r2, r2, #31
 8005810:	d493      	bmi.n	800573a <dir_find.part.6+0x42>
 8005812:	f103 000b 	add.w	r0, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005816:	4283      	cmp	r3, r0
 8005818:	d0e9      	beq.n	80057ee <dir_find.part.6+0xf6>
 800581a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800581e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005822:	4291      	cmp	r1, r2
 8005824:	d0f7      	beq.n	8005816 <dir_find.part.6+0x11e>
 8005826:	e788      	b.n	800573a <dir_find.part.6+0x42>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005828:	f04f 0a04 	mov.w	sl, #4
 800582c:	e7df      	b.n	80057ee <dir_find.part.6+0xf6>
 800582e:	bf00      	nop
 8005830:	08007dac 	.word	0x08007dac

08005834 <follow_path>:
{
 8005834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005838:	780b      	ldrb	r3, [r1, #0]
 800583a:	2b2f      	cmp	r3, #47	; 0x2f
{
 800583c:	4607      	mov	r7, r0
 800583e:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005840:	d001      	beq.n	8005846 <follow_path+0x12>
 8005842:	2b5c      	cmp	r3, #92	; 0x5c
 8005844:	d101      	bne.n	800584a <follow_path+0x16>
		path++;
 8005846:	f108 0801 	add.w	r8, r8, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800584a:	2400      	movs	r4, #0
 800584c:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005850:	f898 3000 	ldrb.w	r3, [r8]
 8005854:	2b1f      	cmp	r3, #31
 8005856:	f200 8092 	bhi.w	800597e <follow_path+0x14a>
		res = dir_sdi(dp, 0);
 800585a:	4621      	mov	r1, r4
 800585c:	4638      	mov	r0, r7
 800585e:	f7ff fd9a 	bl	8005396 <dir_sdi>
		dp->dir = 0;
 8005862:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
}
 8005866:	b003      	add	sp, #12
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lfn[di++] = w;					/* Store the Unicode character */
 800586c:	f825 0f02 	strh.w	r0, [r5, #2]!
 8005870:	4646      	mov	r6, r8
 8005872:	e094      	b.n	800599e <follow_path+0x16a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005874:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8005876:	44a0      	add	r8, r4
 8005878:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800587c:	bf34      	ite	cc
 800587e:	2404      	movcc	r4, #4
 8005880:	2400      	movcs	r4, #0
	while (di) {						/* Strip trailing spaces and dots */
 8005882:	2e00      	cmp	r6, #0
 8005884:	f000 80aa 	beq.w	80059dc <follow_path+0x1a8>
		w = lfn[di - 1];
 8005888:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800588c:	2920      	cmp	r1, #32
 800588e:	d002      	beq.n	8005896 <follow_path+0x62>
 8005890:	292e      	cmp	r1, #46	; 0x2e
 8005892:	f040 80a7 	bne.w	80059e4 <follow_path+0x1b0>
		di--;
 8005896:	3e01      	subs	r6, #1
 8005898:	e7f3      	b.n	8005882 <follow_path+0x4e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800589a:	3101      	adds	r1, #1
 800589c:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 80058a0:	2a20      	cmp	r2, #32
 80058a2:	d0fa      	beq.n	800589a <follow_path+0x66>
 80058a4:	2a2e      	cmp	r2, #46	; 0x2e
 80058a6:	d0f8      	beq.n	800589a <follow_path+0x66>
	if (si) cf |= NS_LOSS | NS_LFN;
 80058a8:	b109      	cbz	r1, 80058ae <follow_path+0x7a>
 80058aa:	f044 0403 	orr.w	r4, r4, #3
 80058ae:	464a      	mov	r2, r9
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80058b0:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
 80058b4:	282e      	cmp	r0, #46	; 0x2e
 80058b6:	d001      	beq.n	80058bc <follow_path+0x88>
 80058b8:	3e01      	subs	r6, #1
 80058ba:	d1f9      	bne.n	80058b0 <follow_path+0x7c>
		dp->fn[i++] = (BYTE)w;
 80058bc:	f04f 0a00 	mov.w	sl, #0
 80058c0:	f04f 0908 	mov.w	r9, #8
 80058c4:	4655      	mov	r5, sl
		w = lfn[si++];					/* Get an LFN character */
 80058c6:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 80058ca:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f000 80a1 	beq.w	8005a14 <follow_path+0x1e0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80058d2:	2820      	cmp	r0, #32
 80058d4:	d004      	beq.n	80058e0 <follow_path+0xac>
 80058d6:	282e      	cmp	r0, #46	; 0x2e
 80058d8:	d106      	bne.n	80058e8 <follow_path+0xb4>
 80058da:	42b2      	cmp	r2, r6
 80058dc:	f000 808f 	beq.w	80059fe <follow_path+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80058e0:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 80058e4:	4611      	mov	r1, r2
 80058e6:	e7ee      	b.n	80058c6 <follow_path+0x92>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80058e8:	45ca      	cmp	sl, r9
 80058ea:	f080 808b 	bcs.w	8005a04 <follow_path+0x1d0>
 80058ee:	42b2      	cmp	r2, r6
 80058f0:	d111      	bne.n	8005916 <follow_path+0xe2>
			if (ni == 11) {				/* Long extension */
 80058f2:	f1b9 0f0b 	cmp.w	r9, #11
 80058f6:	d106      	bne.n	8005906 <follow_path+0xd2>
 80058f8:	e088      	b.n	8005a0c <follow_path+0x1d8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80058fa:	42b2      	cmp	r2, r6
 80058fc:	d003      	beq.n	8005906 <follow_path+0xd2>
 80058fe:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8005902:	f200 8087 	bhi.w	8005a14 <follow_path+0x1e0>
			b <<= 2; continue;
 8005906:	00ad      	lsls	r5, r5, #2
 8005908:	b2ed      	uxtb	r5, r5
 800590a:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800590c:	f04f 090b 	mov.w	r9, #11
 8005910:	f04f 0a08 	mov.w	sl, #8
 8005914:	e7e6      	b.n	80058e4 <follow_path+0xb0>
		if (w >= 0x80) {				/* Non ASCII character */
 8005916:	287f      	cmp	r0, #127	; 0x7f
 8005918:	d90d      	bls.n	8005936 <follow_path+0x102>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800591a:	2100      	movs	r1, #0
 800591c:	9201      	str	r2, [sp, #4]
 800591e:	f000 fe8f 	bl	8006640 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005922:	9a01      	ldr	r2, [sp, #4]
 8005924:	b118      	cbz	r0, 800592e <follow_path+0xfa>
 8005926:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <follow_path+0x274>)
 8005928:	4418      	add	r0, r3
 800592a:	f810 0c80 	ldrb.w	r0, [r0, #-128]
 800592e:	b280      	uxth	r0, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8005930:	f044 0402 	orr.w	r4, r4, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005934:	b138      	cbz	r0, 8005946 <follow_path+0x112>
 8005936:	4b5d      	ldr	r3, [pc, #372]	; (8005aac <follow_path+0x278>)
	while (*str && *str != chr) str++;
 8005938:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800593c:	2900      	cmp	r1, #0
 800593e:	f000 80a4 	beq.w	8005a8a <follow_path+0x256>
 8005942:	4281      	cmp	r1, r0
 8005944:	d1f8      	bne.n	8005938 <follow_path+0x104>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005946:	f044 0403 	orr.w	r4, r4, #3
 800594a:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800594c:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8005950:	f801 000a 	strb.w	r0, [r1, sl]
 8005954:	f10a 0a01 	add.w	sl, sl, #1
 8005958:	e7c4      	b.n	80058e4 <follow_path+0xb0>
					b |= 2;
 800595a:	f045 0502 	orr.w	r5, r5, #2
 800595e:	e7f5      	b.n	800594c <follow_path+0x118>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005960:	075a      	lsls	r2, r3, #29
 8005962:	d480      	bmi.n	8005866 <follow_path+0x32>
			dir = dp->dir;						/* Follow the sub-directory */
 8005964:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005968:	7acb      	ldrb	r3, [r1, #11]
 800596a:	06db      	lsls	r3, r3, #27
 800596c:	d538      	bpl.n	80059e0 <follow_path+0x1ac>
			dp->sclust = ld_clust(dp->fs, dir);
 800596e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005972:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8005976:	f7ff fa7b 	bl	8004e70 <ld_clust.isra.0>
 800597a:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800597e:	f898 3000 	ldrb.w	r3, [r8]
 8005982:	2b2f      	cmp	r3, #47	; 0x2f
 8005984:	4644      	mov	r4, r8
 8005986:	f108 0801 	add.w	r8, r8, #1
 800598a:	d0f8      	beq.n	800597e <follow_path+0x14a>
 800598c:	2b5c      	cmp	r3, #92	; 0x5c
 800598e:	d0f6      	beq.n	800597e <follow_path+0x14a>
	lfn = dp->lfn;
 8005990:	f8d7 b220 	ldr.w	fp, [r7, #544]	; 0x220
 8005994:	f104 39ff 	add.w	r9, r4, #4294967295
 8005998:	f1ab 0502 	sub.w	r5, fp, #2
	si = di = 0;
 800599c:	2600      	movs	r6, #0
		w = p[si++];					/* Get a character */
 800599e:	f819 0f01 	ldrb.w	r0, [r9, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80059a2:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 80059a4:	f106 0801 	add.w	r8, r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80059a8:	f67f af64 	bls.w	8005874 <follow_path+0x40>
 80059ac:	282f      	cmp	r0, #47	; 0x2f
 80059ae:	f43f af61 	beq.w	8005874 <follow_path+0x40>
 80059b2:	285c      	cmp	r0, #92	; 0x5c
 80059b4:	f43f af5e 	beq.w	8005874 <follow_path+0x40>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80059b8:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 80059bc:	d00e      	beq.n	80059dc <follow_path+0x1a8>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80059be:	2101      	movs	r1, #1
 80059c0:	f000 fe3e 	bl	8006640 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80059c4:	b150      	cbz	r0, 80059dc <follow_path+0x1a8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80059c6:	287f      	cmp	r0, #127	; 0x7f
 80059c8:	f63f af50 	bhi.w	800586c <follow_path+0x38>
 80059cc:	4938      	ldr	r1, [pc, #224]	; (8005ab0 <follow_path+0x27c>)
	while (*str && *str != chr) str++;
 80059ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	f43f af4a 	beq.w	800586c <follow_path+0x38>
 80059d8:	4282      	cmp	r2, r0
 80059da:	d1f8      	bne.n	80059ce <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80059dc:	2006      	movs	r0, #6
 80059de:	e742      	b.n	8005866 <follow_path+0x32>
 80059e0:	2005      	movs	r0, #5
	return res;
 80059e2:	e740      	b.n	8005866 <follow_path+0x32>
	lfn[di] = 0;						/* LFN is created */
 80059e4:	2500      	movs	r5, #0
	mem_set(dp->fn, ' ', 11);
 80059e6:	2120      	movs	r1, #32
	lfn[di] = 0;						/* LFN is created */
 80059e8:	f82b 5016 	strh.w	r5, [fp, r6, lsl #1]
	mem_set(dp->fn, ' ', 11);
 80059ec:	220b      	movs	r2, #11
 80059ee:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80059f2:	f7ff f965 	bl	8004cc0 <mem_set>
	lfn[di] = 0;						/* LFN is created */
 80059f6:	eb0b 0946 	add.w	r9, fp, r6, lsl #1
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80059fa:	4629      	mov	r1, r5
 80059fc:	e74e      	b.n	800589c <follow_path+0x68>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80059fe:	45ca      	cmp	sl, r9
 8005a00:	f4ff af77 	bcc.w	80058f2 <follow_path+0xbe>
			if (ni == 11) {				/* Long extension */
 8005a04:	f1b9 0f0b 	cmp.w	r9, #11
 8005a08:	f47f af77 	bne.w	80058fa <follow_path+0xc6>
				cf |= NS_LOSS | NS_LFN; break;
 8005a0c:	f044 0403 	orr.w	r4, r4, #3
 8005a10:	f04f 090b 	mov.w	r9, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005a14:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005a18:	781a      	ldrb	r2, [r3, #0]
 8005a1a:	2ae5      	cmp	r2, #229	; 0xe5
 8005a1c:	bf04      	itt	eq
 8005a1e:	2205      	moveq	r2, #5
 8005a20:	701a      	strbeq	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8005a22:	f1b9 0f08 	cmp.w	r9, #8
 8005a26:	bf04      	itt	eq
 8005a28:	00ad      	lsleq	r5, r5, #2
 8005a2a:	b2ed      	uxtbeq	r5, r5
 8005a2c:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	d003      	beq.n	8005a3c <follow_path+0x208>
 8005a34:	f005 0203 	and.w	r2, r5, #3
 8005a38:	2a03      	cmp	r2, #3
 8005a3a:	d101      	bne.n	8005a40 <follow_path+0x20c>
		cf |= NS_LFN;
 8005a3c:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005a40:	07a1      	lsls	r1, r4, #30
 8005a42:	d409      	bmi.n	8005a58 <follow_path+0x224>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005a44:	f005 0503 	and.w	r5, r5, #3
 8005a48:	2d01      	cmp	r5, #1
 8005a4a:	bf08      	it	eq
 8005a4c:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	bf08      	it	eq
 8005a54:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a58:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005a5c:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a5e:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005a60:	4638      	mov	r0, r7
 8005a62:	f7ff fc98 	bl	8005396 <dir_sdi>
	if (res != FR_OK) return res;
 8005a66:	b910      	cbnz	r0, 8005a6e <follow_path+0x23a>
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff fe45 	bl	80056f8 <dir_find.part.6>
			ns = dp->fn[NSFLAG];
 8005a6e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005a72:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005a74:	2800      	cmp	r0, #0
 8005a76:	f43f af73 	beq.w	8005960 <follow_path+0x12c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005a7a:	2804      	cmp	r0, #4
 8005a7c:	f47f aef3 	bne.w	8005866 <follow_path+0x32>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005a80:	f013 0f04 	tst.w	r3, #4
 8005a84:	bf08      	it	eq
 8005a86:	2005      	moveq	r0, #5
 8005a88:	e6ed      	b.n	8005866 <follow_path+0x32>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005a8a:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8005a8e:	2919      	cmp	r1, #25
 8005a90:	f67f af63 	bls.w	800595a <follow_path+0x126>
					if (IsLower(w)) {	/* ASCII small capital */
 8005a94:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8005a98:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8005a9a:	bf9e      	ittt	ls
 8005a9c:	3820      	subls	r0, #32
 8005a9e:	f045 0501 	orrls.w	r5, r5, #1
 8005aa2:	b280      	uxthls	r0, r0
 8005aa4:	e752      	b.n	800594c <follow_path+0x118>
 8005aa6:	bf00      	nop
 8005aa8:	08007d2c 	.word	0x08007d2c
 8005aac:	08007dc1 	.word	0x08007dc1
 8005ab0:	08007db8 	.word	0x08007db8

08005ab4 <dir_register>:
{
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fn = dp->fn; lfn = dp->lfn;
 8005ab8:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 8005abc:	f8d0 7220 	ldr.w	r7, [r0, #544]	; 0x220
{
 8005ac0:	b086      	sub	sp, #24
	mem_cpy(sn, fn, 12);
 8005ac2:	220c      	movs	r2, #12
{
 8005ac4:	4604      	mov	r4, r0
	mem_cpy(sn, fn, 12);
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	eb0d 0002 	add.w	r0, sp, r2
 8005acc:	f7ff f8ee 	bl	8004cac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005ad0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005ad4:	07db      	lsls	r3, r3, #31
 8005ad6:	d57c      	bpl.n	8005bd2 <dir_register+0x11e>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005ad8:	2300      	movs	r3, #0
				if (sr & 0x10000) sr ^= 0x11021;
 8005ada:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8005d20 <dir_register+0x26c>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005ade:	72f3      	strb	r3, [r6, #11]
		for (n = 1; n < 100; n++) {
 8005ae0:	f04f 0901 	mov.w	r9, #1
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005ae4:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
	mem_cpy(dst, src, 11);
 8005ae8:	220b      	movs	r2, #11
 8005aea:	a903      	add	r1, sp, #12
 8005aec:	4630      	mov	r0, r6
 8005aee:	f7ff f8dd 	bl	8004cac <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005af2:	f1b9 0f05 	cmp.w	r9, #5
 8005af6:	d850      	bhi.n	8005b9a <dir_register+0xe6>
 8005af8:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8005afa:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8005afc:	f003 000f 	and.w	r0, r3, #15
 8005b00:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8005b04:	2939      	cmp	r1, #57	; 0x39
 8005b06:	bf88      	it	hi
 8005b08:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8005b0c:	3a01      	subs	r2, #1
 8005b0e:	a801      	add	r0, sp, #4
 8005b10:	4410      	add	r0, r2
	} while (seq);
 8005b12:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8005b14:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8005b16:	d1f1      	bne.n	8005afc <dir_register+0x48>
	ns[i] = '~';
 8005b18:	a906      	add	r1, sp, #24
 8005b1a:	4411      	add	r1, r2
 8005b1c:	207e      	movs	r0, #126	; 0x7e
 8005b1e:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d03e      	beq.n	8005ba4 <dir_register+0xf0>
 8005b26:	5cf1      	ldrb	r1, [r6, r3]
 8005b28:	2920      	cmp	r1, #32
 8005b2a:	d139      	bne.n	8005ba0 <dir_register+0xec>
 8005b2c:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005b2e:	2a07      	cmp	r2, #7
 8005b30:	bf9b      	ittet	ls
 8005b32:	a906      	addls	r1, sp, #24
 8005b34:	1889      	addls	r1, r1, r2
 8005b36:	2120      	movhi	r1, #32
 8005b38:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8005b3c:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8005b40:	eba3 0106 	sub.w	r1, r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005b44:	bf98      	it	ls
 8005b46:	3201      	addls	r2, #1
	} while (j < 8);
 8005b48:	2907      	cmp	r1, #7
 8005b4a:	d9f0      	bls.n	8005b2e <dir_register+0x7a>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7ff fc21 	bl	8005396 <dir_sdi>
	if (res != FR_OK) return res;
 8005b54:	4605      	mov	r5, r0
 8005b56:	bba8      	cbnz	r0, 8005bc4 <dir_register+0x110>
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7ff fdcd 	bl	80056f8 <dir_find.part.6>
			if (res != FR_OK) break;
 8005b5e:	4605      	mov	r5, r0
 8005b60:	bb80      	cbnz	r0, 8005bc4 <dir_register+0x110>
		for (n = 1; n < 100; n++) {
 8005b62:	f109 0901 	add.w	r9, r9, #1
 8005b66:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8005b6a:	d1bd      	bne.n	8005ae8 <dir_register+0x34>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005b6c:	2507      	movs	r5, #7
}
 8005b6e:	4628      	mov	r0, r5
 8005b70:	b006      	add	sp, #24
 8005b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while (*lfn) {	/* Create a CRC */
 8005b76:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8005b78:	f002 0501 	and.w	r5, r2, #1
 8005b7c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005b80:	03dd      	lsls	r5, r3, #15
 8005b82:	bf48      	it	mi
 8005b84:	ea83 0308 	eormi.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8005b88:	3901      	subs	r1, #1
				wc >>= 1;
 8005b8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8005b8e:	d1f3      	bne.n	8005b78 <dir_register+0xc4>
		while (*lfn) {	/* Create a CRC */
 8005b90:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	d1ee      	bne.n	8005b76 <dir_register+0xc2>
 8005b98:	e7af      	b.n	8005afa <dir_register+0x46>
 8005b9a:	1eb8      	subs	r0, r7, #2
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	e7f7      	b.n	8005b90 <dir_register+0xdc>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	e7be      	b.n	8005b22 <dir_register+0x6e>
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	e7c1      	b.n	8005b2c <dir_register+0x78>
		for (n = 0; lfn[n]; n++) ;
 8005ba8:	3601      	adds	r6, #1
 8005baa:	e017      	b.n	8005bdc <dir_register+0x128>
		nent = 1;
 8005bac:	2601      	movs	r6, #1
 8005bae:	e01d      	b.n	8005bec <dir_register+0x138>
				n = 0;					/* Not a blank entry. Restart to search */
 8005bb0:	4607      	mov	r7, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f7ff fd10 	bl	80055da <dir_next>
		} while (res == FR_OK);
 8005bba:	4605      	mov	r5, r0
 8005bbc:	b1f0      	cbz	r0, 8005bfc <dir_register+0x148>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bbe:	2d04      	cmp	r5, #4
 8005bc0:	d0d4      	beq.n	8005b6c <dir_register+0xb8>
 8005bc2:	e7d4      	b.n	8005b6e <dir_register+0xba>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005bc4:	2d04      	cmp	r5, #4
 8005bc6:	d1d2      	bne.n	8005b6e <dir_register+0xba>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005bc8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005bcc:	72f3      	strb	r3, [r6, #11]
 8005bce:	f8c4 7220 	str.w	r7, [r4, #544]	; 0x220
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005bd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005bd6:	079b      	lsls	r3, r3, #30
 8005bd8:	d5e8      	bpl.n	8005bac <dir_register+0xf8>
 8005bda:	2600      	movs	r6, #0
		for (n = 0; lfn[n]; n++) ;
 8005bdc:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e1      	bne.n	8005ba8 <dir_register+0xf4>
		nent = (n + 25) / 13;
 8005be4:	3619      	adds	r6, #25
 8005be6:	230d      	movs	r3, #13
 8005be8:	fbb6 f6f3 	udiv	r6, r6, r3
	res = dir_sdi(dp, 0);
 8005bec:	2100      	movs	r1, #0
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff fbd1 	bl	8005396 <dir_sdi>
	if (res == FR_OK) {
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d1e1      	bne.n	8005bbe <dir_register+0x10a>
 8005bfa:	4607      	mov	r7, r0
			res = move_window(dp->fs, dp->sect);
 8005bfc:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8005c00:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005c04:	f7ff f9cf 	bl	8004fa6 <move_window>
			if (res != FR_OK) break;
 8005c08:	4605      	mov	r5, r0
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d1d7      	bne.n	8005bbe <dir_register+0x10a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005c0e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2be5      	cmp	r3, #229	; 0xe5
 8005c16:	d001      	beq.n	8005c1c <dir_register+0x168>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1c9      	bne.n	8005bb0 <dir_register+0xfc>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c1c:	3701      	adds	r7, #1
 8005c1e:	42be      	cmp	r6, r7
 8005c20:	d1c7      	bne.n	8005bb2 <dir_register+0xfe>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005c22:	3e01      	subs	r6, #1
 8005c24:	d056      	beq.n	8005cd4 <dir_register+0x220>
		res = dir_sdi(dp, dp->index - nent);
 8005c26:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	1b89      	subs	r1, r1, r6
 8005c2e:	f7ff fbb2 	bl	8005396 <dir_sdi>
		if (res == FR_OK) {
 8005c32:	4605      	mov	r5, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d19a      	bne.n	8005b6e <dir_register+0xba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005c38:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c3c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8005d24 <dir_register+0x270>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005c40:	f7ff f8d8 	bl	8004df4 <sum_sfn>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c44:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005c48:	4607      	mov	r7, r0
				res = move_window(dp->fs, dp->sect);
 8005c4a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8005c4e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005c52:	f7ff f9a8 	bl	8004fa6 <move_window>
 8005c56:	4605      	mov	r5, r0
				if (res != FR_OK) break;
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d188      	bne.n	8005b6e <dir_register+0xba>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005c5c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005c60:	f8d4 c220 	ldr.w	ip, [r4, #544]	; 0x220
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005c64:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005c66:	220f      	movs	r2, #15
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005c68:	b2f1      	uxtb	r1, r6
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005c6a:	250d      	movs	r5, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005c6c:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005c6e:	1e4a      	subs	r2, r1, #1
 8005c70:	436a      	muls	r2, r5
	dir[LDIR_Type] = 0;
 8005c72:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005c74:	7698      	strb	r0, [r3, #26]
 8005c76:	76d8      	strb	r0, [r3, #27]
	s = wc = 0;
 8005c78:	4605      	mov	r5, r0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c7a:	4548      	cmp	r0, r9
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c7c:	f815 e008 	ldrb.w	lr, [r5, r8]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c80:	bf18      	it	ne
 8005c82:	f83c 0012 	ldrhne.w	r0, [ip, r2, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c86:	f803 000e 	strb.w	r0, [r3, lr]
	} while (++s < 13);
 8005c8a:	f105 0501 	add.w	r5, r5, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c8e:	449e      	add	lr, r3
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c90:	bf18      	it	ne
 8005c92:	3201      	addne	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c94:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	bf08      	it	eq
 8005c9c:	4648      	moveq	r0, r9
	} while (++s < 13);
 8005c9e:	2d0d      	cmp	r5, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005ca0:	f88e a001 	strb.w	sl, [lr, #1]
	} while (++s < 13);
 8005ca4:	d1e9      	bne.n	8005c7a <dir_register+0x1c6>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005ca6:	4548      	cmp	r0, r9
 8005ca8:	d002      	beq.n	8005cb0 <dir_register+0x1fc>
 8005caa:	f83c 2012 	ldrh.w	r2, [ip, r2, lsl #1]
 8005cae:	b90a      	cbnz	r2, 8005cb4 <dir_register+0x200>
 8005cb0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005cb4:	7019      	strb	r1, [r3, #0]
				dp->fs->wflag = 1;
 8005cb6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7ff fc89 	bl	80055da <dir_next>
			} while (res == FR_OK && --nent);
 8005cc8:	4605      	mov	r5, r0
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f47f af4f 	bne.w	8005b6e <dir_register+0xba>
 8005cd0:	3e01      	subs	r6, #1
 8005cd2:	d1ba      	bne.n	8005c4a <dir_register+0x196>
		res = move_window(dp->fs, dp->sect);
 8005cd4:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8005cd8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005cdc:	f7ff f963 	bl	8004fa6 <move_window>
		if (res == FR_OK) {
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f47f af43 	bne.w	8005b6e <dir_register+0xba>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005ce8:	2220      	movs	r2, #32
 8005cea:	4629      	mov	r1, r5
 8005cec:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8005cf0:	f7fe ffe6 	bl	8004cc0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005cf4:	220b      	movs	r2, #11
 8005cf6:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8005cfa:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8005cfe:	f7fe ffd5 	bl	8004cac <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005d02:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005d06:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8005d0a:	7adb      	ldrb	r3, [r3, #11]
 8005d0c:	f003 0318 	and.w	r3, r3, #24
 8005d10:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8005d12:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005d1c:	e727      	b.n	8005b6e <dir_register+0xba>
 8005d1e:	bf00      	nop
 8005d20:	00011021 	.word	0x00011021
 8005d24:	08007dac 	.word	0x08007dac

08005d28 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d28:	2901      	cmp	r1, #1
{
 8005d2a:	b570      	push	{r4, r5, r6, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d30:	d801      	bhi.n	8005d36 <remove_chain+0xe>
		res = FR_INT_ERR;
 8005d32:	2002      	movs	r0, #2
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d36:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005d3a:	4299      	cmp	r1, r3
 8005d3c:	d2f9      	bcs.n	8005d32 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005d3e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005d42:	429d      	cmp	r5, r3
 8005d44:	d205      	bcs.n	8005d52 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005d46:	4629      	mov	r1, r5
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f7ff fac3 	bl	80052d4 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8005d4e:	4606      	mov	r6, r0
 8005d50:	b908      	cbnz	r0, 8005d56 <remove_chain+0x2e>
		res = FR_INT_ERR;
 8005d52:	2000      	movs	r0, #0
 8005d54:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005d56:	2801      	cmp	r0, #1
 8005d58:	d0eb      	beq.n	8005d32 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005d5a:	1c41      	adds	r1, r0, #1
 8005d5c:	d014      	beq.n	8005d88 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4629      	mov	r1, r5
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7ff fb66 	bl	8005434 <put_fat>
			if (res != FR_OK) break;
 8005d68:	b978      	cbnz	r0, 8005d8a <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005d6a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	d008      	beq.n	8005d84 <remove_chain+0x5c>
				fs->free_clust++;
 8005d72:	3301      	adds	r3, #1
 8005d74:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005d78:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8005d7c:	f043 0301 	orr.w	r3, r3, #1
 8005d80:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 8005d84:	4635      	mov	r5, r6
 8005d86:	e7da      	b.n	8005d3e <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005d88:	2001      	movs	r0, #1
}
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}

08005d8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005d8e:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005d90:	a804      	add	r0, sp, #16
{
 8005d92:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8005d94:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8005d98:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 8005d9a:	f7ff f83a 	bl	8004e12 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d9e:	1e05      	subs	r5, r0, #0
 8005da0:	db21      	blt.n	8005de6 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005da2:	4913      	ldr	r1, [pc, #76]	; (8005df0 <f_mount+0x64>)
 8005da4:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8005da8:	b164      	cbz	r4, 8005dc4 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <f_mount+0x68>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4294      	cmp	r4, r2
 8005db0:	bf04      	itt	eq
 8005db2:	2200      	moveq	r2, #0
 8005db4:	601a      	streq	r2, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	2000      	movs	r0, #0
 8005dba:	4294      	cmp	r4, r2
 8005dbc:	bf08      	it	eq
 8005dbe:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005dc0:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 8005dc4:	9801      	ldr	r0, [sp, #4]
 8005dc6:	b110      	cbz	r0, 8005dce <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005dce:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005dd2:	b130      	cbz	r0, 8005de2 <f_mount+0x56>
 8005dd4:	2e01      	cmp	r6, #1
 8005dd6:	d108      	bne.n	8005dea <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4669      	mov	r1, sp
 8005ddc:	a801      	add	r0, sp, #4
 8005dde:	f7ff f92b 	bl	8005038 <find_volume>
	LEAVE_FF(fs, res);
}
 8005de2:	b004      	add	sp, #16
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8005de6:	200b      	movs	r0, #11
 8005de8:	e7fb      	b.n	8005de2 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005dea:	2000      	movs	r0, #0
 8005dec:	e7f9      	b.n	8005de2 <f_mount+0x56>
 8005dee:	bf00      	nop
 8005df0:	200001dc 	.word	0x200001dc
 8005df4:	200001e0 	.word	0x200001e0

08005df8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8005e00:	4691      	mov	r9, r2
 8005e02:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005e04:	4606      	mov	r6, r0
 8005e06:	2800      	cmp	r0, #0
 8005e08:	f000 80cb 	beq.w	8005fa2 <f_open+0x1aa>
	fp->fs = 0;			/* Clear file object */
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005e12:	f002 021e 	and.w	r2, r2, #30
 8005e16:	a901      	add	r1, sp, #4
 8005e18:	a886      	add	r0, sp, #536	; 0x218
 8005e1a:	f7ff f90d 	bl	8005038 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f040 80c1 	bne.w	8005fa6 <f_open+0x1ae>
		INIT_BUF(dj);
 8005e24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005e28:	f000 fc06 	bl	8006638 <ff_memalloc>
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f000 80bb 	beq.w	8005faa <f_open+0x1b2>
 8005e34:	908e      	str	r0, [sp, #568]	; 0x238
 8005e36:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e38:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8005e3a:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e3c:	a806      	add	r0, sp, #24
 8005e3e:	f7ff fcf9 	bl	8005834 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005e42:	f009 071f 	and.w	r7, r9, #31
		dir = dj.dir;
 8005e46:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005e48:	4604      	mov	r4, r0
 8005e4a:	b950      	cbnz	r0, 8005e62 <f_open+0x6a>
			if (!dir)	/* Default directory itself */
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	d03f      	beq.n	8005ed0 <f_open+0xd8>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005e50:	f017 0f1e 	tst.w	r7, #30
 8005e54:	bf14      	ite	ne
 8005e56:	2101      	movne	r1, #1
 8005e58:	2100      	moveq	r1, #0
 8005e5a:	a806      	add	r0, sp, #24
 8005e5c:	f7fe ff38 	bl	8004cd0 <chk_lock>
 8005e60:	4604      	mov	r4, r0
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005e62:	f019 0f1c 	tst.w	r9, #28
 8005e66:	f000 808c 	beq.w	8005f82 <f_open+0x18a>
			if (res != FR_OK) {					/* No file, create new */
 8005e6a:	b39c      	cbz	r4, 8005ed4 <f_open+0xdc>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005e6c:	2c04      	cmp	r4, #4
 8005e6e:	d109      	bne.n	8005e84 <f_open+0x8c>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e70:	4b51      	ldr	r3, [pc, #324]	; (8005fb8 <f_open+0x1c0>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	f000 809a 	beq.w	8005fae <f_open+0x1b6>
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8096 	beq.w	8005fae <f_open+0x1b6>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005e82:	2412      	movs	r4, #18
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005e84:	f047 0708 	orr.w	r7, r7, #8
				dir = dj.dir;					/* New entry */
 8005e88:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005e8a:	b354      	cbz	r4, 8005ee2 <f_open+0xea>
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	f000 fbd5 	bl	800663c <ff_memfree>

		if (res == FR_OK) {
 8005e92:	b9c4      	cbnz	r4, 8005ec6 <f_open+0xce>
			fp->flag = mode;					/* File access mode */
 8005e94:	f886 7206 	strb.w	r7, [r6, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005e98:	9f86      	ldr	r7, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8005e9a:	f886 4207 	strb.w	r4, [r6, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005e9e:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fe ffe4 	bl	8004e70 <ld_clust.isra.0>
 8005ea8:	f8c6 0210 	str.w	r0, [r6, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005eac:	69eb      	ldr	r3, [r5, #28]
 8005eae:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
			fp->id = fp->fs->id;
 8005eb2:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 8005eb6:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208
			fp->dsect = 0;
 8005eba:	f8c6 4218 	str.w	r4, [r6, #536]	; 0x218
			fp->fs = dj.fs;	 					/* Validate file object */
 8005ebe:	f8c6 7200 	str.w	r7, [r6, #512]	; 0x200
			fp->id = fp->fs->id;
 8005ec2:	f8a6 3204 	strh.w	r3, [r6, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 8005ed0:	2406      	movs	r4, #6
 8005ed2:	e7c6      	b.n	8005e62 <f_open+0x6a>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005ed4:	7aeb      	ldrb	r3, [r5, #11]
 8005ed6:	f013 0f11 	tst.w	r3, #17
 8005eda:	d15c      	bne.n	8005f96 <f_open+0x19e>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005edc:	f019 0f04 	tst.w	r9, #4
 8005ee0:	d15b      	bne.n	8005f9a <f_open+0x1a2>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005ee2:	073b      	lsls	r3, r7, #28
 8005ee4:	d533      	bpl.n	8005f4e <f_open+0x156>
				dw = GET_FATTIME();				/* Created time */
 8005ee6:	f7fe fedf 	bl	8004ca8 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005eea:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005eee:	2400      	movs	r4, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005ef0:	73a8      	strb	r0, [r5, #14]
 8005ef2:	73eb      	strb	r3, [r5, #15]
 8005ef4:	0c03      	lsrs	r3, r0, #16
 8005ef6:	0e00      	lsrs	r0, r0, #24
 8005ef8:	742b      	strb	r3, [r5, #16]
 8005efa:	7468      	strb	r0, [r5, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005efc:	72ec      	strb	r4, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005efe:	772c      	strb	r4, [r5, #28]
 8005f00:	776c      	strb	r4, [r5, #29]
 8005f02:	77ac      	strb	r4, [r5, #30]
 8005f04:	77ec      	strb	r4, [r5, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005f06:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8005f0e:	f7fe ffaf 	bl	8004e70 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005f12:	76ac      	strb	r4, [r5, #26]
 8005f14:	76ec      	strb	r4, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005f16:	752c      	strb	r4, [r5, #20]
 8005f18:	756c      	strb	r4, [r5, #21]
				dj.fs->wflag = 1;
 8005f1a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005f22:	4681      	mov	r9, r0
 8005f24:	b198      	cbz	r0, 8005f4e <f_open+0x156>
					res = remove_chain(dj.fs, cl);
 8005f26:	4601      	mov	r1, r0
 8005f28:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8005f2a:	f8d3 a22c 	ldr.w	sl, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8005f2e:	f7ff fefb 	bl	8005d28 <remove_chain>
					if (res == FR_OK) {
 8005f32:	4604      	mov	r4, r0
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d1a9      	bne.n	8005e8c <f_open+0x94>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005f38:	9886      	ldr	r0, [sp, #536]	; 0x218
 8005f3a:	f109 33ff 	add.w	r3, r9, #4294967295
 8005f3e:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005f42:	4651      	mov	r1, sl
 8005f44:	f7ff f82f 	bl	8004fa6 <move_window>
		if (res == FR_OK) {
 8005f48:	4604      	mov	r4, r0
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d19e      	bne.n	8005e8c <f_open+0x94>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005f4e:	073b      	lsls	r3, r7, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005f50:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8005f52:	bf48      	it	mi
 8005f54:	f047 0720 	orrmi.w	r7, r7, #32
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f58:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005f5c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005f60:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f64:	bf14      	ite	ne
 8005f66:	2101      	movne	r1, #1
 8005f68:	2100      	moveq	r1, #0
			fp->dir_ptr = dir;
 8005f6a:	f8c6 5220 	str.w	r5, [r6, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f6e:	a806      	add	r0, sp, #24
 8005f70:	f7fe fee0 	bl	8004d34 <inc_lock>
			if (!fp->lockid) res = FR_INT_ERR;
 8005f74:	2800      	cmp	r0, #0
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f76:	f8c6 0224 	str.w	r0, [r6, #548]	; 0x224
			if (!fp->lockid) res = FR_INT_ERR;
 8005f7a:	bf14      	ite	ne
 8005f7c:	2400      	movne	r4, #0
 8005f7e:	2402      	moveq	r4, #2
 8005f80:	e784      	b.n	8005e8c <f_open+0x94>
			if (res == FR_OK) {					/* Follow succeeded */
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	d182      	bne.n	8005e8c <f_open+0x94>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005f86:	7aeb      	ldrb	r3, [r5, #11]
 8005f88:	06d8      	lsls	r0, r3, #27
 8005f8a:	d408      	bmi.n	8005f9e <f_open+0x1a6>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005f8c:	f019 0f02 	tst.w	r9, #2
 8005f90:	d0dd      	beq.n	8005f4e <f_open+0x156>
 8005f92:	07da      	lsls	r2, r3, #31
 8005f94:	d5db      	bpl.n	8005f4e <f_open+0x156>
						res = FR_DENIED;
 8005f96:	2407      	movs	r4, #7
 8005f98:	e778      	b.n	8005e8c <f_open+0x94>
						res = FR_EXIST;
 8005f9a:	2408      	movs	r4, #8
 8005f9c:	e776      	b.n	8005e8c <f_open+0x94>
					res = FR_NO_FILE;
 8005f9e:	2404      	movs	r4, #4
 8005fa0:	e774      	b.n	8005e8c <f_open+0x94>
	if (!fp) return FR_INVALID_OBJECT;
 8005fa2:	2409      	movs	r4, #9
 8005fa4:	e78f      	b.n	8005ec6 <f_open+0xce>
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	e78d      	b.n	8005ec6 <f_open+0xce>
		INIT_BUF(dj);
 8005faa:	2411      	movs	r4, #17
 8005fac:	e78b      	b.n	8005ec6 <f_open+0xce>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005fae:	a806      	add	r0, sp, #24
 8005fb0:	f7ff fd80 	bl	8005ab4 <dir_register>
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	e765      	b.n	8005e84 <f_open+0x8c>
 8005fb8:	200001e0 	.word	0x200001e0

08005fbc <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc0:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8cb 3000 	str.w	r3, [fp]
{
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4689      	mov	r9, r1
 8005fcc:	4615      	mov	r5, r2

	res = validate(fp);							/* Check validity */
 8005fce:	f7fe ff38 	bl	8004e42 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	bb58      	cbnz	r0, 800602e <f_read+0x72>
	if (fp->err)								/* Check error */
 8005fd6:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 80a7 	bne.w	800612e <f_read+0x172>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005fe0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005fe4:	07d8      	lsls	r0, r3, #31
 8005fe6:	f140 80a4 	bpl.w	8006132 <f_read+0x176>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8005fea:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005fee:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 8005ff2:	1bdf      	subs	r7, r3, r7
 8005ff4:	42af      	cmp	r7, r5
 8005ff6:	bf28      	it	cs
 8005ff8:	462f      	movcs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8005ffa:	b1c7      	cbz	r7, 800602e <f_read+0x72>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005ffc:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8006000:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 8083 	bne.w	8006110 <f_read+0x154>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800600a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800600e:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8006012:	3b01      	subs	r3, #1
 8006014:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8006018:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800601c:	d118      	bne.n	8006050 <f_read+0x94>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800601e:	b952      	cbnz	r2, 8006036 <f_read+0x7a>
					clst = fp->sclust;			/* Follow from the origin */
 8006020:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006024:	2801      	cmp	r0, #1
 8006026:	d80d      	bhi.n	8006044 <f_read+0x88>
 8006028:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800602a:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 800602e:	4630      	mov	r0, r6
 8006030:	b003      	add	sp, #12
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006036:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	f7ff f94a 	bl	80052d4 <get_fat>
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	e7ef      	b.n	8006024 <f_read+0x68>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006044:	1c41      	adds	r1, r0, #1
 8006046:	d101      	bne.n	800604c <f_read+0x90>
 8006048:	2601      	movs	r6, #1
 800604a:	e7ee      	b.n	800602a <f_read+0x6e>
				fp->clust = clst;				/* Update current cluster */
 800604c:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006050:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8006054:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	4650      	mov	r0, sl
 800605c:	f7ff f92c 	bl	80052b8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006060:	2800      	cmp	r0, #0
 8006062:	d0e1      	beq.n	8006028 <f_read+0x6c>
			sect += csect;
 8006064:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006066:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8006068:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800606c:	d02d      	beq.n	80060ca <f_read+0x10e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800606e:	f89a 2202 	ldrb.w	r2, [sl, #514]	; 0x202
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006072:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006076:	1959      	adds	r1, r3, r5
 8006078:	4291      	cmp	r1, r2
					cc = fp->fs->csize - csect;
 800607a:	bf88      	it	hi
 800607c:	1ad5      	subhi	r5, r2, r3
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800607e:	462b      	mov	r3, r5
 8006080:	4642      	mov	r2, r8
 8006082:	4649      	mov	r1, r9
 8006084:	f7fe fde6 	bl	8004c54 <disk_read>
 8006088:	2800      	cmp	r0, #0
 800608a:	d1dd      	bne.n	8006048 <f_read+0x8c>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800608c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006090:	065a      	lsls	r2, r3, #25
 8006092:	d50c      	bpl.n	80060ae <f_read+0xf2>
 8006094:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8006098:	eba0 0008 	sub.w	r0, r0, r8
 800609c:	4285      	cmp	r5, r0
 800609e:	d906      	bls.n	80060ae <f_read+0xf2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80060a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a4:	4621      	mov	r1, r4
 80060a6:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 80060aa:	f7fe fdff 	bl	8004cac <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80060ae:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80060b0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80060b4:	442b      	add	r3, r5
 80060b6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80060ba:	f8db 3000 	ldr.w	r3, [fp]
 80060be:	442b      	add	r3, r5
 80060c0:	44a9      	add	r9, r5
 80060c2:	f8cb 3000 	str.w	r3, [fp]
 80060c6:	1b7f      	subs	r7, r7, r5
 80060c8:	e797      	b.n	8005ffa <f_read+0x3e>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80060ca:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80060ce:	4590      	cmp	r8, r2
 80060d0:	d01c      	beq.n	800610c <f_read+0x150>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80060d2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80060d6:	065b      	lsls	r3, r3, #25
 80060d8:	d50d      	bpl.n	80060f6 <f_read+0x13a>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80060da:	2301      	movs	r3, #1
 80060dc:	4621      	mov	r1, r4
 80060de:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 80060e2:	f7fe fdc5 	bl	8004c70 <disk_write>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d1ae      	bne.n	8006048 <f_read+0x8c>
					fp->flag &= ~FA__DIRTY;
 80060ea:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80060ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80060f6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80060fa:	2301      	movs	r3, #1
 80060fc:	4642      	mov	r2, r8
 80060fe:	4621      	mov	r1, r4
 8006100:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8006104:	f7fe fda6 	bl	8004c54 <disk_read>
 8006108:	2800      	cmp	r0, #0
 800610a:	d19d      	bne.n	8006048 <f_read+0x8c>
			fp->dsect = sect;
 800610c:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006110:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8006114:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006118:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 800611c:	42bd      	cmp	r5, r7
 800611e:	bf28      	it	cs
 8006120:	463d      	movcs	r5, r7
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006122:	462a      	mov	r2, r5
 8006124:	4421      	add	r1, r4
 8006126:	4648      	mov	r0, r9
 8006128:	f7fe fdc0 	bl	8004cac <mem_cpy>
 800612c:	e7c0      	b.n	80060b0 <f_read+0xf4>
 800612e:	461e      	mov	r6, r3
 8006130:	e77d      	b.n	800602e <f_read+0x72>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006132:	2607      	movs	r6, #7
 8006134:	e77b      	b.n	800602e <f_read+0x72>

08006136 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006136:	b570      	push	{r4, r5, r6, lr}
 8006138:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800613a:	f7fe fe82 	bl	8004e42 <validate>
	if (res == FR_OK) {
 800613e:	2800      	cmp	r0, #0
 8006140:	d158      	bne.n	80061f4 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006142:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006146:	069a      	lsls	r2, r3, #26
 8006148:	d554      	bpl.n	80061f4 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800614a:	065b      	lsls	r3, r3, #25
 800614c:	d511      	bpl.n	8006172 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800614e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006152:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8006156:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800615a:	2301      	movs	r3, #1
 800615c:	4621      	mov	r1, r4
 800615e:	f7fe fd87 	bl	8004c70 <disk_write>
 8006162:	2800      	cmp	r0, #0
 8006164:	d145      	bne.n	80061f2 <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8006166:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800616a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006172:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8006176:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800617a:	f7fe ff14 	bl	8004fa6 <move_window>
 800617e:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8006180:	bbc0      	cbnz	r0, 80061f4 <f_sync+0xbe>
				dir = fp->dir_ptr;
 8006182:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006186:	7aeb      	ldrb	r3, [r5, #11]
 8006188:	f043 0320 	orr.w	r3, r3, #32
 800618c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800618e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8006192:	772b      	strb	r3, [r5, #28]
 8006194:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	776b      	strb	r3, [r5, #29]
 800619c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80061a0:	77ab      	strb	r3, [r5, #30]
 80061a2:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 80061a6:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80061a8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 80061ac:	76ab      	strb	r3, [r5, #26]
 80061ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	752b      	strb	r3, [r5, #20]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80061ba:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 80061bc:	f7fe fd74 	bl	8004ca8 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 80061c0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80061c4:	75a8      	strb	r0, [r5, #22]
 80061c6:	75eb      	strb	r3, [r5, #23]
 80061c8:	0c03      	lsrs	r3, r0, #16
 80061ca:	0e00      	lsrs	r0, r0, #24
 80061cc:	762b      	strb	r3, [r5, #24]
 80061ce:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80061d0:	74ae      	strb	r6, [r5, #18]
 80061d2:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 80061d4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80061d8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 80061dc:	f023 0320 	bic.w	r3, r3, #32
 80061e0:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80061ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80061ee:	f7fe be7d 	b.w	8004eec <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80061f2:	2001      	movs	r0, #1
}
 80061f4:	bd70      	pop	{r4, r5, r6, pc}

080061f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80061f6:	b510      	push	{r4, lr}
 80061f8:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80061fa:	f7ff ff9c 	bl	8006136 <f_sync>
	if (res == FR_OK)
 80061fe:	b950      	cbnz	r0, 8006216 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006200:	4620      	mov	r0, r4
 8006202:	f7fe fe1e 	bl	8004e42 <validate>
		if (res == FR_OK) {
 8006206:	b930      	cbnz	r0, 8006216 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006208:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
 800620c:	f7fe fdd6 	bl	8004dbc <dec_lock>
			if (res == FR_OK)
 8006210:	b908      	cbnz	r0, 8006216 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006212:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8006216:	bd10      	pop	{r4, pc}

08006218 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	4604      	mov	r4, r0
 800621c:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800621e:	f7fe fe10 	bl	8004e42 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006222:	4606      	mov	r6, r0
 8006224:	2800      	cmp	r0, #0
 8006226:	f040 8087 	bne.w	8006338 <f_lseek+0x120>
	if (fp->err)						/* Check error */
 800622a:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 80af 	bne.w	8006392 <f_lseek+0x17a>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006234:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8006238:	42ab      	cmp	r3, r5
 800623a:	d205      	bcs.n	8006248 <f_lseek+0x30>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800623c:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8006240:	f012 0f02 	tst.w	r2, #2
 8006244:	bf08      	it	eq
 8006246:	461d      	moveq	r5, r3
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8006248:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800624a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800624e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 8006252:	2d00      	cmp	r5, #0
 8006254:	d13b      	bne.n	80062ce <f_lseek+0xb6>
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006256:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800625a:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800625e:	4293      	cmp	r3, r2
 8006260:	d96a      	bls.n	8006338 <f_lseek+0x120>
			fp->fsize = fp->fptr;
 8006262:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8006266:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8006272:	e061      	b.n	8006338 <f_lseek+0x120>
		fp->fptr = nsect = 0;
 8006274:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006276:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800627a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0e9      	beq.n	8006256 <f_lseek+0x3e>
 8006282:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8006286:	4295      	cmp	r5, r2
 8006288:	d0e5      	beq.n	8006256 <f_lseek+0x3e>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800628a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800628e:	065b      	lsls	r3, r3, #25
 8006290:	d50f      	bpl.n	80062b2 <f_lseek+0x9a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006292:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006296:	2301      	movs	r3, #1
 8006298:	4621      	mov	r1, r4
 800629a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800629e:	f7fe fce7 	bl	8004c70 <disk_write>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d14c      	bne.n	8006340 <f_lseek+0x128>
				fp->flag &= ~FA__DIRTY;
 80062a6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80062aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ae:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80062b2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80062b6:	2301      	movs	r3, #1
 80062b8:	462a      	mov	r2, r5
 80062ba:	4621      	mov	r1, r4
 80062bc:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80062c0:	f7fe fcc8 	bl	8004c54 <disk_read>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d13b      	bne.n	8006340 <f_lseek+0x128>
			fp->dsect = nsect;
 80062c8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 80062cc:	e7c3      	b.n	8006256 <f_lseek+0x3e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80062ce:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80062d2:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80062d6:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80062d8:	b31b      	cbz	r3, 8006322 <f_lseek+0x10a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80062da:	3b01      	subs	r3, #1
 80062dc:	1e6a      	subs	r2, r5, #1
 80062de:	fbb3 f1f7 	udiv	r1, r3, r7
 80062e2:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80062e6:	428a      	cmp	r2, r1
 80062e8:	d31b      	bcc.n	8006322 <f_lseek+0x10a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80062ea:	427a      	negs	r2, r7
 80062ec:	4013      	ands	r3, r2
				clst = fp->clust;
 80062ee:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80062f2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 80062f6:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 80062f8:	2900      	cmp	r1, #0
 80062fa:	d0bb      	beq.n	8006274 <f_lseek+0x5c>
				while (ofs > bcs) {						/* Cluster following loop */
 80062fc:	42bd      	cmp	r5, r7
 80062fe:	d826      	bhi.n	800634e <f_lseek+0x136>
				fp->fptr += ofs;
 8006300:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8006304:	442b      	add	r3, r5
 8006306:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800630a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0b0      	beq.n	8006274 <f_lseek+0x5c>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006312:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006316:	f7fe ffcf 	bl	80052b8 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800631a:	b150      	cbz	r0, 8006332 <f_lseek+0x11a>
					nsect += ofs / SS(fp->fs);
 800631c:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8006320:	e7a9      	b.n	8006276 <f_lseek+0x5e>
				clst = fp->sclust;						/* start from the first cluster */
 8006322:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006326:	b979      	cbnz	r1, 8006348 <f_lseek+0x130>
					clst = create_chain(fp->fs, 0);
 8006328:	f7ff f8fe 	bl	8005528 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800632c:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800632e:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006330:	d104      	bne.n	800633c <f_lseek+0x124>
 8006332:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006334:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8006338:	4630      	mov	r0, r6
 800633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800633c:	1c42      	adds	r2, r0, #1
 800633e:	d101      	bne.n	8006344 <f_lseek+0x12c>
 8006340:	2601      	movs	r6, #1
 8006342:	e7f7      	b.n	8006334 <f_lseek+0x11c>
					fp->sclust = clst;
 8006344:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 8006348:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800634c:	e7d4      	b.n	80062f8 <f_lseek+0xe0>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800634e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006352:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006356:	079b      	lsls	r3, r3, #30
 8006358:	d505      	bpl.n	8006366 <f_lseek+0x14e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800635a:	f7ff f8e5 	bl	8005528 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800635e:	4601      	mov	r1, r0
 8006360:	b920      	cbnz	r0, 800636c <f_lseek+0x154>
 8006362:	463d      	mov	r5, r7
 8006364:	e7cc      	b.n	8006300 <f_lseek+0xe8>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006366:	f7fe ffb5 	bl	80052d4 <get_fat>
 800636a:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800636c:	1c4a      	adds	r2, r1, #1
 800636e:	d0e7      	beq.n	8006340 <f_lseek+0x128>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006370:	2901      	cmp	r1, #1
 8006372:	d9de      	bls.n	8006332 <f_lseek+0x11a>
 8006374:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8006378:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800637c:	4299      	cmp	r1, r3
 800637e:	d2d8      	bcs.n	8006332 <f_lseek+0x11a>
					fp->fptr += bcs;
 8006380:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 8006384:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8006388:	443b      	add	r3, r7
 800638a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800638e:	1bed      	subs	r5, r5, r7
 8006390:	e7b4      	b.n	80062fc <f_lseek+0xe4>
 8006392:	461e      	mov	r6, r3
 8006394:	e7d0      	b.n	8006338 <f_lseek+0x120>

08006396 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006396:	b570      	push	{r4, r5, r6, lr}
 8006398:	b086      	sub	sp, #24
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800639a:	4605      	mov	r5, r0
{
 800639c:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800639e:	2800      	cmp	r0, #0
 80063a0:	d051      	beq.n	8006446 <f_opendir+0xb0>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 80063a2:	2200      	movs	r2, #0
 80063a4:	a901      	add	r1, sp, #4
 80063a6:	a802      	add	r0, sp, #8
 80063a8:	f7fe fe46 	bl	8005038 <find_volume>
	if (res == FR_OK) {
 80063ac:	4604      	mov	r4, r0
 80063ae:	bb90      	cbnz	r0, 8006416 <f_opendir+0x80>
		dp->fs = fs;
 80063b0:	9b02      	ldr	r3, [sp, #8]
 80063b2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 80063b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063ba:	f000 f93d 	bl	8006638 <ff_memalloc>
 80063be:	4606      	mov	r6, r0
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d042      	beq.n	800644a <f_opendir+0xb4>
 80063c4:	ab03      	add	r3, sp, #12
 80063c6:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
 80063ca:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80063ce:	9901      	ldr	r1, [sp, #4]
 80063d0:	4628      	mov	r0, r5
 80063d2:	f7ff fa2f 	bl	8005834 <follow_path>
 80063d6:	4604      	mov	r4, r0
		FREE_BUF();
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 f92f 	bl	800663c <ff_memfree>
		if (res == FR_OK) {						/* Follow completed */
 80063de:	b9bc      	cbnz	r4, 8006410 <f_opendir+0x7a>
			if (dp->dir) {						/* It is not the origin directory itself */
 80063e0:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 80063e4:	b149      	cbz	r1, 80063fa <f_opendir+0x64>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80063e6:	7acb      	ldrb	r3, [r1, #11]
 80063e8:	06db      	lsls	r3, r3, #27
 80063ea:	d528      	bpl.n	800643e <f_opendir+0xa8>
					dp->sclust = ld_clust(fs, dp->dir);
 80063ec:	9b02      	ldr	r3, [sp, #8]
 80063ee:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80063f2:	f7fe fd3d 	bl	8004e70 <ld_clust.isra.0>
 80063f6:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 80063fa:	9b02      	ldr	r3, [sp, #8]
 80063fc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006400:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006404:	2100      	movs	r1, #0
 8006406:	4628      	mov	r0, r5
 8006408:	f7fe ffc5 	bl	8005396 <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 800640c:	4604      	mov	r4, r0
 800640e:	b130      	cbz	r0, 800641e <f_opendir+0x88>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006410:	2c04      	cmp	r4, #4
 8006412:	bf08      	it	eq
 8006414:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8006416:	2300      	movs	r3, #0
 8006418:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 800641c:	e009      	b.n	8006432 <f_opendir+0x9c>
					if (dp->sclust) {
 800641e:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8006422:	b14b      	cbz	r3, 8006438 <f_opendir+0xa2>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f7fe fc84 	bl	8004d34 <inc_lock>
 800642c:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 8006430:	b138      	cbz	r0, 8006442 <f_opendir+0xac>

	LEAVE_FF(fs, res);
}
 8006432:	4620      	mov	r0, r4
 8006434:	b006      	add	sp, #24
 8006436:	bd70      	pop	{r4, r5, r6, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 8006438:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 800643c:	e7f9      	b.n	8006432 <f_opendir+0x9c>
					res = FR_NO_PATH;
 800643e:	2405      	movs	r4, #5
 8006440:	e7e9      	b.n	8006416 <f_opendir+0x80>
							res = FR_TOO_MANY_OPEN_FILES;
 8006442:	2412      	movs	r4, #18
 8006444:	e7e7      	b.n	8006416 <f_opendir+0x80>
	if (!dp) return FR_INVALID_OBJECT;
 8006446:	2409      	movs	r4, #9
 8006448:	e7f3      	b.n	8006432 <f_opendir+0x9c>
		INIT_BUF(*dp);
 800644a:	2411      	movs	r4, #17
 800644c:	e7f1      	b.n	8006432 <f_opendir+0x9c>
	...

08006450 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006450:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <FATFS_LinkDriverEx+0x40>)
 8006454:	7a5c      	ldrb	r4, [r3, #9]
 8006456:	2c01      	cmp	r4, #1
 8006458:	d818      	bhi.n	800648c <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800645a:	7a5d      	ldrb	r5, [r3, #9]
 800645c:	b2ed      	uxtb	r5, r5
 800645e:	2400      	movs	r4, #0
 8006460:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8006462:	7a5d      	ldrb	r5, [r3, #9]
 8006464:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006468:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800646a:	7a58      	ldrb	r0, [r3, #9]
 800646c:	4418      	add	r0, r3
 800646e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006470:	7a5a      	ldrb	r2, [r3, #9]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	1c50      	adds	r0, r2, #1
 8006476:	b2c0      	uxtb	r0, r0
 8006478:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800647a:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800647c:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800647e:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006480:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8006482:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8006484:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006486:	70cc      	strb	r4, [r1, #3]
 8006488:	4620      	mov	r0, r4
 800648a:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800648c:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800648e:	bd30      	pop	{r4, r5, pc}
 8006490:	200001fc 	.word	0x200001fc

08006494 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006494:	2200      	movs	r2, #0
 8006496:	f7ff bfdb 	b.w	8006450 <FATFS_LinkDriverEx>

0800649a <USBH_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
  return RES_OK;
}
 800649a:	2000      	movs	r0, #0
 800649c:	4770      	bx	lr
	...

080064a0 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 80064a0:	4601      	mov	r1, r0
{
 80064a2:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 80064a4:	4803      	ldr	r0, [pc, #12]	; (80064b4 <USBH_status+0x14>)
 80064a6:	f000 faf0 	bl	8006a8a <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80064aa:	fab0 f080 	clz	r0, r0
 80064ae:	0940      	lsrs	r0, r0, #5
 80064b0:	bd08      	pop	{r3, pc}
 80064b2:	bf00      	nop
 80064b4:	20000414 	.word	0x20000414

080064b8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	4606      	mov	r6, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80064be:	0788      	lsls	r0, r1, #30
{
 80064c0:	b090      	sub	sp, #64	; 0x40
 80064c2:	4690      	mov	r8, r2
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80064c4:	d032      	beq.n	800652c <USBH_read+0x74>
 80064c6:	4c1f      	ldr	r4, [pc, #124]	; (8006544 <USBH_read+0x8c>)
  {
#if _USE_BUFF_WO_ALIGNMENT == 0
    while ((count--)&&(status == USBH_OK))
    {
      status = USBH_MSC_Read(&HOST_HANDLE, lun, sector + count, (uint8_t *)scratch, 1);
 80064c8:	4f1f      	ldr	r7, [pc, #124]	; (8006548 <USBH_read+0x90>)
 80064ca:	f8df a080 	ldr.w	sl, [pc, #128]	; 800654c <USBH_read+0x94>
 80064ce:	441c      	add	r4, r3
 80064d0:	1e5d      	subs	r5, r3, #1
 80064d2:	eb01 2444 	add.w	r4, r1, r4, lsl #9
 80064d6:	f04f 0901 	mov.w	r9, #1
    while ((count--)&&(status == USBH_OK))
 80064da:	1c6b      	adds	r3, r5, #1
 80064dc:	d101      	bne.n	80064e2 <USBH_read+0x2a>
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
  }
  
  if(status == USBH_OK)
  {
    res = RES_OK;
 80064de:	2000      	movs	r0, #0
 80064e0:	e018      	b.n	8006514 <USBH_read+0x5c>
      status = USBH_MSC_Read(&HOST_HANDLE, lun, sector + count, (uint8_t *)scratch, 1);
 80064e2:	eb08 0205 	add.w	r2, r8, r5
 80064e6:	f8cd 9000 	str.w	r9, [sp]
 80064ea:	463b      	mov	r3, r7
 80064ec:	4631      	mov	r1, r6
 80064ee:	4650      	mov	r0, sl
 80064f0:	f000 faf4 	bl	8006adc <USBH_MSC_Read>
 80064f4:	3d01      	subs	r5, #1
      if(status == USBH_OK)
 80064f6:	b180      	cbz	r0, 800651a <USBH_read+0x62>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80064f8:	aa03      	add	r2, sp, #12
 80064fa:	4631      	mov	r1, r6
 80064fc:	4813      	ldr	r0, [pc, #76]	; (800654c <USBH_read+0x94>)
 80064fe:	f000 fad5 	bl	8006aac <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8006502:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8006506:	2b28      	cmp	r3, #40	; 0x28
 8006508:	d019      	beq.n	800653e <USBH_read+0x86>
 800650a:	2b3a      	cmp	r3, #58	; 0x3a
 800650c:	d017      	beq.n	800653e <USBH_read+0x86>
 800650e:	2b04      	cmp	r3, #4
 8006510:	d015      	beq.n	800653e <USBH_read+0x86>
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
      break; 
      
    default:
      res = RES_ERROR;
 8006512:	2001      	movs	r0, #1
      break;
    }
  }
  
  return res;
}
 8006514:	b010      	add	sp, #64	; 0x40
 8006516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 800651a:	4620      	mov	r0, r4
 800651c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006520:	4639      	mov	r1, r7
 8006522:	f001 fac7 	bl	8007ab4 <memcpy>
 8006526:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
 800652a:	e7d6      	b.n	80064da <USBH_read+0x22>
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4807      	ldr	r0, [pc, #28]	; (800654c <USBH_read+0x94>)
 8006530:	460b      	mov	r3, r1
 8006532:	4631      	mov	r1, r6
 8006534:	f000 fad2 	bl	8006adc <USBH_MSC_Read>
  if(status == USBH_OK)
 8006538:	2800      	cmp	r0, #0
 800653a:	d0d0      	beq.n	80064de <USBH_read+0x26>
 800653c:	e7dc      	b.n	80064f8 <USBH_read+0x40>
      res = RES_NOTRDY;
 800653e:	2003      	movs	r0, #3
 8006540:	e7e8      	b.n	8006514 <USBH_read+0x5c>
 8006542:	bf00      	nop
 8006544:	007fffff 	.word	0x007fffff
 8006548:	20000208 	.word	0x20000208
 800654c:	20000414 	.word	0x20000414

08006550 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006550:	b510      	push	{r4, lr}
 8006552:	4614      	mov	r4, r2
 8006554:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  
  switch (cmd)
 8006556:	2903      	cmp	r1, #3
 8006558:	d803      	bhi.n	8006562 <USBH_ioctl+0x12>
 800655a:	e8df f001 	tbb	[pc, r1]
 800655e:	051a      	.short	0x051a
 8006560:	1010      	.short	0x1010
      res = RES_ERROR;
    }
    break;
    
  default:
    res = RES_PARERR;
 8006562:	2004      	movs	r0, #4
  }
  
  return res;
}
 8006564:	b00e      	add	sp, #56	; 0x38
 8006566:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8006568:	4601      	mov	r1, r0
 800656a:	aa01      	add	r2, sp, #4
 800656c:	480a      	ldr	r0, [pc, #40]	; (8006598 <USBH_ioctl+0x48>)
 800656e:	f000 fa9d 	bl	8006aac <USBH_MSC_GetLUNInfo>
 8006572:	b910      	cbnz	r0, 800657a <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_nbr;
 8006574:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	e7f4      	b.n	8006564 <USBH_ioctl+0x14>
      res = RES_ERROR;
 800657a:	2001      	movs	r0, #1
 800657c:	e7f2      	b.n	8006564 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800657e:	4601      	mov	r1, r0
 8006580:	aa01      	add	r2, sp, #4
 8006582:	4805      	ldr	r0, [pc, #20]	; (8006598 <USBH_ioctl+0x48>)
 8006584:	f000 fa92 	bl	8006aac <USBH_MSC_GetLUNInfo>
 8006588:	2800      	cmp	r0, #0
 800658a:	d1f6      	bne.n	800657a <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_size;
 800658c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006590:	e7f1      	b.n	8006576 <USBH_ioctl+0x26>
    res = RES_OK;
 8006592:	2000      	movs	r0, #0
 8006594:	e7e6      	b.n	8006564 <USBH_ioctl+0x14>
 8006596:	bf00      	nop
 8006598:	20000414 	.word	0x20000414

0800659c <USBH_write>:
{
 800659c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065a0:	4606      	mov	r6, r0
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80065a2:	0788      	lsls	r0, r1, #30
{
 80065a4:	b091      	sub	sp, #68	; 0x44
 80065a6:	4617      	mov	r7, r2
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80065a8:	d035      	beq.n	8006616 <USBH_write+0x7a>
 80065aa:	4c20      	ldr	r4, [pc, #128]	; (800662c <USBH_write+0x90>)
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 80065ac:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006634 <USBH_write+0x98>
      status = USBH_MSC_Write(&HOST_HANDLE, lun, sector + count, (BYTE *)scratch, 1) ;
 80065b0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8006630 <USBH_write+0x94>
 80065b4:	441c      	add	r4, r3
 80065b6:	1e5d      	subs	r5, r3, #1
 80065b8:	eb01 2444 	add.w	r4, r1, r4, lsl #9
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80065bc:	2000      	movs	r0, #0
    while (count--)
 80065be:	1c6b      	adds	r3, r5, #1
 80065c0:	d101      	bne.n	80065c6 <USBH_write+0x2a>
  if(status == USBH_OK)
 80065c2:	b308      	cbz	r0, 8006608 <USBH_write+0x6c>
 80065c4:	e013      	b.n	80065ee <USBH_write+0x52>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 80065c6:	4621      	mov	r1, r4
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	4640      	mov	r0, r8
 80065ce:	f001 fa71 	bl	8007ab4 <memcpy>
      status = USBH_MSC_Write(&HOST_HANDLE, lun, sector + count, (BYTE *)scratch, 1) ;
 80065d2:	2301      	movs	r3, #1
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	197a      	adds	r2, r7, r5
 80065d8:	4643      	mov	r3, r8
 80065da:	4631      	mov	r1, r6
 80065dc:	4648      	mov	r0, r9
 80065de:	f000 fac0 	bl	8006b62 <USBH_MSC_Write>
      if(status == USBH_FAIL)
 80065e2:	2802      	cmp	r0, #2
 80065e4:	f105 35ff 	add.w	r5, r5, #4294967295
 80065e8:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
 80065ec:	d1e7      	bne.n	80065be <USBH_write+0x22>
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80065ee:	aa03      	add	r2, sp, #12
 80065f0:	4631      	mov	r1, r6
 80065f2:	480f      	ldr	r0, [pc, #60]	; (8006630 <USBH_write+0x94>)
 80065f4:	f000 fa5a 	bl	8006aac <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 80065f8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80065fc:	2b27      	cmp	r3, #39	; 0x27
 80065fe:	d013      	beq.n	8006628 <USBH_write+0x8c>
 8006600:	d805      	bhi.n	800660e <USBH_write+0x72>
 8006602:	2b04      	cmp	r3, #4
 8006604:	d10e      	bne.n	8006624 <USBH_write+0x88>
      res = RES_NOTRDY;
 8006606:	2003      	movs	r0, #3
}
 8006608:	b011      	add	sp, #68	; 0x44
 800660a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (info.sense.asc)
 800660e:	2b28      	cmp	r3, #40	; 0x28
 8006610:	d0f9      	beq.n	8006606 <USBH_write+0x6a>
 8006612:	2b3a      	cmp	r3, #58	; 0x3a
 8006614:	e7f6      	b.n	8006604 <USBH_write+0x68>
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	4805      	ldr	r0, [pc, #20]	; (8006630 <USBH_write+0x94>)
 800661a:	460b      	mov	r3, r1
 800661c:	4631      	mov	r1, r6
 800661e:	f000 faa0 	bl	8006b62 <USBH_MSC_Write>
 8006622:	e7ce      	b.n	80065c2 <USBH_write+0x26>
      res = RES_ERROR;
 8006624:	2001      	movs	r0, #1
 8006626:	e7ef      	b.n	8006608 <USBH_write+0x6c>
      res = RES_WRPRT;
 8006628:	2002      	movs	r0, #2
 800662a:	e7ed      	b.n	8006608 <USBH_write+0x6c>
 800662c:	007fffff 	.word	0x007fffff
 8006630:	20000414 	.word	0x20000414
 8006634:	20000208 	.word	0x20000208

08006638 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006638:	f001 ba2c 	b.w	8007a94 <malloc>

0800663c <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	free(mblock);	/* Discard the memory block with POSIX API */
 800663c:	f001 ba32 	b.w	8007aa4 <free>

08006640 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006640:	287f      	cmp	r0, #127	; 0x7f
{
 8006642:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8006644:	d916      	bls.n	8006674 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006646:	b131      	cbz	r1, 8006656 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006648:	28ff      	cmp	r0, #255	; 0xff
 800664a:	d812      	bhi.n	8006672 <ff_convert+0x32>
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <ff_convert+0x38>)
 800664e:	3880      	subs	r0, #128	; 0x80
 8006650:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006654:	bd10      	pop	{r4, pc}

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 8006656:	4a08      	ldr	r2, [pc, #32]	; (8006678 <ff_convert+0x38>)
 8006658:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 800665c:	4284      	cmp	r4, r0
 800665e:	b28b      	uxth	r3, r1
 8006660:	d003      	beq.n	800666a <ff_convert+0x2a>
 8006662:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8006664:	2980      	cmp	r1, #128	; 0x80
 8006666:	d1f7      	bne.n	8006658 <ff_convert+0x18>
 8006668:	460b      	mov	r3, r1
			}
			c = (c + 0x80) & 0xFF;
 800666a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800666e:	b2c0      	uxtb	r0, r0
 8006670:	bd10      	pop	{r4, pc}
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006672:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8006674:	bd10      	pop	{r4, pc}
 8006676:	bf00      	nop
 8006678:	08007de0 	.word	0x08007de0

0800667c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800667c:	4906      	ldr	r1, [pc, #24]	; (8006698 <ff_wtoupper+0x1c>)
 800667e:	2300      	movs	r3, #0
 8006680:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006684:	b122      	cbz	r2, 8006690 <ff_wtoupper+0x14>
 8006686:	4282      	cmp	r2, r0
 8006688:	d103      	bne.n	8006692 <ff_wtoupper+0x16>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800668a:	4a04      	ldr	r2, [pc, #16]	; (800669c <ff_wtoupper+0x20>)
 800668c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
}
 8006690:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8006692:	3301      	adds	r3, #1
 8006694:	e7f4      	b.n	8006680 <ff_wtoupper+0x4>
 8006696:	bf00      	nop
 8006698:	08007ee0 	.word	0x08007ee0
 800669c:	080080c0 	.word	0x080080c0

080066a0 <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 80066a0:	2000      	movs	r0, #0
 80066a2:	4770      	bx	lr

080066a4 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066a4:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 80066a8:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066aa:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 80066ac:	7b2b      	ldrb	r3, [r5, #12]
{
 80066ae:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 80066b0:	b123      	cbz	r3, 80066bc <USBH_MSC_Process+0x18>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80066b2:	f113 30ff 	adds.w	r0, r3, #4294967295
 80066b6:	bf18      	it	ne
 80066b8:	2001      	movne	r0, #1
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 80066bc:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 80066c0:	682a      	ldr	r2, [r5, #0]
 80066c2:	4291      	cmp	r1, r2
 80066c4:	f04f 0401 	mov.w	r4, #1
 80066c8:	f080 80c6 	bcs.w	8006858 <USBH_MSC_Process+0x1b4>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80066cc:	2234      	movs	r2, #52	; 0x34
 80066ce:	fb02 5301 	mla	r3, r2, r1, r5
 80066d2:	f883 4091 	strb.w	r4, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80066d6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80066da:	4614      	mov	r4, r2
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d83a      	bhi.n	8006756 <USBH_MSC_Process+0xb2>
 80066e0:	e8df f003 	tbb	[pc, r3]
 80066e4:	64203905 	.word	0x64203905
 80066e8:	3939870e 	.word	0x3939870e
 80066ec:	b6          	.byte	0xb6
 80066ed:	00          	.byte	0x00
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80066ee:	fb04 5401 	mla	r4, r4, r1, r5
 80066f2:	2304      	movs	r3, #4
 80066f4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 80066f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80066fc:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006700:	2434      	movs	r4, #52	; 0x34
 8006702:	fb04 5201 	mla	r2, r4, r1, r5
 8006706:	329f      	adds	r2, #159	; 0x9f
 8006708:	b2c9      	uxtb	r1, r1
 800670a:	4630      	mov	r0, r6
 800670c:	f000 fbe7 	bl	8006ede <USBH_MSC_SCSI_Inquiry>
        if( scsi_status == USBH_OK)
 8006710:	2800      	cmp	r0, #0
 8006712:	d15f      	bne.n	80067d4 <USBH_MSC_Process+0x130>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 8006714:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006718:	fb04 5503 	mla	r5, r4, r3, r5
 800671c:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 800671e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8006722:	e018      	b.n	8006756 <USBH_MSC_Process+0xb2>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 8006724:	b2c9      	uxtb	r1, r1
 8006726:	f000 fb75 	bl	8006e14 <USBH_MSC_SCSI_TestUnitReady>
        if( ready_status == USBH_OK)
 800672a:	b9b0      	cbnz	r0, 800675a <USBH_MSC_Process+0xb6>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800672c:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006730:	2234      	movs	r2, #52	; 0x34
 8006732:	fb02 5103 	mla	r1, r2, r3, r5
 8006736:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 800673a:	b100      	cbz	r0, 800673e <USBH_MSC_Process+0x9a>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 800673c:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800673e:	fb02 5503 	mla	r5, r2, r3, r5
 8006742:	2303      	movs	r3, #3
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8006744:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006748:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006752:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006756:	2001      	movs	r0, #1
}
 8006758:	bd70      	pop	{r4, r5, r6, pc}
        if( ready_status == USBH_FAIL)
 800675a:	2802      	cmp	r0, #2
 800675c:	d118      	bne.n	8006790 <USBH_MSC_Process+0xec>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800675e:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006762:	2234      	movs	r2, #52	; 0x34
 8006764:	fb02 5103 	mla	r1, r2, r3, r5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8006768:	fb02 5503 	mla	r5, r2, r3, r5
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800676c:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8006770:	2802      	cmp	r0, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8006772:	bf14      	ite	ne
 8006774:	2001      	movne	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8006776:	2000      	moveq	r0, #0
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8006778:	2305      	movs	r3, #5
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 800677a:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 800677e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006782:	2001      	movs	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006784:	2302      	movs	r3, #2
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006786:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800678a:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 800678e:	bd70      	pop	{r4, r5, r6, pc}
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8006790:	2804      	cmp	r0, #4
 8006792:	d1e0      	bne.n	8006756 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006794:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006798:	2234      	movs	r2, #52	; 0x34
 800679a:	fb02 5503 	mla	r5, r2, r3, r5
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800679e:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80067a0:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067a2:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80067a6:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80067ac:	fb04 5201 	mla	r2, r4, r1, r5
 80067b0:	3294      	adds	r2, #148	; 0x94
 80067b2:	b2c9      	uxtb	r1, r1
 80067b4:	f000 fb54 	bl	8006e60 <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 80067b8:	b960      	cbnz	r0, 80067d4 <USBH_MSC_Process+0x130>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
 80067ba:	f8b5 20f8 	ldrh.w	r2, [r5, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067be:	2301      	movs	r3, #1
 80067c0:	fb04 5402 	mla	r4, r4, r2, r5
          MSC_Handle->current_lun++;
 80067c4:	441a      	add	r2, r3
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067c6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80067ca:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
          MSC_Handle->current_lun++;
 80067ce:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
 80067d2:	e7c0      	b.n	8006756 <USBH_MSC_Process+0xb2>
        else if( scsi_status == USBH_FAIL)
 80067d4:	2802      	cmp	r0, #2
 80067d6:	d105      	bne.n	80067e4 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80067d8:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80067dc:	fb04 5503 	mla	r5, r4, r3, r5
 80067e0:	2305      	movs	r3, #5
 80067e2:	e79c      	b.n	800671e <USBH_MSC_Process+0x7a>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80067e4:	2804      	cmp	r0, #4
 80067e6:	d1b6      	bne.n	8006756 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067e8:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80067ec:	fb04 5503 	mla	r5, r4, r3, r5
 80067f0:	e7d5      	b.n	800679e <USBH_MSC_Process+0xfa>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80067f2:	fb04 5201 	mla	r2, r4, r1, r5
 80067f6:	329c      	adds	r2, #156	; 0x9c
 80067f8:	b2c9      	uxtb	r1, r1
 80067fa:	f000 fbda 	bl	8006fb2 <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 80067fe:	b9f8      	cbnz	r0, 8006840 <USBH_MSC_Process+0x19c>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006800:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006804:	fb04 5403 	mla	r4, r4, r3, r5
 8006808:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 800680c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8006810:	2a02      	cmp	r2, #2
 8006812:	d10b      	bne.n	800682c <USBH_MSC_Process+0x188>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 8006814:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 8006818:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800681c:	1a09      	subs	r1, r1, r0
 800681e:	f242 700f 	movw	r0, #9999	; 0x270f
 8006822:	4281      	cmp	r1, r0
 8006824:	d802      	bhi.n	800682c <USBH_MSC_Process+0x188>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006826:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 800682a:	e794      	b.n	8006756 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800682c:	2234      	movs	r2, #52	; 0x34
 800682e:	fb02 5203 	mla	r2, r2, r3, r5
 8006832:	2001      	movs	r0, #1
          MSC_Handle->current_lun++;
 8006834:	4403      	add	r3, r0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006836:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
          MSC_Handle->current_lun++;
 800683a:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 800683e:	bd70      	pop	{r4, r5, r6, pc}
        if( scsi_status == USBH_FAIL)
 8006840:	2802      	cmp	r0, #2
 8006842:	d1cf      	bne.n	80067e4 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8006844:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006848:	fb04 5503 	mla	r5, r4, r3, r5
 800684c:	2308      	movs	r3, #8
 800684e:	e766      	b.n	800671e <USBH_MSC_Process+0x7a>
        MSC_Handle->current_lun++;
 8006850:	3101      	adds	r1, #1
 8006852:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
 8006856:	e77e      	b.n	8006756 <USBH_MSC_Process+0xb2>
      MSC_Handle->current_lun = 0;
 8006858:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 800685c:	732c      	strb	r4, [r5, #12]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 800685e:	f8d0 3394 	ldr.w	r3, [r0, #916]	; 0x394
 8006862:	2102      	movs	r1, #2
 8006864:	4798      	blx	r3
 8006866:	e776      	b.n	8006756 <USBH_MSC_Process+0xb2>

08006868 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8006868:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{   
 800686c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 800686e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8006870:	7ba3      	ldrb	r3, [r4, #14]
 8006872:	2b02      	cmp	r3, #2
{   
 8006874:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8006876:	d002      	beq.n	800687e <USBH_MSC_ClassRequest+0x16>
 8006878:	2b03      	cmp	r3, #3
 800687a:	d020      	beq.n	80068be <USBH_MSC_ClassRequest+0x56>
 800687c:	bb2b      	cbnz	r3, 80068ca <USBH_MSC_ClassRequest+0x62>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800687e:	4621      	mov	r1, r4
 8006880:	4610      	mov	r0, r2
 8006882:	f000 f9bc 	bl	8006bfe <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8006886:	2803      	cmp	r0, #3
 8006888:	d10e      	bne.n	80068a8 <USBH_MSC_ClassRequest+0x40>
      MSC_Handle->max_lun = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	6023      	str	r3, [r4, #0]
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 800688e:	7822      	ldrb	r2, [r4, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8006890:	2300      	movs	r3, #0
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8006892:	3201      	adds	r2, #1
 8006894:	6022      	str	r2, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006896:	2034      	movs	r0, #52	; 0x34
 8006898:	2502      	movs	r5, #2
        MSC_Handle->unit[i].state_changed = 0;
 800689a:	461e      	mov	r6, r3
 800689c:	1c59      	adds	r1, r3, #1
      for(i = 0; i < MSC_Handle->max_lun; i++)
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d804      	bhi.n	80068ae <USBH_MSC_ClassRequest+0x46>
 80068a4:	2000      	movs	r0, #0
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
    if(status == USBH_OK)
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d0f0      	beq.n	800688e <USBH_MSC_ClassRequest+0x26>
}
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80068ae:	fb00 4303 	mla	r3, r0, r3, r4
 80068b2:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0;
 80068b6:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 80068ba:	460b      	mov	r3, r1
 80068bc:	e7ee      	b.n	800689c <USBH_MSC_ClassRequest+0x34>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 80068be:	2100      	movs	r1, #0
 80068c0:	f001 f81f 	bl	8007902 <USBH_ClrFeature>
 80068c4:	b908      	cbnz	r0, 80068ca <USBH_MSC_ClassRequest+0x62>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 80068c6:	7be3      	ldrb	r3, [r4, #15]
 80068c8:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80068ca:	2001      	movs	r0, #1
 80068cc:	e7ee      	b.n	80068ac <USBH_MSC_ClassRequest+0x44>

080068ce <USBH_MSC_InterfaceDeInit>:
{
 80068ce:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80068d4:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 80068d6:	7969      	ldrb	r1, [r5, #5]
{
 80068d8:	4604      	mov	r4, r0
  if ( MSC_Handle->OutPipe)
 80068da:	b139      	cbz	r1, 80068ec <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80068dc:	f001 f88d 	bl	80079fa <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 80068e0:	7969      	ldrb	r1, [r5, #5]
 80068e2:	4620      	mov	r0, r4
 80068e4:	f001 f8a6 	bl	8007a34 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80068e8:	2300      	movs	r3, #0
 80068ea:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 80068ec:	7929      	ldrb	r1, [r5, #4]
 80068ee:	b141      	cbz	r1, 8006902 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80068f0:	4620      	mov	r0, r4
 80068f2:	f001 f882 	bl	80079fa <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 80068f6:	7929      	ldrb	r1, [r5, #4]
 80068f8:	4620      	mov	r0, r4
 80068fa:	f001 f89b 	bl	8007a34 <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80068fe:	2300      	movs	r3, #0
 8006900:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 8006902:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8006906:	69d8      	ldr	r0, [r3, #28]
 8006908:	b128      	cbz	r0, 8006916 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 800690a:	f001 f8cb 	bl	8007aa4 <free>
    phost->pActiveClass->pData = 0;
 800690e:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8006912:	2200      	movs	r2, #0
 8006914:	61da      	str	r2, [r3, #28]
}
 8006916:	2000      	movs	r0, #0
 8006918:	bd38      	pop	{r3, r4, r5, pc}

0800691a <USBH_MSC_InterfaceInit>:
{	 
 800691a:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800691c:	f8d0 1344 	ldr.w	r1, [r0, #836]	; 0x344
{	 
 8006920:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006922:	7909      	ldrb	r1, [r1, #4]
 8006924:	2350      	movs	r3, #80	; 0x50
 8006926:	2206      	movs	r2, #6
{	 
 8006928:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800692a:	f000 fc63 	bl	80071f4 <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 800692e:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006930:	4601      	mov	r1, r0
  if(interface == 0xFF) /* Not Valid Interface */
 8006932:	d06d      	beq.n	8006a10 <USBH_MSC_InterfaceInit+0xf6>
    USBH_SelectInterface (phost, interface);
 8006934:	4628      	mov	r0, r5
 8006936:	f000 fc54 	bl	80071e2 <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800693a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800693e:	f8d5 6344 	ldr.w	r6, [r5, #836]	; 0x344
 8006942:	f001 f8a7 	bl	8007a94 <malloc>
 8006946:	61f0      	str	r0, [r6, #28]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006948:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
 800694c:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800694e:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006950:	fb03 5002 	mla	r0, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006954:	fb03 5302 	mla	r3, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006958:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800695c:	f893 2250 	ldrb.w	r2, [r3, #592]	; 0x250
 8006960:	f8b0 024a 	ldrh.w	r0, [r0, #586]	; 0x24a
 8006964:	f8b3 3252 	ldrh.w	r3, [r3, #594]	; 0x252
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006968:	f011 0f80 	tst.w	r1, #128	; 0x80
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800696c:	bf19      	ittee	ne
 800696e:	71e1      	strbne	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8006970:	8160      	strhne	r0, [r4, #10]
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8006972:	71a1      	strbeq	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 8006974:	8120      	strheq	r0, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006976:	f012 0f80 	tst.w	r2, #128	; 0x80
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800697a:	bf08      	it	eq
 800697c:	71a2      	strbeq	r2, [r4, #6]
    MSC_Handle->current_lun = 0;
 800697e:	f04f 0600 	mov.w	r6, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006982:	79a1      	ldrb	r1, [r4, #6]
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8006984:	bf18      	it	ne
 8006986:	71e2      	strbne	r2, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006988:	4628      	mov	r0, r5
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800698a:	bf14      	ite	ne
 800698c:	8163      	strhne	r3, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800698e:	8123      	strheq	r3, [r4, #8]
    MSC_Handle->current_lun = 0;
 8006990:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 8006994:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8006998:	7326      	strb	r6, [r4, #12]
    MSC_Handle->error = MSC_OK;
 800699a:	7366      	strb	r6, [r4, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800699c:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800699e:	f001 f831 	bl	8007a04 <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80069a2:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80069a4:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80069a6:	4628      	mov	r0, r5
 80069a8:	f001 f82c 	bl	8007a04 <USBH_AllocPipe>
 80069ac:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 f930 	bl	8006c14 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 80069b4:	2268      	movs	r2, #104	; 0x68
 80069b6:	4631      	mov	r1, r6
 80069b8:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80069bc:	f001 f885 	bl	8007aca <memset>
    USBH_OpenPipe  (phost,
 80069c0:	8920      	ldrh	r0, [r4, #8]
 80069c2:	9002      	str	r0, [sp, #8]
 80069c4:	2702      	movs	r7, #2
 80069c6:	f895 021d 	ldrb.w	r0, [r5, #541]	; 0x21d
 80069ca:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
 80069ce:	79a2      	ldrb	r2, [r4, #6]
 80069d0:	7961      	ldrb	r1, [r4, #5]
 80069d2:	9000      	str	r0, [sp, #0]
 80069d4:	9701      	str	r7, [sp, #4]
 80069d6:	4628      	mov	r0, r5
 80069d8:	f001 f800 	bl	80079dc <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 80069dc:	8960      	ldrh	r0, [r4, #10]
 80069de:	9002      	str	r0, [sp, #8]
 80069e0:	f895 021d 	ldrb.w	r0, [r5, #541]	; 0x21d
 80069e4:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
 80069e8:	79e2      	ldrb	r2, [r4, #7]
 80069ea:	7921      	ldrb	r1, [r4, #4]
 80069ec:	9000      	str	r0, [sp, #0]
 80069ee:	9701      	str	r7, [sp, #4]
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 fff3 	bl	80079dc <USBH_OpenPipe>
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 80069f6:	4632      	mov	r2, r6
 80069f8:	7921      	ldrb	r1, [r4, #4]
 80069fa:	4628      	mov	r0, r5
 80069fc:	f7f9 ff2a 	bl	8000854 <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 8006a00:	4632      	mov	r2, r6
 8006a02:	7961      	ldrb	r1, [r4, #5]
 8006a04:	4628      	mov	r0, r5
 8006a06:	f7f9 ff25 	bl	8000854 <USBH_LL_SetToggle>
    status = USBH_OK; 
 8006a0a:	4630      	mov	r0, r6
}
 8006a0c:	b005      	add	sp, #20
 8006a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = USBH_FAIL;      
 8006a10:	2002      	movs	r0, #2
 8006a12:	e7fb      	b.n	8006a0c <USBH_MSC_InterfaceInit+0xf2>

08006a14 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a14:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006a18:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1a:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006a1c:	2634      	movs	r6, #52	; 0x34
 8006a1e:	fb06 5401 	mla	r4, r6, r1, r5
 8006a22:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006a26:	2b06      	cmp	r3, #6
 8006a28:	d010      	beq.n	8006a4c <USBH_MSC_RdWrProcess+0x38>
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	d019      	beq.n	8006a62 <USBH_MSC_RdWrProcess+0x4e>
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	d122      	bne.n	8006a78 <USBH_MSC_RdWrProcess+0x64>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif       
    break; 
  
  case MSC_REQUEST_SENSE:
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006a32:	fb06 5201 	mla	r2, r6, r1, r5
 8006a36:	329c      	adds	r2, #156	; 0x9c
 8006a38:	f000 fabb 	bl	8006fb2 <USBH_MSC_SCSI_RequestSense>
    
    if( scsi_status == USBH_OK)
 8006a3c:	b9f0      	cbnz	r0, 8006a7c <USBH_MSC_RdWrProcess+0x68>
    {
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8006a3e:	2301      	movs	r3, #1
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8006a40:	2002      	movs	r0, #2
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8006a42:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8006a46:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 8006a4a:	e008      	b.n	8006a5e <USBH_MSC_RdWrProcess+0x4a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	f000 fb3b 	bl	80070cc <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8006a56:	b950      	cbnz	r0, 8006a6e <USBH_MSC_RdWrProcess+0x5a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  default:
    break;  
    
  }
  return error;
}
 8006a5e:	b002      	add	sp, #8
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
 8006a62:	2300      	movs	r3, #0
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 faec 	bl	8007044 <USBH_MSC_SCSI_Write>
 8006a6c:	e7f3      	b.n	8006a56 <USBH_MSC_RdWrProcess+0x42>
    else if( scsi_status == USBH_FAIL)
 8006a6e:	2802      	cmp	r0, #2
 8006a70:	d104      	bne.n	8006a7c <USBH_MSC_RdWrProcess+0x68>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 8006a72:	2305      	movs	r3, #5
 8006a74:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006a78:	2001      	movs	r0, #1
 8006a7a:	e7f0      	b.n	8006a5e <USBH_MSC_RdWrProcess+0x4a>
    if( scsi_status == USBH_FAIL)
 8006a7c:	2804      	cmp	r0, #4
 8006a7e:	d1fb      	bne.n	8006a78 <USBH_MSC_RdWrProcess+0x64>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 8006a80:	2308      	movs	r3, #8
 8006a82:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8006a86:	2002      	movs	r0, #2
 8006a88:	e7e9      	b.n	8006a5e <USBH_MSC_RdWrProcess+0x4a>

08006a8a <USBH_MSC_UnitIsReady>:
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
  
  if(phost->gState == HOST_CLASS)
 8006a8a:	7803      	ldrb	r3, [r0, #0]
 8006a8c:	2b0a      	cmp	r3, #10
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8006a8e:	bf01      	itttt	eq
 8006a90:	f8d0 3344 	ldreq.w	r3, [r0, #836]	; 0x344
  {
    return (MSC_Handle->unit[lun].error == MSC_OK);
 8006a94:	69db      	ldreq	r3, [r3, #28]
 8006a96:	2234      	moveq	r2, #52	; 0x34
 8006a98:	fb02 3101 	mlaeq	r1, r2, r1, r3
 8006a9c:	bf03      	ittte	eq
 8006a9e:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
 8006aa2:	fab0 f080 	clzeq	r0, r0
 8006aa6:	0940      	lsreq	r0, r0, #5
 8006aa8:	2000      	movne	r0, #0
  }
  else
  {
    return 0;
  }
}
 8006aaa:	4770      	bx	lr

08006aac <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
  if(phost->gState == HOST_CLASS)
 8006aac:	7803      	ldrb	r3, [r0, #0]
 8006aae:	2b0a      	cmp	r3, #10
{
 8006ab0:	b510      	push	{r4, lr}
  if(phost->gState == HOST_CLASS)
 8006ab2:	d111      	bne.n	8006ad8 <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
 8006ab4:	f8d0 0344 	ldr.w	r0, [r0, #836]	; 0x344
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006ab8:	2490      	movs	r4, #144	; 0x90
 8006aba:	2334      	movs	r3, #52	; 0x34
 8006abc:	fb13 4301 	smlabb	r3, r3, r1, r4
 8006ac0:	69c1      	ldr	r1, [r0, #28]
 8006ac2:	4419      	add	r1, r3
 8006ac4:	f101 0334 	add.w	r3, r1, #52	; 0x34
 8006ac8:	f851 0b04 	ldr.w	r0, [r1], #4
 8006acc:	f842 0b04 	str.w	r0, [r2], #4
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d1f9      	bne.n	8006ac8 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBH_FAIL;
 8006ad8:	2002      	movs	r0, #2
  }
}
 8006ada:	bd10      	pop	{r4, pc}

08006adc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8006ae0:	f890 521e 	ldrb.w	r5, [r0, #542]	; 0x21e
{
 8006ae4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006ae8:	4604      	mov	r4, r0
 8006aea:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 8006aec:	b3bd      	cbz	r5, 8006b5e <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) || 
 8006aee:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8006af0:	2d0a      	cmp	r5, #10
 8006af2:	d134      	bne.n	8006b5e <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8006af4:	f8d0 5344 	ldr.w	r5, [r0, #836]	; 0x344
 8006af8:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006afa:	2634      	movs	r6, #52	; 0x34
 8006afc:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 8006b00:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 8006b04:	f1be 0f01 	cmp.w	lr, #1
 8006b08:	d129      	bne.n	8006b5e <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_READ;
 8006b0a:	f04f 0e06 	mov.w	lr, #6
 8006b0e:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006b12:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006b16:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost,
 8006b1a:	f8cd 8000 	str.w	r8, [sp]
 8006b1e:	f000 fad5 	bl	80070cc <USBH_MSC_SCSI_Read>
  
  timeout = phost->Timer;
  
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8006b22:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8006b26:	f8d4 9388 	ldr.w	r9, [r4, #904]	; 0x388
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8006b2a:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006b2e:	4639      	mov	r1, r7
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7ff ff6f 	bl	8006a14 <USBH_MSC_RdWrProcess>
 8006b36:	2801      	cmp	r0, #1
 8006b38:	d005      	beq.n	8006b46 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8006b3e:	2000      	movs	r0, #0
}
 8006b40:	b003      	add	sp, #12
 8006b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8006b46:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 8006b4a:	eba3 0309 	sub.w	r3, r3, r9
 8006b4e:	42b3      	cmp	r3, r6
 8006b50:	d803      	bhi.n	8006b5a <USBH_MSC_Read+0x7e>
 8006b52:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e9      	bne.n	8006b2e <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8006b5e:	2002      	movs	r0, #2
 8006b60:	e7ee      	b.n	8006b40 <USBH_MSC_Read+0x64>

08006b62 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006b62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8006b66:	f890 521e 	ldrb.w	r5, [r0, #542]	; 0x21e
{
 8006b6a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006b6e:	4604      	mov	r4, r0
 8006b70:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 8006b72:	b3bd      	cbz	r5, 8006be4 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) || 
 8006b74:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8006b76:	2d0a      	cmp	r5, #10
 8006b78:	d134      	bne.n	8006be4 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8006b7a:	f8d0 5344 	ldr.w	r5, [r0, #836]	; 0x344
 8006b7e:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006b80:	2634      	movs	r6, #52	; 0x34
 8006b82:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 8006b86:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 8006b8a:	f1be 0f01 	cmp.w	lr, #1
 8006b8e:	d129      	bne.n	8006be4 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_WRITE;
 8006b90:	f04f 0e07 	mov.w	lr, #7
 8006b94:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006b98:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006b9c:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost,
 8006ba0:	f8cd 8000 	str.w	r8, [sp]
 8006ba4:	f000 fa4e 	bl	8007044 <USBH_MSC_SCSI_Write>
                     length);
  
  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8006ba8:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8006bac:	f8d4 9388 	ldr.w	r9, [r4, #904]	; 0x388
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8006bb0:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f7ff ff2c 	bl	8006a14 <USBH_MSC_RdWrProcess>
 8006bbc:	2801      	cmp	r0, #1
 8006bbe:	d005      	beq.n	8006bcc <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8006bc4:	2000      	movs	r0, #0
}
 8006bc6:	b003      	add	sp, #12
 8006bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 8006bcc:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 8006bd0:	eba3 0309 	sub.w	r3, r3, r9
 8006bd4:	42b3      	cmp	r3, r6
 8006bd6:	d803      	bhi.n	8006be0 <USBH_MSC_Write+0x7e>
 8006bd8:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e9      	bne.n	8006bb4 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8006be4:	2002      	movs	r0, #2
 8006be6:	e7ee      	b.n	8006bc6 <USBH_MSC_Write+0x64>

08006be8 <USBH_MSC_BOT_REQ_Reset>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8006be8:	2221      	movs	r2, #33	; 0x21
 8006bea:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006bec:	22ff      	movs	r2, #255	; 0xff
 8006bee:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8006bf4:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;           
 8006bf6:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	f000 bc7c 	b.w	80074f6 <USBH_CtlReq>

08006bfe <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006bfe:	22a1      	movs	r2, #161	; 0xa1
 8006c00:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006c02:	22fe      	movs	r2, #254	; 0xfe
 8006c04:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 8006c06:	2200      	movs	r2, #0
 8006c08:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8006c0a:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1;           
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 8006c10:	f000 bc71 	b.w	80074f6 <USBH_CtlReq>

08006c14 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c14:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006c18:	4a05      	ldr	r2, [pc, #20]	; (8006c30 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1a:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006c1e:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <USBH_MSC_BOT_Init+0x20>)
 8006c20:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8006c28:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
}
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	4770      	bx	lr
 8006c30:	43425355 	.word	0x43425355
 8006c34:	20304050 	.word	0x20304050

08006c38 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;  
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c38:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c3e:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0;
  
  switch (MSC_Handle->hbot.state)
 8006c40:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006c44:	3b01      	subs	r3, #1
{
 8006c46:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8006c48:	2b0a      	cmp	r3, #10
 8006c4a:	d859      	bhi.n	8006d00 <USBH_MSC_BOT_Process+0xc8>
 8006c4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006c50:	001a000b 	.word	0x001a000b
 8006c54:	003d0033 	.word	0x003d0033
 8006c58:	0068005e 	.word	0x0068005e
 8006c5c:	0093008b 	.word	0x0093008b
 8006c60:	00be00b4 	.word	0x00be00b4
 8006c64:	00d6      	.short	0x00d6
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8006c66:	2302      	movs	r3, #2
    USBH_BulkSendData (phost,
 8006c68:	2501      	movs	r5, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8006c6a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8006c6e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_BulkSendData (phost,
 8006c72:	221f      	movs	r2, #31
 8006c74:	7963      	ldrb	r3, [r4, #5]
 8006c76:	9500      	str	r5, [sp, #0]
 8006c78:	f104 0154 	add.w	r1, r4, #84	; 0x54
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
      {
        USBH_BulkSendData (phost,
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f000 fe86 	bl	800798e <USBH_BulkSendData>
 8006c82:	e03d      	b.n	8006d00 <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 8006c84:	7961      	ldrb	r1, [r4, #5]
 8006c86:	f7f9 fdd1 	bl	800082c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8006c8a:	2801      	cmp	r0, #1
 8006c8c:	d10c      	bne.n	8006ca8 <USBH_MSC_BOT_Process+0x70>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 8006c8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006c90:	b143      	cbz	r3, 8006ca4 <USBH_MSC_BOT_Process+0x6c>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006c92:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8006c96:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8006c98:	bfb4      	ite	lt
 8006c9a:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006c9c:	2305      	movge	r3, #5
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
    if ( status == USBH_OK)
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8006c9e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006ca2:	e006      	b.n	8006cb2 <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006ca4:	2307      	movs	r3, #7
 8006ca6:	e7fa      	b.n	8006c9e <USBH_MSC_BOT_Process+0x66>
    else if(URB_Status == USBH_URB_NOTREADY)
 8006ca8:	2802      	cmp	r0, #2
 8006caa:	d158      	bne.n	8006d5e <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cac:	2001      	movs	r0, #1
 8006cae:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    
  default:      
    break;
  }
  return status;
}
 8006cb2:	b002      	add	sp, #8
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
    USBH_BulkReceiveData (phost,
 8006cb6:	7923      	ldrb	r3, [r4, #4]
 8006cb8:	8962      	ldrh	r2, [r4, #10]
 8006cba:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006cbe:	f000 fe7d 	bl	80079bc <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 8006cc2:	2304      	movs	r3, #4
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006cc4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006cc8:	e01a      	b.n	8006d00 <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8006cca:	7921      	ldrb	r1, [r4, #4]
 8006ccc:	f7f9 fdae 	bl	800082c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE) 
 8006cd0:	2801      	cmp	r0, #1
 8006cd2:	d117      	bne.n	8006d04 <USBH_MSC_BOT_Process+0xcc>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006cd4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006cd6:	8962      	ldrh	r2, [r4, #10]
 8006cd8:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8006cda:	bf8a      	itet	hi
 8006cdc:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006cde:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006ce0:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006ce4:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006ce6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006ce8:	bf84      	itt	hi
 8006cea:	1889      	addhi	r1, r1, r2
 8006cec:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d065      	beq.n	8006dc0 <USBH_MSC_BOT_Process+0x188>
        USBH_BulkReceiveData (phost,
 8006cf4:	7923      	ldrb	r3, [r4, #4]
 8006cf6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f000 fe5e 	bl	80079bc <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006d00:	2001      	movs	r0, #1
 8006d02:	e7d6      	b.n	8006cb2 <USBH_MSC_BOT_Process+0x7a>
    else if(URB_Status == USBH_URB_STALL)
 8006d04:	2805      	cmp	r0, #5
 8006d06:	d1fb      	bne.n	8006d00 <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006d08:	2309      	movs	r3, #9
 8006d0a:	e7db      	b.n	8006cc4 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkSendData (phost,
 8006d0c:	2501      	movs	r5, #1
 8006d0e:	7963      	ldrb	r3, [r4, #5]
 8006d10:	8922      	ldrh	r2, [r4, #8]
 8006d12:	9500      	str	r5, [sp, #0]
 8006d14:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006d18:	f000 fe39 	bl	800798e <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006d1c:	2306      	movs	r3, #6
 8006d1e:	e7d1      	b.n	8006cc4 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 8006d20:	7961      	ldrb	r1, [r4, #5]
 8006d22:	f7f9 fd83 	bl	800082c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8006d26:	2801      	cmp	r0, #1
 8006d28:	d115      	bne.n	8006d56 <USBH_MSC_BOT_Process+0x11e>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006d2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d2c:	8922      	ldrh	r2, [r4, #8]
 8006d2e:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 8006d30:	bf8a      	itet	hi
 8006d32:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006d34:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006d36:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006d3a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006d3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006d3e:	bf84      	itt	hi
 8006d40:	1889      	addhi	r1, r1, r2
 8006d42:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
 8006d46:	2501      	movs	r5, #1
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d039      	beq.n	8006dc0 <USBH_MSC_BOT_Process+0x188>
        USBH_BulkSendData (phost,
 8006d4c:	7963      	ldrb	r3, [r4, #5]
 8006d4e:	9500      	str	r5, [sp, #0]
 8006d50:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006d54:	e792      	b.n	8006c7c <USBH_MSC_BOT_Process+0x44>
    else if(URB_Status == USBH_URB_NOTREADY)
 8006d56:	2802      	cmp	r0, #2
 8006d58:	d101      	bne.n	8006d5e <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006d5a:	2305      	movs	r3, #5
 8006d5c:	e7b2      	b.n	8006cc4 <USBH_MSC_BOT_Process+0x8c>
    else if(URB_Status == USBH_URB_STALL)
 8006d5e:	2805      	cmp	r0, #5
 8006d60:	d1ce      	bne.n	8006d00 <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006d62:	230a      	movs	r3, #10
 8006d64:	e7ae      	b.n	8006cc4 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkReceiveData (phost,
 8006d66:	7923      	ldrb	r3, [r4, #4]
 8006d68:	220d      	movs	r2, #13
 8006d6a:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8006d6e:	f000 fe25 	bl	80079bc <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006d72:	2308      	movs	r3, #8
 8006d74:	e7a6      	b.n	8006cc4 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8006d76:	7921      	ldrb	r1, [r4, #4]
 8006d78:	f7f9 fd58 	bl	800082c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8006d7c:	2801      	cmp	r0, #1
 8006d7e:	d1c1      	bne.n	8006d04 <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d80:	f8d6 3344 	ldr.w	r3, [r6, #836]	; 0x344
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8006d84:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 8006d88:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d8c:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006d8e:	4630      	mov	r0, r6
 8006d90:	7921      	ldrb	r1, [r4, #4]
 8006d92:	f7f9 fd1c 	bl	80007ce <USBH_LL_GetLastXferSize>
 8006d96:	280d      	cmp	r0, #13
 8006d98:	d137      	bne.n	8006e0a <USBH_MSC_BOT_Process+0x1d2>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006d9a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006d9c:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <USBH_MSC_BOT_Process+0x1d8>)
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d133      	bne.n	8006e0a <USBH_MSC_BOT_Process+0x1d2>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006da2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006da4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d12f      	bne.n	8006e0a <USBH_MSC_BOT_Process+0x1d2>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8006daa:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
        status = USBH_OK;
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bf14      	ite	ne
 8006db2:	2002      	movne	r0, #2
 8006db4:	2000      	moveq	r0, #0
 8006db6:	e77c      	b.n	8006cb2 <USBH_MSC_BOT_Process+0x7a>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006db8:	79e1      	ldrb	r1, [r4, #7]
 8006dba:	f000 fda2 	bl	8007902 <USBH_ClrFeature>
    if (error == USBH_OK)
 8006dbe:	b908      	cbnz	r0, 8006dc4 <USBH_MSC_BOT_Process+0x18c>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006dc0:	2307      	movs	r3, #7
 8006dc2:	e77f      	b.n	8006cc4 <USBH_MSC_BOT_Process+0x8c>
    else if (error == USBH_UNRECOVERED_ERROR)
 8006dc4:	2804      	cmp	r0, #4
 8006dc6:	d19b      	bne.n	8006d00 <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006dc8:	230b      	movs	r3, #11
 8006dca:	e77b      	b.n	8006cc4 <USBH_MSC_BOT_Process+0x8c>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006dcc:	79a1      	ldrb	r1, [r4, #6]
 8006dce:	f000 fd98 	bl	8007902 <USBH_ClrFeature>
    if ( error == USBH_OK)
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	b980      	cbnz	r0, 8006df8 <USBH_MSC_BOT_Process+0x1c0>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8006dd6:	7961      	ldrb	r1, [r4, #5]
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7f9 fd4b 	bl	8000874 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8006dde:	f1c0 0201 	rsb	r2, r0, #1
 8006de2:	7961      	ldrb	r1, [r4, #5]
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7f9 fd34 	bl	8000854 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8006dec:	462a      	mov	r2, r5
 8006dee:	7921      	ldrb	r1, [r4, #4]
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7f9 fd2f 	bl	8000854 <USBH_LL_SetToggle>
 8006df6:	e787      	b.n	8006d08 <USBH_MSC_BOT_Process+0xd0>
    else if (error == USBH_UNRECOVERED_ERROR)
 8006df8:	2804      	cmp	r0, #4
 8006dfa:	e7e4      	b.n	8006dc6 <USBH_MSC_BOT_Process+0x18e>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8006dfc:	f7ff fef4 	bl	8006be8 <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 8006e00:	2800      	cmp	r0, #0
 8006e02:	f47f af56 	bne.w	8006cb2 <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8006e06:	2301      	movs	r3, #1
 8006e08:	e749      	b.n	8006c9e <USBH_MSC_BOT_Process+0x66>
        status = USBH_FAIL;
 8006e0a:	2002      	movs	r0, #2
 8006e0c:	e751      	b.n	8006cb2 <USBH_MSC_BOT_Process+0x7a>
 8006e0e:	bf00      	nop
 8006e10:	53425355 	.word	0x53425355

08006e14 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e14:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006e18:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e1a:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006e1c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006e20:	2d01      	cmp	r5, #1
 8006e22:	d003      	beq.n	8006e2c <USBH_MSC_SCSI_TestUnitReady+0x18>
 8006e24:	2d02      	cmp	r5, #2
 8006e26:	d017      	beq.n	8006e58 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e28:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8006e2c:	2600      	movs	r6, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e2e:	230a      	movs	r3, #10
 8006e30:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8006e34:	65e6      	str	r6, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e36:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006e42:	f000 fe42 	bl	8007aca <memset>
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e46:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8006e48:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e4c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e50:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    error = USBH_BUSY; 
 8006e54:	4628      	mov	r0, r5
    break;
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
}
 8006e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8006e5c:	f7ff beec 	b.w	8006c38 <USBH_MSC_BOT_Process>

08006e60 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e60:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006e64:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e66:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006e68:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006e6c:	2d01      	cmp	r5, #1
{
 8006e6e:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8006e70:	d003      	beq.n	8006e7a <USBH_MSC_SCSI_ReadCapacity+0x1a>
 8006e72:	2d02      	cmp	r5, #2
 8006e74:	d01c      	beq.n	8006eb0 <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006e76:	2001      	movs	r0, #1
  default:
    break;
  }
  
  return error;
}
 8006e78:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e7e:	2380      	movs	r3, #128	; 0x80
 8006e80:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e84:	230a      	movs	r3, #10
 8006e86:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006e92:	f000 fe1a 	bl	8007aca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 8006e96:	2325      	movs	r3, #37	; 0x25
 8006e98:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006ea2:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ea6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006eaa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006eae:	e7e2      	b.n	8006e76 <USBH_MSC_SCSI_ReadCapacity+0x16>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006eb0:	f7ff fec2 	bl	8006c38 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d1df      	bne.n	8006e78 <USBH_MSC_SCSI_ReadCapacity+0x18>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006eb8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8006ebc:	784b      	ldrb	r3, [r1, #1]
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006ebe:	788a      	ldrb	r2, [r1, #2]
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8006ec0:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006ec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006ec6:	78ca      	ldrb	r2, [r1, #3]
 8006ec8:	4313      	orrs	r3, r2
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8006eca:	780a      	ldrb	r2, [r1, #0]
 8006ecc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006ed0:	6033      	str	r3, [r6, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8006ed2:	798a      	ldrb	r2, [r1, #6]
 8006ed4:	79cb      	ldrb	r3, [r1, #7]
 8006ed6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006eda:	80b3      	strh	r3, [r6, #4]
 8006edc:	bd70      	pop	{r4, r5, r6, pc}

08006ede <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ee0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006ee4:	69dc      	ldr	r4, [r3, #28]
  switch(MSC_Handle->hbot.cmd_state)
 8006ee6:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006eea:	2d01      	cmp	r5, #1
{
 8006eec:	460f      	mov	r7, r1
 8006eee:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8006ef0:	d003      	beq.n	8006efa <USBH_MSC_SCSI_Inquiry+0x1c>
 8006ef2:	2d02      	cmp	r5, #2
 8006ef4:	d027      	beq.n	8006f46 <USBH_MSC_SCSI_Inquiry+0x68>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006ef6:	2502      	movs	r5, #2
 8006ef8:	e023      	b.n	8006f42 <USBH_MSC_SCSI_Inquiry+0x64>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f00:	230a      	movs	r3, #10
 8006f02:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006f06:	2300      	movs	r3, #0
 8006f08:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8006f0c:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8006f10:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8006f14:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8006f18:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        
    MSC_Handle->hbot.state = BOT_SEND_CBW;

    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f1c:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006f1e:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8006f20:	2112      	movs	r1, #18
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8006f22:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f24:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006f28:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006f2c:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8006f2e:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8006f32:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8006f36:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f3a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006f3e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  default:
    break;
  }
  
  return error;
}
 8006f42:	4628      	mov	r0, r5
 8006f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8006f46:	f7ff fe77 	bl	8006c38 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1f8      	bne.n	8006f42 <USBH_MSC_SCSI_Inquiry+0x64>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006f50:	4601      	mov	r1, r0
 8006f52:	2222      	movs	r2, #34	; 0x22
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 fdb8 	bl	8007aca <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8006f5a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8006f66:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	7033      	strb	r3, [r6, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 8006f70:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	09db      	lsrs	r3, r3, #7
 8006f78:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8006f7a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006f7e:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8006f82:	f8c6 3003 	str.w	r3, [r6, #3]
 8006f86:	6853      	ldr	r3, [r2, #4]
 8006f88:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8006f8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006f90:	3310      	adds	r3, #16
 8006f92:	f106 020c 	add.w	r2, r6, #12
 8006f96:	f103 0110 	add.w	r1, r3, #16
 8006f9a:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f9e:	f842 0b04 	str.w	r0, [r2], #4
 8006fa2:	428b      	cmp	r3, r1
 8006fa4:	d1f9      	bne.n	8006f9a <USBH_MSC_SCSI_Inquiry+0xbc>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8006fa6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	f8c6 301d 	str.w	r3, [r6, #29]
 8006fb0:	e7c7      	b.n	8006f42 <USBH_MSC_SCSI_Inquiry+0x64>

08006fb2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 8006fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fb4:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006fb8:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006fba:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006fbe:	2d01      	cmp	r5, #1
{
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8006fc4:	d003      	beq.n	8006fce <USBH_MSC_SCSI_RequestSense+0x1c>
 8006fc6:	2d02      	cmp	r5, #2
 8006fc8:	d029      	beq.n	800701e <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006fca:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8006fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006fce:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006fd0:	260e      	movs	r6, #14
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006fd2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006fd6:	230a      	movs	r3, #10
 8006fd8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006fdc:	65e6      	str	r6, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006fde:	2210      	movs	r2, #16
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006fe6:	f000 fd70 	bl	8007aca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8006fea:	2303      	movs	r3, #3
 8006fec:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8006ff0:	2300      	movs	r3, #0
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8006ff2:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8006ff4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8006ff8:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8006ffc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007000:	2302      	movs	r3, #2
 8007002:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8007006:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 800700a:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800700e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007012:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8007016:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 800701a:	4628      	mov	r0, r5
    break;
 800701c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 800701e:	f7ff fe0b 	bl	8006c38 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8007022:	2800      	cmp	r0, #0
 8007024:	d1d2      	bne.n	8006fcc <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8007026:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800702a:	789b      	ldrb	r3, [r3, #2]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	7033      	strb	r3, [r6, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007032:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007036:	7b1b      	ldrb	r3, [r3, #12]
 8007038:	7073      	strb	r3, [r6, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800703a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800703e:	7b5b      	ldrb	r3, [r3, #13]
 8007040:	70b3      	strb	r3, [r6, #2]
 8007042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007044 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8007044:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007046:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007048:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 800704c:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800704e:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8007050:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8007054:	2d01      	cmp	r5, #1
 8007056:	d003      	beq.n	8007060 <USBH_MSC_SCSI_Write+0x1c>
 8007058:	2d02      	cmp	r5, #2
 800705a:	d034      	beq.n	80070c6 <USBH_MSC_SCSI_Write+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800705c:	2002      	movs	r0, #2
 800705e:	e030      	b.n	80070c2 <USBH_MSC_SCSI_Write+0x7e>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8007060:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007062:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8007064:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007066:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8007068:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800706a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800706e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007072:	2210      	movs	r2, #16
 8007074:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8007078:	f000 fd27 	bl	8007aca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 800707c:	232a      	movs	r3, #42	; 0x2a
 800707e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8007082:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007086:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 800708a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800708e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 8007092:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007096:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 800709a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800709e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 80070a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80070a6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 80070aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80070ae:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80070b2:	2302      	movs	r3, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070b4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80070b8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 80070bc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 80070c0:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 80070c2:	b002      	add	sp, #8
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 80070c6:	f7ff fdb7 	bl	8006c38 <USBH_MSC_BOT_Process>
    break;
 80070ca:	e7fa      	b.n	80070c2 <USBH_MSC_SCSI_Write+0x7e>

080070cc <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80070cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070ce:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070d0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 80070d4:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070d6:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 80070d8:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80070dc:	2d01      	cmp	r5, #1
 80070de:	d003      	beq.n	80070e8 <USBH_MSC_SCSI_Read+0x1c>
 80070e0:	2d02      	cmp	r5, #2
 80070e2:	d035      	beq.n	8007150 <USBH_MSC_SCSI_Read+0x84>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80070e4:	2002      	movs	r0, #2
 80070e6:	e031      	b.n	800714c <USBH_MSC_SCSI_Read+0x80>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80070e8:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80070ea:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80070ec:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80070ee:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070f2:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 80070f4:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070f6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80070fa:	2210      	movs	r2, #16
 80070fc:	2100      	movs	r1, #0
 80070fe:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8007102:	f000 fce2 	bl	8007aca <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 8007106:	2328      	movs	r3, #40	; 0x28
 8007108:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 800710c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007110:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8007114:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007118:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 800711c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007120:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8007124:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007128:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 800712c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007130:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8007134:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007138:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800713c:	2302      	movs	r3, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 800713e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007142:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8007146:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 800714a:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 800714c:	b002      	add	sp, #8
 800714e:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8007150:	f7ff fd72 	bl	8006c38 <USBH_MSC_BOT_Process>
    break;
 8007154:	e7fa      	b.n	800714c <USBH_MSC_SCSI_Read+0x80>

08007156 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007156:	f500 7353 	add.w	r3, r0, #844	; 0x34c
 800715a:	f500 7262 	add.w	r2, r0, #904	; 0x388
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 800715e:	2100      	movs	r1, #0
 8007160:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007164:	4293      	cmp	r3, r2
 8007166:	d1fb      	bne.n	8007160 <DeInitStateMachine+0xa>
 8007168:	f100 021c 	add.w	r2, r0, #28
 800716c:	f500 7107 	add.w	r1, r0, #540	; 0x21c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8007176:	4291      	cmp	r1, r2
 8007178:	d1fb      	bne.n	8007172 <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800717a:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 800717c:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800717e:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8007180:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8007182:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8007184:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
  phost->Control.state = CTRL_SETUP;
 8007188:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 800718a:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 800718c:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800718e:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
  phost->device.speed   = USBH_SPEED_FULL;
 8007192:	f880 221d 	strb.w	r2, [r0, #541]	; 0x21d
  
  return USBH_OK;
}
 8007196:	2000      	movs	r0, #0
 8007198:	4770      	bx	lr

0800719a <USBH_Init>:
{
 800719a:	b538      	push	{r3, r4, r5, lr}
 800719c:	460d      	mov	r5, r1
  if(phost == NULL)
 800719e:	4604      	mov	r4, r0
 80071a0:	b180      	cbz	r0, 80071c4 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 80071a2:	2300      	movs	r3, #0
  phost->id = id;
 80071a4:	f880 238c 	strb.w	r2, [r0, #908]	; 0x38c
  phost->pActiveClass = NULL;
 80071a8:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
  phost->ClassNumber = 0;
 80071ac:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
  DeInitStateMachine(phost);
 80071b0:	f7ff ffd1 	bl	8007156 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 80071b4:	b10d      	cbz	r5, 80071ba <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 80071b6:	f8c4 5394 	str.w	r5, [r4, #916]	; 0x394
  USBH_LL_Init(phost);
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7f9 fabc 	bl	8000738 <USBH_LL_Init>
  return USBH_OK;
 80071c0:	2000      	movs	r0, #0
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 80071c4:	2002      	movs	r0, #2
}
 80071c6:	bd38      	pop	{r3, r4, r5, pc}

080071c8 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 80071c8:	b149      	cbz	r1, 80071de <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071ca:	f8d0 3348 	ldr.w	r3, [r0, #840]	; 0x348
 80071ce:	b933      	cbnz	r3, 80071de <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071d0:	2201      	movs	r2, #1
 80071d2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
 80071d6:	f8c0 1340 	str.w	r1, [r0, #832]	; 0x340
      status = USBH_OK;
 80071da:	4618      	mov	r0, r3
 80071dc:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 80071de:	2002      	movs	r0, #2
  }
  
  return status;
}
 80071e0:	4770      	bx	lr

080071e2 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80071e2:	f890 3236 	ldrb.w	r3, [r0, #566]	; 0x236
 80071e6:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80071e8:	bf86      	itte	hi
 80071ea:	f880 121f 	strbhi.w	r1, [r0, #543]	; 0x21f
  USBH_StatusTypeDef   status = USBH_OK;
 80071ee:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 80071f0:	2002      	movls	r0, #2
  }
  return status;  
}
 80071f2:	4770      	bx	lr

080071f4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80071f4:	b530      	push	{r4, r5, lr}
 80071f6:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 80071f8:	f890 5241 	ldrb.w	r5, [r0, #577]	; 0x241
 80071fc:	428d      	cmp	r5, r1
 80071fe:	d001      	beq.n	8007204 <USBH_FindInterface+0x10>
 8007200:	29ff      	cmp	r1, #255	; 0xff
 8007202:	d10d      	bne.n	8007220 <USBH_FindInterface+0x2c>
 8007204:	f890 5242 	ldrb.w	r5, [r0, #578]	; 0x242
 8007208:	4295      	cmp	r5, r2
 800720a:	d001      	beq.n	8007210 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800720c:	2aff      	cmp	r2, #255	; 0xff
 800720e:	d107      	bne.n	8007220 <USBH_FindInterface+0x2c>
 8007210:	f890 5243 	ldrb.w	r5, [r0, #579]	; 0x243
 8007214:	429d      	cmp	r5, r3
 8007216:	d101      	bne.n	800721c <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8007218:	b2e0      	uxtb	r0, r4
 800721a:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800721c:	2bff      	cmp	r3, #255	; 0xff
 800721e:	d0fb      	beq.n	8007218 <USBH_FindInterface+0x24>
 8007220:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007222:	2c0a      	cmp	r4, #10
 8007224:	f100 001a 	add.w	r0, r0, #26
 8007228:	d1e6      	bne.n	80071f8 <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 800722a:	20ff      	movs	r0, #255	; 0xff
}
 800722c:	bd30      	pop	{r4, r5, pc}

0800722e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800722e:	b510      	push	{r4, lr}
 8007230:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007232:	f7f9 faa9 	bl	8000788 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8007236:	2101      	movs	r1, #1
 8007238:	4620      	mov	r0, r4
 800723a:	f7f9 fafb 	bl	8000834 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 800723e:	2000      	movs	r0, #0
 8007240:	bd10      	pop	{r4, pc}

08007242 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007242:	b530      	push	{r4, r5, lr}
 8007244:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007246:	2302      	movs	r3, #2
 8007248:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 800724c:	7803      	ldrb	r3, [r0, #0]
{
 800724e:	4604      	mov	r4, r0
  switch (phost->gState)
 8007250:	2b0a      	cmp	r3, #10
 8007252:	d817      	bhi.n	8007284 <USBH_Process+0x42>
 8007254:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007258:	0016000b 	.word	0x0016000b
 800725c:	01010019 	.word	0x01010019
 8007260:	00490016 	.word	0x00490016
 8007264:	00b800e9 	.word	0x00b800e9
 8007268:	00ca00c1 	.word	0x00ca00c1
 800726c:	00f9      	.short	0x00f9
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800726e:	f890 321e 	ldrb.w	r3, [r0, #542]	; 0x21e
 8007272:	b13b      	cbz	r3, 8007284 <USBH_Process+0x42>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8007274:	2301      	movs	r3, #1
 8007276:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 8007278:	20c8      	movs	r0, #200	; 0xc8
 800727a:	f7f9 fb0b 	bl	8000894 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800727e:	4620      	mov	r0, r4
 8007280:	f7f9 fa9e 	bl	80007c0 <USBH_LL_ResetPort>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8007284:	2000      	movs	r0, #0
 8007286:	b007      	add	sp, #28
 8007288:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 800728a:	2064      	movs	r0, #100	; 0x64
 800728c:	f7f9 fb02 	bl	8000894 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007290:	4620      	mov	r0, r4
 8007292:	f7f9 fa87 	bl	80007a4 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8007296:	2305      	movs	r3, #5
 8007298:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800729a:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 800729e:	2100      	movs	r1, #0
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 fbaf 	bl	8007a04 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80072a6:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80072a8:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 fbaa 	bl	8007a04 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80072b0:	79a2      	ldrb	r2, [r4, #6]
 80072b2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80072b6:	7120      	strb	r0, [r4, #4]
 80072b8:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80072ba:	9202      	str	r2, [sp, #8]
 80072bc:	2500      	movs	r5, #0
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80072be:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 80072c2:	9200      	str	r2, [sp, #0]
 80072c4:	9501      	str	r5, [sp, #4]
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	4620      	mov	r0, r4
 80072ca:	f000 fb87 	bl	80079dc <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80072ce:	79a2      	ldrb	r2, [r4, #6]
 80072d0:	9202      	str	r2, [sp, #8]
 80072d2:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 80072d6:	9200      	str	r2, [sp, #0]
 80072d8:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80072dc:	7961      	ldrb	r1, [r4, #5]
 80072de:	9501      	str	r5, [sp, #4]
 80072e0:	462a      	mov	r2, r5
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 fb7a 	bl	80079dc <USBH_OpenPipe>
 80072e8:	e7cc      	b.n	8007284 <USBH_Process+0x42>
  switch (phost->EnumState)
 80072ea:	7843      	ldrb	r3, [r0, #1]
 80072ec:	2b07      	cmp	r3, #7
 80072ee:	d8c9      	bhi.n	8007284 <USBH_Process+0x42>
 80072f0:	e8df f003 	tbb	[pc, r3]
 80072f4:	2d1c1404 	.word	0x2d1c1404
 80072f8:	55483c34 	.word	0x55483c34
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 80072fc:	2108      	movs	r1, #8
 80072fe:	f000 f9d3 	bl	80076a8 <USBH_Get_DevDesc>
 8007302:	4605      	mov	r5, r0
 8007304:	2800      	cmp	r0, #0
 8007306:	d1bd      	bne.n	8007284 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007308:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800730a:	f894 2227 	ldrb.w	r2, [r4, #551]	; 0x227
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800730e:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8007310:	7921      	ldrb	r1, [r4, #4]
 8007312:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007316:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8007318:	9202      	str	r2, [sp, #8]
 800731a:	e7d0      	b.n	80072be <USBH_Process+0x7c>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800731c:	2112      	movs	r1, #18
 800731e:	f000 f9c3 	bl	80076a8 <USBH_Get_DevDesc>
 8007322:	2800      	cmp	r0, #0
 8007324:	d1ae      	bne.n	8007284 <USBH_Process+0x42>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8007326:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8007328:	7063      	strb	r3, [r4, #1]
 800732a:	e7ab      	b.n	8007284 <USBH_Process+0x42>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800732c:	2101      	movs	r1, #1
 800732e:	f000 facc 	bl	80078ca <USBH_SetAddress>
 8007332:	4605      	mov	r5, r0
 8007334:	2800      	cmp	r0, #0
 8007336:	d1a5      	bne.n	8007284 <USBH_Process+0x42>
      USBH_Delay(2);
 8007338:	2002      	movs	r0, #2
 800733a:	f7f9 faab 	bl	8000894 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800733e:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007340:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007342:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007344:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
      USBH_OpenPipe (phost,
 8007348:	7921      	ldrb	r1, [r4, #4]
 800734a:	79a2      	ldrb	r2, [r4, #6]
 800734c:	e7e4      	b.n	8007318 <USBH_Process+0xd6>
    if ( USBH_Get_CfgDesc(phost, 
 800734e:	2109      	movs	r1, #9
 8007350:	f000 f9ff 	bl	8007752 <USBH_Get_CfgDesc>
 8007354:	2800      	cmp	r0, #0
 8007356:	d195      	bne.n	8007284 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8007358:	2304      	movs	r3, #4
 800735a:	e7e5      	b.n	8007328 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 800735c:	f8b0 1234 	ldrh.w	r1, [r0, #564]	; 0x234
 8007360:	f000 f9f7 	bl	8007752 <USBH_Get_CfgDesc>
 8007364:	2800      	cmp	r0, #0
 8007366:	d18d      	bne.n	8007284 <USBH_Process+0x42>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8007368:	2305      	movs	r3, #5
 800736a:	e7dd      	b.n	8007328 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 800736c:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
 8007370:	b131      	cbz	r1, 8007380 <USBH_Process+0x13e>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8007372:	23ff      	movs	r3, #255	; 0xff
 8007374:	f100 021c 	add.w	r2, r0, #28
 8007378:	f000 fa82 	bl	8007880 <USBH_Get_StringDesc>
 800737c:	2800      	cmp	r0, #0
 800737e:	d181      	bne.n	8007284 <USBH_Process+0x42>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007380:	2306      	movs	r3, #6
 8007382:	e7d1      	b.n	8007328 <USBH_Process+0xe6>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8007384:	f890 122f 	ldrb.w	r1, [r0, #559]	; 0x22f
 8007388:	b139      	cbz	r1, 800739a <USBH_Process+0x158>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800738a:	23ff      	movs	r3, #255	; 0xff
 800738c:	f100 021c 	add.w	r2, r0, #28
 8007390:	f000 fa76 	bl	8007880 <USBH_Get_StringDesc>
 8007394:	2800      	cmp	r0, #0
 8007396:	f47f af75 	bne.w	8007284 <USBH_Process+0x42>
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800739a:	2307      	movs	r3, #7
 800739c:	e7c4      	b.n	8007328 <USBH_Process+0xe6>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800739e:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
 80073a2:	b139      	cbz	r1, 80073b4 <USBH_Process+0x172>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 80073a4:	23ff      	movs	r3, #255	; 0xff
 80073a6:	f100 021c 	add.w	r2, r0, #28
 80073aa:	f000 fa69 	bl	8007880 <USBH_Get_StringDesc>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f47f af68 	bne.w	8007284 <USBH_Process+0x42>
      phost->device.current_interface = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 80073ba:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d009      	beq.n	80073d6 <USBH_Process+0x194>
        phost->gState  = HOST_INPUT; 
 80073c2:	2307      	movs	r3, #7
      phost->gState  = HOST_ABORT_STATE;
 80073c4:	7023      	strb	r3, [r4, #0]
 80073c6:	e75d      	b.n	8007284 <USBH_Process+0x42>
      if(phost->pUser != NULL)
 80073c8:	f8d0 3394 	ldr.w	r3, [r0, #916]	; 0x394
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f43f af59 	beq.w	8007284 <USBH_Process+0x42>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073d2:	2101      	movs	r1, #1
 80073d4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073d6:	2308      	movs	r3, #8
 80073d8:	e7f4      	b.n	80073c4 <USBH_Process+0x182>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073da:	f890 1237 	ldrb.w	r1, [r0, #567]	; 0x237
 80073de:	f000 fa82 	bl	80078e6 <USBH_SetCfg>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f47f af4e 	bne.w	8007284 <USBH_Process+0x42>
      phost->gState  = HOST_CHECK_CLASS;
 80073e8:	2309      	movs	r3, #9
 80073ea:	e7eb      	b.n	80073c4 <USBH_Process+0x182>
    if(phost->ClassNumber == 0)
 80073ec:	f8d0 3348 	ldr.w	r3, [r0, #840]	; 0x348
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f43f af47 	beq.w	8007284 <USBH_Process+0x42>
      phost->pActiveClass = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80073fc:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 8007400:	f890 2241 	ldrb.w	r2, [r0, #577]	; 0x241
 8007404:	7919      	ldrb	r1, [r3, #4]
 8007406:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8007408:	bf08      	it	eq
 800740a:	f8c0 3344 	streq.w	r3, [r0, #836]	; 0x344
      if(phost->pActiveClass != NULL)
 800740e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007412:	b1c3      	cbz	r3, 8007446 <USBH_Process+0x204>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	4798      	blx	r3
 8007418:	b9a8      	cbnz	r0, 8007446 <USBH_Process+0x204>
          phost->gState  = HOST_CLASS_REQUEST; 
 800741a:	2306      	movs	r3, #6
 800741c:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800741e:	2103      	movs	r1, #3
 8007420:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 8007424:	4620      	mov	r0, r4
 8007426:	4798      	blx	r3
 8007428:	e72c      	b.n	8007284 <USBH_Process+0x42>
    if(phost->pActiveClass != NULL)
 800742a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800742e:	b153      	cbz	r3, 8007446 <USBH_Process+0x204>
      status = phost->pActiveClass->Requests(phost);
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	4798      	blx	r3
 8007434:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8007438:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f47f af21 	bne.w	8007284 <USBH_Process+0x42>
        phost->gState  = HOST_CLASS;        
 8007442:	230a      	movs	r3, #10
 8007444:	e7be      	b.n	80073c4 <USBH_Process+0x182>
      phost->gState  = HOST_ABORT_STATE;
 8007446:	230c      	movs	r3, #12
 8007448:	e7bc      	b.n	80073c4 <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 800744a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800744e:	2b00      	cmp	r3, #0
 8007450:	f43f af18 	beq.w	8007284 <USBH_Process+0x42>
      phost->pActiveClass->BgndProcess(phost);
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	4798      	blx	r3
 8007458:	e714      	b.n	8007284 <USBH_Process+0x42>
    DeInitStateMachine(phost);  
 800745a:	f7ff fe7c 	bl	8007156 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800745e:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8007462:	2b00      	cmp	r3, #0
 8007464:	f43f af0e 	beq.w	8007284 <USBH_Process+0x42>
      phost->pActiveClass->DeInit(phost); 
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	4620      	mov	r0, r4
 800746c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
 return USBH_OK;  
 8007474:	e706      	b.n	8007284 <USBH_Process+0x42>

08007476 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8007476:	f8c0 1388 	str.w	r1, [r0, #904]	; 0x388
 800747a:	4770      	bx	lr

0800747c <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 800747c:	f8d0 2388 	ldr.w	r2, [r0, #904]	; 0x388
 8007480:	3201      	adds	r2, #1
 8007482:	f8c0 2388 	str.w	r2, [r0, #904]	; 0x388
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007486:	7802      	ldrb	r2, [r0, #0]
 8007488:	2a0a      	cmp	r2, #10
 800748a:	d104      	bne.n	8007496 <USBH_LL_IncTimer+0x1a>
 800748c:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007490:	b10b      	cbz	r3, 8007496 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	4718      	bx	r3
 8007496:	4770      	bx	lr

08007498 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8007498:	7802      	ldrb	r2, [r0, #0]
{
 800749a:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 800749c:	b94a      	cbnz	r2, 80074b2 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 800749e:	f8d0 3394 	ldr.w	r3, [r0, #916]	; 0x394
    phost->device.is_connected = 1;
 80074a2:	2201      	movs	r2, #1
 80074a4:	f880 221e 	strb.w	r2, [r0, #542]	; 0x21e
    if(phost->pUser != NULL)
 80074a8:	b10b      	cbz	r3, 80074ae <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 80074aa:	2104      	movs	r1, #4
 80074ac:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 80074ae:	2000      	movs	r0, #0
 80074b0:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80074b2:	7802      	ldrb	r2, [r0, #0]
 80074b4:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 80074b6:	bf04      	itt	eq
 80074b8:	2202      	moveq	r2, #2
 80074ba:	7002      	strbeq	r2, [r0, #0]
 80074bc:	e7f7      	b.n	80074ae <USBH_LL_Connect+0x16>

080074be <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80074be:	b510      	push	{r4, lr}
 80074c0:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 80074c2:	f7f9 f968 	bl	8000796 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80074c6:	7921      	ldrb	r1, [r4, #4]
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fab3 	bl	8007a34 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 80074ce:	7961      	ldrb	r1, [r4, #5]
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 faaf 	bl	8007a34 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 80074d6:	2300      	movs	r3, #0
 80074d8:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
   
  if(phost->pUser != NULL)
 80074dc:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 80074e0:	b113      	cbz	r3, 80074e8 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074e2:	2105      	movs	r1, #5
 80074e4:	4620      	mov	r0, r4
 80074e6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7f9 f94d 	bl	8000788 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 80074ee:	2303      	movs	r3, #3
 80074f0:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 80074f2:	2000      	movs	r0, #0
 80074f4:	bd10      	pop	{r4, pc}

080074f6 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80074f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f8:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 80074fa:	7880      	ldrb	r0, [r0, #2]
 80074fc:	2801      	cmp	r0, #1
 80074fe:	d003      	beq.n	8007508 <USBH_CtlReq+0x12>
 8007500:	2802      	cmp	r0, #2
 8007502:	d008      	beq.n	8007516 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8007504:	2001      	movs	r0, #1
 8007506:	e004      	b.n	8007512 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8007508:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 800750a:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800750c:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 800750e:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8007510:	70a3      	strb	r3, [r4, #2]
}
 8007512:	b003      	add	sp, #12
 8007514:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8007516:	7e23      	ldrb	r3, [r4, #24]
 8007518:	3b01      	subs	r3, #1
 800751a:	2b0a      	cmp	r3, #10
 800751c:	d8f2      	bhi.n	8007504 <USBH_CtlReq+0xe>
 800751e:	e8df f003 	tbb	[pc, r3]
 8007522:	0f06      	.short	0x0f06
 8007524:	4a3d3126 	.word	0x4a3d3126
 8007528:	897c6b60 	.word	0x897c6b60
 800752c:	92          	.byte	0x92
 800752d:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 800752e:	7962      	ldrb	r2, [r4, #5]
 8007530:	f104 0110 	add.w	r1, r4, #16
 8007534:	4620      	mov	r0, r4
 8007536:	f000 f9f2 	bl	800791e <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 800753a:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800753c:	7623      	strb	r3, [r4, #24]
 800753e:	e7e1      	b.n	8007504 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8007540:	7961      	ldrb	r1, [r4, #5]
 8007542:	4620      	mov	r0, r4
 8007544:	f7f9 f972 	bl	800082c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8007548:	2801      	cmp	r0, #1
 800754a:	d123      	bne.n	8007594 <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 800754c:	8ae2      	ldrh	r2, [r4, #22]
 800754e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8007552:	b132      	cbz	r2, 8007562 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8007554:	2b00      	cmp	r3, #0
 8007556:	da02      	bge.n	800755e <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8007558:	2303      	movs	r3, #3
 800755a:	7623      	strb	r3, [r4, #24]
 800755c:	e7d9      	b.n	8007512 <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 800755e:	2305      	movs	r3, #5
 8007560:	e7ec      	b.n	800753c <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 8007562:	2b00      	cmp	r3, #0
 8007564:	da01      	bge.n	800756a <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8007566:	2309      	movs	r3, #9
 8007568:	e7e8      	b.n	800753c <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 800756a:	2307      	movs	r3, #7
 800756c:	e7e6      	b.n	800753c <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 800756e:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 8007572:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8007574:	89a2      	ldrh	r2, [r4, #12]
 8007576:	7923      	ldrb	r3, [r4, #4]
 8007578:	68a1      	ldr	r1, [r4, #8]
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f9f7 	bl	800796e <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007580:	2304      	movs	r3, #4
 8007582:	e7db      	b.n	800753c <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8007584:	7921      	ldrb	r1, [r4, #4]
 8007586:	4620      	mov	r0, r4
 8007588:	f7f9 f950 	bl	800082c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800758c:	2801      	cmp	r0, #1
 800758e:	d0ea      	beq.n	8007566 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8007590:	2805      	cmp	r0, #5
 8007592:	d01a      	beq.n	80075ca <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 8007594:	2804      	cmp	r0, #4
 8007596:	d1b5      	bne.n	8007504 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 8007598:	230b      	movs	r3, #11
 800759a:	e7cf      	b.n	800753c <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800759c:	2501      	movs	r5, #1
 800759e:	7963      	ldrb	r3, [r4, #5]
 80075a0:	89a2      	ldrh	r2, [r4, #12]
 80075a2:	9500      	str	r5, [sp, #0]
 80075a4:	68a1      	ldr	r1, [r4, #8]
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 f9ca 	bl	8007940 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 80075ac:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 80075b0:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80075b2:	2306      	movs	r3, #6
 80075b4:	e7c2      	b.n	800753c <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 80075b6:	7961      	ldrb	r1, [r4, #5]
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7f9 f937 	bl	800082c <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 80075be:	2801      	cmp	r0, #1
 80075c0:	d0d3      	beq.n	800756a <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 80075c2:	2805      	cmp	r0, #5
 80075c4:	d103      	bne.n	80075ce <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 80075c6:	230c      	movs	r3, #12
 80075c8:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 80075ca:	2003      	movs	r0, #3
 80075cc:	e7a1      	b.n	8007512 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80075ce:	2802      	cmp	r0, #2
 80075d0:	d0c5      	beq.n	800755e <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 80075d2:	2804      	cmp	r0, #4
 80075d4:	d196      	bne.n	8007504 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 80075d6:	230b      	movs	r3, #11
 80075d8:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80075da:	2301      	movs	r3, #1
 80075dc:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 80075de:	2002      	movs	r0, #2
  return status;
 80075e0:	e797      	b.n	8007512 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 80075e2:	2200      	movs	r2, #0
 80075e4:	7923      	ldrb	r3, [r4, #4]
 80075e6:	4611      	mov	r1, r2
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 f9c0 	bl	800796e <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 80075ee:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 80075f2:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80075f4:	2308      	movs	r3, #8
 80075f6:	e7a1      	b.n	800753c <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80075f8:	7921      	ldrb	r1, [r4, #4]
 80075fa:	4620      	mov	r0, r4
 80075fc:	f7f9 f916 	bl	800082c <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8007600:	2801      	cmp	r0, #1
 8007602:	d104      	bne.n	800760e <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 8007604:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8007606:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8007608:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 800760a:	7620      	strb	r0, [r4, #24]
 800760c:	e781      	b.n	8007512 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 800760e:	2804      	cmp	r0, #4
 8007610:	d0c2      	beq.n	8007598 <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 8007612:	2805      	cmp	r0, #5
 8007614:	f47f af76 	bne.w	8007504 <USBH_CtlReq+0xe>
 8007618:	e7d7      	b.n	80075ca <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800761a:	2200      	movs	r2, #0
 800761c:	2501      	movs	r5, #1
 800761e:	7963      	ldrb	r3, [r4, #5]
 8007620:	9500      	str	r5, [sp, #0]
 8007622:	4611      	mov	r1, r2
 8007624:	4620      	mov	r0, r4
 8007626:	f000 f98b 	bl	8007940 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800762a:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 800762e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007630:	230a      	movs	r3, #10
 8007632:	e783      	b.n	800753c <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8007634:	7961      	ldrb	r1, [r4, #5]
 8007636:	4620      	mov	r0, r4
 8007638:	f7f9 f8f8 	bl	800082c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800763c:	2801      	cmp	r0, #1
 800763e:	d0e1      	beq.n	8007604 <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007640:	2802      	cmp	r0, #2
 8007642:	d1a7      	bne.n	8007594 <USBH_CtlReq+0x9e>
 8007644:	e78f      	b.n	8007566 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007646:	7e63      	ldrb	r3, [r4, #25]
 8007648:	3301      	adds	r3, #1
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	7663      	strb	r3, [r4, #25]
 8007650:	d806      	bhi.n	8007660 <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007652:	4620      	mov	r0, r4
 8007654:	f7f9 f89f 	bl	8000796 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8007658:	2001      	movs	r0, #1
 800765a:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 800765c:	70a0      	strb	r0, [r4, #2]
 800765e:	e758      	b.n	8007512 <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007660:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 8007664:	2106      	movs	r1, #6
 8007666:	4620      	mov	r0, r4
 8007668:	4798      	blx	r3
      phost->Control.errorcount = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	7663      	strb	r3, [r4, #25]
 800766e:	e7b4      	b.n	80075da <USBH_CtlReq+0xe4>

08007670 <USBH_GetDescriptor>:
{ 
 8007670:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8007672:	7884      	ldrb	r4, [r0, #2]
{ 
 8007674:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8007678:	2c01      	cmp	r4, #1
 800767a:	d110      	bne.n	800769e <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800767c:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8007680:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8007682:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8007686:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 800768a:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800768c:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 8007690:	bf0c      	ite	eq
 8007692:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8007696:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007698:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 800769a:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 800769c:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 800769e:	462a      	mov	r2, r5
 80076a0:	4619      	mov	r1, r3
}
 80076a2:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 80076a4:	f7ff bf27 	b.w	80074f6 <USBH_CtlReq>

080076a8 <USBH_Get_DevDesc>:
{
 80076a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 80076aa:	f100 031c 	add.w	r3, r0, #28
 80076ae:	460d      	mov	r5, r1
 80076b0:	9100      	str	r1, [sp, #0]
 80076b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b6:	2100      	movs	r1, #0
{
 80076b8:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80076ba:	f7ff ffd9 	bl	8007670 <USBH_GetDescriptor>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d145      	bne.n	800774e <USBH_Get_DevDesc+0xa6>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80076c2:	7f23      	ldrb	r3, [r4, #28]
 80076c4:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80076c8:	7f63      	ldrb	r3, [r4, #29]
 80076ca:	f884 3221 	strb.w	r3, [r4, #545]	; 0x221
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80076ce:	7fe2      	ldrb	r2, [r4, #31]
 80076d0:	7fa3      	ldrb	r3, [r4, #30]
 80076d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80076d6:	f8a4 3222 	strh.w	r3, [r4, #546]	; 0x222
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80076da:	f894 3020 	ldrb.w	r3, [r4, #32]
 80076de:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80076e2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80076e6:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80076ea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80076ee:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
  if (length > 8)
 80076f2:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80076f4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80076f8:	f884 3227 	strb.w	r3, [r4, #551]	; 0x227
  if (length > 8)
 80076fc:	d927      	bls.n	800774e <USBH_Get_DevDesc+0xa6>
    dev_desc->idVendor           = LE16 (buf +  8);
 80076fe:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8007702:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007706:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800770a:	f8a4 3228 	strh.w	r3, [r4, #552]	; 0x228
    dev_desc->idProduct          = LE16 (buf + 10);
 800770e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8007712:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8007716:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800771a:	f8a4 322a 	strh.w	r3, [r4, #554]	; 0x22a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800771e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8007722:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007726:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800772a:	f8a4 322c 	strh.w	r3, [r4, #556]	; 0x22c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800772e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007732:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007736:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800773a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800773e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007742:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007746:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800774a:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
}
 800774e:	b003      	add	sp, #12
 8007750:	bd30      	pop	{r4, r5, pc}

08007752 <USBH_Get_CfgDesc>:
{
 8007752:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.Data;
 8007756:	f100 051c 	add.w	r5, r0, #28
{
 800775a:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 800775c:	9100      	str	r1, [sp, #0]
 800775e:	462b      	mov	r3, r5
 8007760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007764:	2100      	movs	r1, #0
{
 8007766:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8007768:	f7ff ff82 	bl	8007670 <USBH_GetDescriptor>
 800776c:	bb68      	cbnz	r0, 80077ca <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800776e:	7f23      	ldrb	r3, [r4, #28]
 8007770:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007774:	7f63      	ldrb	r3, [r4, #29]
 8007776:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800777a:	7fa6      	ldrb	r6, [r4, #30]
 800777c:	7fe3      	ldrb	r3, [r4, #31]
 800777e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007782:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007786:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800778a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800778e:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007792:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007796:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800779a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800779e:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80077a2:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80077a4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80077a8:	f8a4 6234 	strh.w	r6, [r4, #564]	; 0x234
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80077ac:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80077ae:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80077b2:	d90a      	bls.n	80077ca <USBH_Get_CfgDesc+0x78>
 80077b4:	4622      	mov	r2, r4
 80077b6:	462b      	mov	r3, r5
 80077b8:	4686      	mov	lr, r0
 80077ba:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80077bc:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80077c0:	f1be 0f0a 	cmp.w	lr, #10
 80077c4:	d001      	beq.n	80077ca <USBH_Get_CfgDesc+0x78>
 80077c6:	428e      	cmp	r6, r1
 80077c8:	d802      	bhi.n	80077d0 <USBH_Get_CfgDesc+0x7e>
}
 80077ca:	b002      	add	sp, #8
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80077d0:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80077d2:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80077d4:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80077d6:	785d      	ldrb	r5, [r3, #1]
 80077d8:	2d04      	cmp	r5, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80077da:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80077dc:	d1f0      	bne.n	80077c0 <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80077de:	781d      	ldrb	r5, [r3, #0]
 80077e0:	f882 523c 	strb.w	r5, [r2, #572]	; 0x23c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80077e4:	785d      	ldrb	r5, [r3, #1]
 80077e6:	f882 523d 	strb.w	r5, [r2, #573]	; 0x23d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80077ea:	789d      	ldrb	r5, [r3, #2]
 80077ec:	f882 523e 	strb.w	r5, [r2, #574]	; 0x23e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80077f0:	78dd      	ldrb	r5, [r3, #3]
 80077f2:	f882 523f 	strb.w	r5, [r2, #575]	; 0x23f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80077f6:	791d      	ldrb	r5, [r3, #4]
 80077f8:	f882 5240 	strb.w	r5, [r2, #576]	; 0x240
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80077fc:	795d      	ldrb	r5, [r3, #5]
 80077fe:	f882 5241 	strb.w	r5, [r2, #577]	; 0x241
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007802:	799d      	ldrb	r5, [r3, #6]
 8007804:	f882 5242 	strb.w	r5, [r2, #578]	; 0x242
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007808:	79dd      	ldrb	r5, [r3, #7]
 800780a:	f882 5243 	strb.w	r5, [r2, #579]	; 0x243
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800780e:	7a1d      	ldrb	r5, [r3, #8]
 8007810:	f882 5244 	strb.w	r5, [r2, #580]	; 0x244
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007814:	fb08 f90e 	mul.w	r9, r8, lr
        ep_ix = 0;
 8007818:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800781a:	f892 7240 	ldrb.w	r7, [r2, #576]	; 0x240
 800781e:	42bd      	cmp	r5, r7
 8007820:	db03      	blt.n	800782a <USBH_Get_CfgDesc+0xd8>
 8007822:	f10e 0e01 	add.w	lr, lr, #1
 8007826:	321a      	adds	r2, #26
 8007828:	e7ca      	b.n	80077c0 <USBH_Get_CfgDesc+0x6e>
 800782a:	428e      	cmp	r6, r1
 800782c:	d9f9      	bls.n	8007822 <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800782e:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8007830:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8007832:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8007834:	785f      	ldrb	r7, [r3, #1]
 8007836:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8007838:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800783a:	d1ee      	bne.n	800781a <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800783c:	1c6f      	adds	r7, r5, #1
 800783e:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 8007842:	4425      	add	r5, r4
 8007844:	f893 c000 	ldrb.w	ip, [r3]
 8007848:	f885 c23e 	strb.w	ip, [r5, #574]	; 0x23e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800784c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8007850:	f885 c23f 	strb.w	ip, [r5, #575]	; 0x23f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007854:	f893 c002 	ldrb.w	ip, [r3, #2]
 8007858:	f885 c240 	strb.w	ip, [r5, #576]	; 0x240
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800785c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8007860:	f885 c241 	strb.w	ip, [r5, #577]	; 0x241
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007864:	f893 a005 	ldrb.w	sl, [r3, #5]
 8007868:	f893 c004 	ldrb.w	ip, [r3, #4]
 800786c:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 8007870:	f8a5 c242 	strh.w	ip, [r5, #578]	; 0x242
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007874:	f893 c006 	ldrb.w	ip, [r3, #6]
 8007878:	f885 c244 	strb.w	ip, [r5, #580]	; 0x244
            ep_ix++;
 800787c:	b27d      	sxtb	r5, r7
 800787e:	e7cc      	b.n	800781a <USBH_Get_CfgDesc+0xc8>

08007880 <USBH_Get_StringDesc>:
{
 8007880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8007882:	f100 051c 	add.w	r5, r0, #28
{
 8007886:	4614      	mov	r4, r2
 8007888:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8007890:	462b      	mov	r3, r5
 8007892:	2100      	movs	r1, #0
{
 8007894:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8007896:	f7ff feeb 	bl	8007670 <USBH_GetDescriptor>
 800789a:	b968      	cbnz	r0, 80078b8 <USBH_Get_StringDesc+0x38>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800789c:	7f73      	ldrb	r3, [r6, #29]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d10a      	bne.n	80078b8 <USBH_Get_StringDesc+0x38>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 80078a2:	7f33      	ldrb	r3, [r6, #28]
 80078a4:	3b02      	subs	r3, #2
 80078a6:	42bb      	cmp	r3, r7
 80078a8:	bfa8      	it	ge
 80078aa:	463b      	movge	r3, r7
 80078ac:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 80078ae:	4602      	mov	r2, r0
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d803      	bhi.n	80078bc <USBH_Get_StringDesc+0x3c>
    *pdest = 0; /* mark end of string */  
 80078b4:	2300      	movs	r3, #0
 80078b6:	7023      	strb	r3, [r4, #0]
}
 80078b8:	b003      	add	sp, #12
 80078ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80078bc:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 80078be:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80078c0:	7889      	ldrb	r1, [r1, #2]
 80078c2:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 80078c6:	b292      	uxth	r2, r2
 80078c8:	e7f2      	b.n	80078b0 <USBH_Get_StringDesc+0x30>

080078ca <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80078ca:	7883      	ldrb	r3, [r0, #2]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d106      	bne.n	80078de <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078d0:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078d2:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078d4:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078d6:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078d8:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80078da:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 80078dc:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 80078de:	2200      	movs	r2, #0
 80078e0:	4611      	mov	r1, r2
 80078e2:	f7ff be08 	b.w	80074f6 <USBH_CtlReq>

080078e6 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80078e6:	7883      	ldrb	r3, [r0, #2]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d106      	bne.n	80078fa <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80078ec:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078ee:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80078f0:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078f2:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80078f4:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80078f6:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80078f8:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 80078fa:	2200      	movs	r2, #0
 80078fc:	4611      	mov	r1, r2
 80078fe:	f7ff bdfa 	b.w	80074f6 <USBH_CtlReq>

08007902 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8007902:	7883      	ldrb	r3, [r0, #2]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8007908:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800790a:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800790c:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800790e:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007910:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007912:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8007914:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8007916:	2200      	movs	r2, #0
 8007918:	4611      	mov	r1, r2
 800791a:	f7ff bdec 	b.w	80074f6 <USBH_CtlReq>

0800791e <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800791e:	b530      	push	{r4, r5, lr}
 8007920:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007922:	2400      	movs	r4, #0
{
 8007924:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007926:	2308      	movs	r3, #8
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	9101      	str	r1, [sp, #4]
 800792c:	9403      	str	r4, [sp, #12]
 800792e:	9400      	str	r4, [sp, #0]
 8007930:	4623      	mov	r3, r4
 8007932:	4622      	mov	r2, r4
 8007934:	4629      	mov	r1, r5
 8007936:	f7f8 ff66 	bl	8000806 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 800793a:	4620      	mov	r0, r4
 800793c:	b005      	add	sp, #20
 800793e:	bd30      	pop	{r4, r5, pc}

08007940 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007940:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007942:	f890 521d 	ldrb.w	r5, [r0, #541]	; 0x21d
{
 8007946:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007948:	2d00      	cmp	r5, #0
{
 800794a:	461c      	mov	r4, r3
 800794c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007950:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8007952:	bf18      	it	ne
 8007954:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	2301      	movs	r3, #1
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	9101      	str	r1, [sp, #4]
 8007960:	461a      	mov	r2, r3
 8007962:	4621      	mov	r1, r4
 8007964:	f7f8 ff4f 	bl	8000806 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8007968:	2000      	movs	r0, #0
 800796a:	b005      	add	sp, #20
 800796c:	bd30      	pop	{r4, r5, pc}

0800796e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800796e:	b530      	push	{r4, r5, lr}
 8007970:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007972:	2400      	movs	r4, #0
{
 8007974:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007976:	9202      	str	r2, [sp, #8]
 8007978:	2201      	movs	r2, #1
 800797a:	9101      	str	r1, [sp, #4]
 800797c:	9403      	str	r4, [sp, #12]
 800797e:	9200      	str	r2, [sp, #0]
 8007980:	4623      	mov	r3, r4
 8007982:	4629      	mov	r1, r5
 8007984:	f7f8 ff3f 	bl	8000806 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8007988:	4620      	mov	r0, r4
 800798a:	b005      	add	sp, #20
 800798c:	bd30      	pop	{r4, r5, pc}

0800798e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 800798e:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007990:	f890 521d 	ldrb.w	r5, [r0, #541]	; 0x21d
{ 
 8007994:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007996:	2d00      	cmp	r5, #0
{ 
 8007998:	461c      	mov	r4, r3
 800799a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800799e:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 80079a0:	bf18      	it	ne
 80079a2:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80079a4:	9303      	str	r3, [sp, #12]
 80079a6:	2301      	movs	r3, #1
 80079a8:	9101      	str	r1, [sp, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	2200      	movs	r2, #0
 80079ae:	2302      	movs	r3, #2
 80079b0:	4621      	mov	r1, r4
 80079b2:	f7f8 ff28 	bl	8000806 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80079b6:	2000      	movs	r0, #0
 80079b8:	b005      	add	sp, #20
 80079ba:	bd30      	pop	{r4, r5, pc}

080079bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80079bc:	b530      	push	{r4, r5, lr}
 80079be:	b085      	sub	sp, #20
 80079c0:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80079c2:	2400      	movs	r4, #0
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	2201      	movs	r2, #1
 80079c8:	9101      	str	r1, [sp, #4]
 80079ca:	9403      	str	r4, [sp, #12]
 80079cc:	9200      	str	r2, [sp, #0]
 80079ce:	2302      	movs	r3, #2
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 ff18 	bl	8000806 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 80079d6:	4620      	mov	r0, r4
 80079d8:	b005      	add	sp, #20
 80079da:	bd30      	pop	{r4, r5, pc}

080079dc <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80079dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 80079de:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80079e2:	9402      	str	r4, [sp, #8]
 80079e4:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80079e8:	9401      	str	r4, [sp, #4]
 80079ea:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80079ee:	9400      	str	r4, [sp, #0]
 80079f0:	f7f8 fef1 	bl	80007d6 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 80079f4:	2000      	movs	r0, #0
 80079f6:	b004      	add	sp, #16
 80079f8:	bd10      	pop	{r4, pc}

080079fa <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80079fa:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80079fc:	f7f8 fefc 	bl	80007f8 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8007a00:	2000      	movs	r0, #0
 8007a02:	bd08      	pop	{r3, pc}

08007a04 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007a04:	b530      	push	{r4, r5, lr}
 8007a06:	2300      	movs	r3, #0
 8007a08:	f500 7453 	add.w	r4, r0, #844	; 0x34c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8007a0c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007a10:	042d      	lsls	r5, r5, #16
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	d408      	bmi.n	8007a28 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8007a16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007a1a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 8007a1e:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8007a20:	f8c0 134c 	str.w	r1, [r0, #844]	; 0x34c
}
 8007a24:	b2d0      	uxtb	r0, r2
 8007a26:	bd30      	pop	{r4, r5, pc}
 8007a28:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8007a2a:	2b0b      	cmp	r3, #11
 8007a2c:	d1ee      	bne.n	8007a0c <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 8007a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a32:	e7f7      	b.n	8007a24 <USBH_AllocPipe+0x20>

08007a34 <USBH_FreePipe>:
   if(idx < 11)
 8007a34:	290a      	cmp	r1, #10
 8007a36:	bf9f      	itttt	ls
 8007a38:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8007a3c:	f8d0 334c 	ldrls.w	r3, [r0, #844]	; 0x34c
 8007a40:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8007a44:	f8c0 334c 	strls.w	r3, [r0, #844]	; 0x34c
}
 8007a48:	2000      	movs	r0, #0
 8007a4a:	4770      	bx	lr

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4e0d      	ldr	r6, [pc, #52]	; (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	; (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1ba4      	subs	r4, r4, r6
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2500      	movs	r5, #0
 8007a58:	42a5      	cmp	r5, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4e0b      	ldr	r6, [pc, #44]	; (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	; (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 f908 	bl	8007c74 <_init>
 8007a64:	1ba4      	subs	r4, r4, r6
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2500      	movs	r5, #0
 8007a6a:	42a5      	cmp	r5, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a74:	4798      	blx	r3
 8007a76:	3501      	adds	r5, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a7e:	4798      	blx	r3
 8007a80:	3501      	adds	r5, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	080082a4 	.word	0x080082a4
 8007a88:	080082a4 	.word	0x080082a4
 8007a8c:	080082a4 	.word	0x080082a4
 8007a90:	080082a8 	.word	0x080082a8

08007a94 <malloc>:
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <malloc+0xc>)
 8007a96:	4601      	mov	r1, r0
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	f000 b86d 	b.w	8007b78 <_malloc_r>
 8007a9e:	bf00      	nop
 8007aa0:	20000074 	.word	0x20000074

08007aa4 <free>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <free+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f000 b817 	b.w	8007adc <_free_r>
 8007aae:	bf00      	nop
 8007ab0:	20000074 	.word	0x20000074

08007ab4 <memcpy>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	1e43      	subs	r3, r0, #1
 8007ab8:	440a      	add	r2, r1
 8007aba:	4291      	cmp	r1, r2
 8007abc:	d100      	bne.n	8007ac0 <memcpy+0xc>
 8007abe:	bd10      	pop	{r4, pc}
 8007ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac8:	e7f7      	b.n	8007aba <memcpy+0x6>

08007aca <memset>:
 8007aca:	4402      	add	r2, r0
 8007acc:	4603      	mov	r3, r0
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d100      	bne.n	8007ad4 <memset+0xa>
 8007ad2:	4770      	bx	lr
 8007ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad8:	e7f9      	b.n	8007ace <memset+0x4>
	...

08007adc <_free_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4605      	mov	r5, r0
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d045      	beq.n	8007b70 <_free_r+0x94>
 8007ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae8:	1f0c      	subs	r4, r1, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfb8      	it	lt
 8007aee:	18e4      	addlt	r4, r4, r3
 8007af0:	f000 f8b0 	bl	8007c54 <__malloc_lock>
 8007af4:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <_free_r+0x98>)
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	4610      	mov	r0, r2
 8007afa:	b933      	cbnz	r3, 8007b0a <_free_r+0x2e>
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	6014      	str	r4, [r2, #0]
 8007b00:	4628      	mov	r0, r5
 8007b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b06:	f000 b8a6 	b.w	8007c56 <__malloc_unlock>
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	d90c      	bls.n	8007b28 <_free_r+0x4c>
 8007b0e:	6821      	ldr	r1, [r4, #0]
 8007b10:	1862      	adds	r2, r4, r1
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bf04      	itt	eq
 8007b16:	681a      	ldreq	r2, [r3, #0]
 8007b18:	685b      	ldreq	r3, [r3, #4]
 8007b1a:	6063      	str	r3, [r4, #4]
 8007b1c:	bf04      	itt	eq
 8007b1e:	1852      	addeq	r2, r2, r1
 8007b20:	6022      	streq	r2, [r4, #0]
 8007b22:	6004      	str	r4, [r0, #0]
 8007b24:	e7ec      	b.n	8007b00 <_free_r+0x24>
 8007b26:	4613      	mov	r3, r2
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	b10a      	cbz	r2, 8007b30 <_free_r+0x54>
 8007b2c:	42a2      	cmp	r2, r4
 8007b2e:	d9fa      	bls.n	8007b26 <_free_r+0x4a>
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	1858      	adds	r0, r3, r1
 8007b34:	42a0      	cmp	r0, r4
 8007b36:	d10b      	bne.n	8007b50 <_free_r+0x74>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	4401      	add	r1, r0
 8007b3c:	1858      	adds	r0, r3, r1
 8007b3e:	4282      	cmp	r2, r0
 8007b40:	6019      	str	r1, [r3, #0]
 8007b42:	d1dd      	bne.n	8007b00 <_free_r+0x24>
 8007b44:	6810      	ldr	r0, [r2, #0]
 8007b46:	6852      	ldr	r2, [r2, #4]
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	4401      	add	r1, r0
 8007b4c:	6019      	str	r1, [r3, #0]
 8007b4e:	e7d7      	b.n	8007b00 <_free_r+0x24>
 8007b50:	d902      	bls.n	8007b58 <_free_r+0x7c>
 8007b52:	230c      	movs	r3, #12
 8007b54:	602b      	str	r3, [r5, #0]
 8007b56:	e7d3      	b.n	8007b00 <_free_r+0x24>
 8007b58:	6820      	ldr	r0, [r4, #0]
 8007b5a:	1821      	adds	r1, r4, r0
 8007b5c:	428a      	cmp	r2, r1
 8007b5e:	bf04      	itt	eq
 8007b60:	6811      	ldreq	r1, [r2, #0]
 8007b62:	6852      	ldreq	r2, [r2, #4]
 8007b64:	6062      	str	r2, [r4, #4]
 8007b66:	bf04      	itt	eq
 8007b68:	1809      	addeq	r1, r1, r0
 8007b6a:	6021      	streq	r1, [r4, #0]
 8007b6c:	605c      	str	r4, [r3, #4]
 8007b6e:	e7c7      	b.n	8007b00 <_free_r+0x24>
 8007b70:	bd38      	pop	{r3, r4, r5, pc}
 8007b72:	bf00      	nop
 8007b74:	20000408 	.word	0x20000408

08007b78 <_malloc_r>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	1ccd      	adds	r5, r1, #3
 8007b7c:	f025 0503 	bic.w	r5, r5, #3
 8007b80:	3508      	adds	r5, #8
 8007b82:	2d0c      	cmp	r5, #12
 8007b84:	bf38      	it	cc
 8007b86:	250c      	movcc	r5, #12
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	db01      	blt.n	8007b92 <_malloc_r+0x1a>
 8007b8e:	42a9      	cmp	r1, r5
 8007b90:	d903      	bls.n	8007b9a <_malloc_r+0x22>
 8007b92:	230c      	movs	r3, #12
 8007b94:	6033      	str	r3, [r6, #0]
 8007b96:	2000      	movs	r0, #0
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	f000 f85b 	bl	8007c54 <__malloc_lock>
 8007b9e:	4a23      	ldr	r2, [pc, #140]	; (8007c2c <_malloc_r+0xb4>)
 8007ba0:	6814      	ldr	r4, [r2, #0]
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	b991      	cbnz	r1, 8007bcc <_malloc_r+0x54>
 8007ba6:	4c22      	ldr	r4, [pc, #136]	; (8007c30 <_malloc_r+0xb8>)
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	b91b      	cbnz	r3, 8007bb4 <_malloc_r+0x3c>
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 f841 	bl	8007c34 <_sbrk_r>
 8007bb2:	6020      	str	r0, [r4, #0]
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f000 f83c 	bl	8007c34 <_sbrk_r>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d126      	bne.n	8007c0e <_malloc_r+0x96>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f846 	bl	8007c56 <__malloc_unlock>
 8007bca:	e7e4      	b.n	8007b96 <_malloc_r+0x1e>
 8007bcc:	680b      	ldr	r3, [r1, #0]
 8007bce:	1b5b      	subs	r3, r3, r5
 8007bd0:	d41a      	bmi.n	8007c08 <_malloc_r+0x90>
 8007bd2:	2b0b      	cmp	r3, #11
 8007bd4:	d90f      	bls.n	8007bf6 <_malloc_r+0x7e>
 8007bd6:	600b      	str	r3, [r1, #0]
 8007bd8:	50cd      	str	r5, [r1, r3]
 8007bda:	18cc      	adds	r4, r1, r3
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 f83a 	bl	8007c56 <__malloc_unlock>
 8007be2:	f104 000b 	add.w	r0, r4, #11
 8007be6:	1d23      	adds	r3, r4, #4
 8007be8:	f020 0007 	bic.w	r0, r0, #7
 8007bec:	1ac3      	subs	r3, r0, r3
 8007bee:	d01b      	beq.n	8007c28 <_malloc_r+0xb0>
 8007bf0:	425a      	negs	r2, r3
 8007bf2:	50e2      	str	r2, [r4, r3]
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	428c      	cmp	r4, r1
 8007bf8:	bf0d      	iteet	eq
 8007bfa:	6863      	ldreq	r3, [r4, #4]
 8007bfc:	684b      	ldrne	r3, [r1, #4]
 8007bfe:	6063      	strne	r3, [r4, #4]
 8007c00:	6013      	streq	r3, [r2, #0]
 8007c02:	bf18      	it	ne
 8007c04:	460c      	movne	r4, r1
 8007c06:	e7e9      	b.n	8007bdc <_malloc_r+0x64>
 8007c08:	460c      	mov	r4, r1
 8007c0a:	6849      	ldr	r1, [r1, #4]
 8007c0c:	e7ca      	b.n	8007ba4 <_malloc_r+0x2c>
 8007c0e:	1cc4      	adds	r4, r0, #3
 8007c10:	f024 0403 	bic.w	r4, r4, #3
 8007c14:	42a0      	cmp	r0, r4
 8007c16:	d005      	beq.n	8007c24 <_malloc_r+0xac>
 8007c18:	1a21      	subs	r1, r4, r0
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f000 f80a 	bl	8007c34 <_sbrk_r>
 8007c20:	3001      	adds	r0, #1
 8007c22:	d0cd      	beq.n	8007bc0 <_malloc_r+0x48>
 8007c24:	6025      	str	r5, [r4, #0]
 8007c26:	e7d9      	b.n	8007bdc <_malloc_r+0x64>
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000408 	.word	0x20000408
 8007c30:	2000040c 	.word	0x2000040c

08007c34 <_sbrk_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4c06      	ldr	r4, [pc, #24]	; (8007c50 <_sbrk_r+0x1c>)
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	f000 f80a 	bl	8007c58 <_sbrk>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_sbrk_r+0x1a>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_sbrk_r+0x1a>
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20002254 	.word	0x20002254

08007c54 <__malloc_lock>:
 8007c54:	4770      	bx	lr

08007c56 <__malloc_unlock>:
 8007c56:	4770      	bx	lr

08007c58 <_sbrk>:
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <_sbrk+0x14>)
 8007c5a:	6819      	ldr	r1, [r3, #0]
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	b909      	cbnz	r1, 8007c64 <_sbrk+0xc>
 8007c60:	4903      	ldr	r1, [pc, #12]	; (8007c70 <_sbrk+0x18>)
 8007c62:	6019      	str	r1, [r3, #0]
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	4402      	add	r2, r0
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	4770      	bx	lr
 8007c6c:	20000410 	.word	0x20000410
 8007c70:	20002258 	.word	0x20002258

08007c74 <_init>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr

08007c80 <_fini>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr
